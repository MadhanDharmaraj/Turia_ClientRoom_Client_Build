{"version":3,"sources":["views/apps/digital-signature/add/AddCardGLB.js","views/apps/digital-signature/add/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","AddCard","MySwal","withReactContent","Swal","useState","block","setBlock","Loader","navigate","useNavigate","dispatch","useDispatch","store","useSelector","state","digitalsignature","schema","yup","shape","clientId","required","rows","of","name","createdBy","default","organizationId","email","contact","matches","message","excludeEmptyString","issuedDate","expiryDate","password","min","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","clientOptions","setClientOptions","setClientId","useFieldArray","keyName","fields","append","remove","onSubmit","data","temp","finaldata","map","obj","moment","unix","startOf","valueOf","addDsc","addItem","deletefun","id","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","then","result","value","deleteDigitalSignature","dismiss","DismissReason","cancel","removeItem","ind","undefined","tempid","_formValues","flg","getClientInfo","DSCList","useEffect","DSCLists","forEach","clientid","issueddate","String","expirydate","length","axios","post","status","response","arr","clients","blocking","loader","className","md","sm","size","for","render","field","ref","inputRef","classnames","classNamePrefix","options","find","c","onChange","val","getOptionLabel","option","getOptionValue","item","i","type","invalid","lg","date","dateStr","altInput","altFormat","dateFormat","onClick","rowid","color","outline","tag","Link","to","ServiceAdd","xl","UILoader","props","children","overlayColor","Tag","style","backgroundColor","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/67.6041f222.chunk.js","sourcesContent":["// ** React Imports\nimport { useEffect, useState, Fragment } from 'react'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus, Trash } from 'react-feather'\nimport { DSCList, addDsc, deleteDigitalSignature } from '../store/index'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\n//import moment from 'moment'\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, CardText, Input, FormFeedback } from 'reactstrap'\nimport axios from '@src/configs/axios/axiosConfig'\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport moment from 'moment'\nimport classnames from 'classnames'\nimport Select from 'react-select'\nimport { Link, Navigate, useNavigate } from 'react-router-dom'\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\nconst AddCard = ({ }) => {\n\n  const MySwal = withReactContent(Swal)\n\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const navigate = useNavigate()\n  const phoneRegExp = /^[0-9\\- ]{10,10}$/\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.digitalsignature)\n  const schema = yup.object().shape({\n    clientId: yup.string().required('Please Select Client'),\n    rows: yup.array().of(\n      yup.object().shape({\n        name: yup.string().required(\"Please Enter Name\"),\n        createdBy: yup.string().default(userId),\n        organizationId: yup.string().default(activeOrgId),\n        email: yup.string().email().required(\"Please Enter Email\"),\n        contact: yup.string().matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true }),\n        issuedDate: yup.number().required(\"Please Enter Issued Date\"),\n        expiryDate: yup.number().required(\"Please Enter Expiry Date\"),\n        password: yup.string().min(5, \"Password length should be 5 or above.\")\n      })\n    )\n  })\n\n  const { handleSubmit, formState: { errors }, control } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n  const [clientOptions, setClientOptions] = useState([])\n  const [clientId, setClientId] = useState('')\n\n  const { fields, append, remove } = useFieldArray({ name: 'rows', keyName: 'rowid', control })\n\n  const getClientList = () => {\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n\n  const onSubmit = async data => {\n    setBlock(true)\n    const temp = [...data.rows]\n    const finaldata = temp.map((obj) => {\n      obj['issuedDate'] = moment.unix(obj['issuedDate']).startOf('d').valueOf()\n      obj['expiryDate'] = moment.unix(obj['expiryDate']).startOf('d').valueOf()\n\n      return obj\n    })\n    data.rows = finaldata\n    await dispatch(addDsc(data))\n    navigate('/digital-signature/list')\n  }\n\n  const addItem = (() => {\n    append({ clientId, name: '', email: '', contact: '', issuedDate: '', expiryDate: '', password: '' })\n\n  })\n\n  const deletefun = (id) => {\n\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteDigitalSignature(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'DSC has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  const removeItem = async (ind) => {\n    const tempid = control._formValues.rows[ind].id\n    let flg\n    if (tempid !== undefined) {\n      flg = await deletefun(tempid)\n    }\n\n    if (flg) {\n      remove(ind)\n    }\n\n  }\n\n  const getClientInfo = async (id) => {\n    setClientId(id)\n    remove()\n    await dispatch(DSCList(id))\n  }\n\n  useEffect(() => {\n    store.DSCLists.forEach((obj) => {\n      const data = {}\n      data['id'] = obj.id\n      data['name'] = obj.name\n      data['createdBy'] = userId\n      data['email'] = obj.email\n      data['organizationId'] = activeOrgId\n      data['clientId'] = obj.clientid\n      data['contact'] = obj.contact\n      data['issuedDate'] = obj.issueddate ? String(obj.issueddate / 1000) : null\n      data['expiryDate'] = obj.expirydate ? String(obj.expirydate / 1000) : null\n      data['password'] = obj.password || ''\n\n      append(data)\n    })\n    if (store.DSCLists.length === 0) {\n      addItem()\n    }\n\n  }, [store.DSCLists])\n\n  useEffect(() => {\n    getClientList()\n  }, [])\n\n  return (\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Card className='invoice-preview-card'>\n          {/* Header */}\n          <CardBody className='pb-0'>\n            <Row>\n              <Col md='6' className='mb-1'>\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label' for='clientId'>\n                    Client\n                  </Label>\n                  <Col sm='9'>\n                    <Controller\n                      control={control}\n                      name=\"clientId\"\n                      id=\"clientId\"\n                      render={({ field, ref }) => (\n                        <Select\n                          {...field}\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.clientId })}\n                          classNamePrefix='select'\n                          options={clientOptions}\n                          value={clientOptions.find(c => { return c.id === field.value })}\n                          onChange={(val) => { field.onChange(val.id); getClientInfo(val.id) }}\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                        />\n                      )}\n                    />\n                    {errors.clientId && <FormFeedback className='text-danger'>{errors.clientId?.message}</FormFeedback>}\n                  </Col>\n                </Row>\n              </Col>\n            </Row>\n          </CardBody>\n\n          <CardBody className='invoice-padding invoice-product-details'>\n            {fields.map((item, i) => (\n              <div key={item.rowid} className='repeater-wrapper'>\n                <Row >\n                  <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                    <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                      <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Name</CardText>\n                        <Controller\n                          control={control}\n                          id='dsc_list_name'\n                          name={`rows[${i}].name`}\n                          render={({ field }) => (\n                            <Input type='text' invalid={errors.rows?.[i]?.name && true} {...field} />\n                          )}\n                        />\n                        {errors.rows?.[i]?.name && <FormFeedback>{errors.rows?.[i]?.name.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 my-2 col-lg-2 col-sm-12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Email</CardText>\n                        <Controller\n                          control={control}\n                          id='dsc_list_email'\n                          name={`rows[${i}].email`}\n                          render={({ field }) => (\n                            <Input type='email' invalid={errors.rows?.[i]?.email && true} {...field} />\n                          )}\n                        />\n                        {errors.rows?.[i]?.email && <FormFeedback>{errors.rows?.[i]?.email.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Mobile</CardText>\n                        <Controller\n                          control={control}\n                          id='dsc_list_contactNumber'\n                          name={`rows[${i}].contact`}\n                          render={({ field }) => (\n                            <Input type='number' invalid={errors.rows?.[i]?.contact && true} {...field} />\n                          )}\n                        />\n                        {errors.rows?.[i]?.contact && <FormFeedback>{errors.rows?.[i]?.contact.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Issued Date</CardText>\n                        <Controller\n                          control={control}\n                          id='dsc_list_issuedDate'\n                          name={`rows[${i}].issuedDate`}\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                              className='form-control invoice-edit-input date-picker'\n                            />\n                          )}\n                        />\n                        {errors.rows?.[i]?.issuedDate && <FormFeedback>{errors.rows?.[i]?.issuedDate.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Expiry Date</CardText>\n                        <Controller\n                          control={control}\n                          id='dsc_list_expiryDate'\n                          name={`rows[${i}].expiryDate`}\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                              className='form-control invoice-edit-input date-picker'\n                            />\n                          )}\n                        />\n                        {errors.rows?.[i]?.expiryDate && <FormFeedback>{errors.rows?.[i]?.expiryDate.message}</FormFeedback>}\n                      </Col>\n                      <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                        <CardText className='col-title mb-md-50 mb-0'>Password</CardText>\n                        <Controller\n                          control={control}\n                          id='dsc_list_password'\n                          name={`rows[${i}].password`}\n                          render={({ field }) => (\n                            <Input type='text' invalid={errors.rows?.[i]?.password && true} {...field} />\n                          )}\n                        />\n                        {errors.rows?.[i]?.password && <FormFeedback>{errors.rows?.[i]?.password.message}</FormFeedback>}\n                      </Col>\n                    </Row>\n                    <div className='d-lg-flex justify-content-center invoice-product-actions py-50 px-25'>\n                      <Trash size={18} className='cursor-pointer' onClick={() => removeItem(i)} />\n                    </div>\n                  </Col>\n                </Row>\n              </div>\n            ))}\n\n            <Row className='mt-1'>\n              <Col sm='12' className='px-0'>\n                <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                  <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                </Button>\n              </Col>\n            </Row>\n\n          </CardBody>\n          {/* /Header */}\n        </Card>\n        <Card>\n          <CardBody>\n            <div className='modal-footer border-0'>\n              <Button color='warning' outline tag={Link} to={`/digital-signature/list`}>\n                Cancel\n              </Button>\n              <Button color='primary' type=\"submit\" >\n                Save\n              </Button>\n            </div>\n          </CardBody>\n        </Card>\n      </form>\n    </UILoader>\n  )\n}\n\nexport default AddCard\n","// ** Invoice Add Components\nimport AddCard from './AddCardGLB'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ServiceAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <AddCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ServiceAdd\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}