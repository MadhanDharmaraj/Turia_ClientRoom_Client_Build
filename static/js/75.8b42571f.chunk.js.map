{"version":3,"sources":["views/pages/account-settings/AccountTabContent.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","activeOrg","activeOrganization","AccountTabs","dispatch","useDispatch","tabId","useParams","useState","businessEntityIdOptions","setBusinessEntityIdOptions","businessTypesOptions","setBusinessTypesOptions","block","setBlock","Loader","countryCode","setCountryCode","isGstRegistered","setisGstRegistered","stateOptions","setStateOptions","currencyOptions","setCurrencyOptions","countryOptions","setCountryOptions","store","useSelector","state","organization","OrganizationSchema","yup","shape","updatedBy","default","name","required","businessEmail","email","contactNo","matches","message","excludeEmptyString","currencyId","businessEntityId","when","is","then","businessTypeId","gstin","addressLine1","addressLine2","countryId","stateId","stateOther","nullable","pinZipCode","city","useForm","defaultValues","cast","resolver","yupResolver","control","handleSubmit","errors","formState","reset","setValue","onSubmit","data","updateOrganization","res","localStorage","setItem","JSON","stringify","payload","toast","success","position","useEffect","undefined","axios","post","response","arr","businessentities","businesstypes","countries","states","currencies","countryshortname","getOrganization","getRow","fieldLabel","fieldName","reqflag","disable","className","sm","size","classnames","for","id","render","field","invalid","disabled","getSelectRow","options","ref","inputRef","classNamePrefix","value","find","c","onChange","val","shortname","getOptionLabel","option","getOptionValue","organizationData","businessemail","contactno","businessentityid","businesstypeid","isgstregistered","addressline1","addressline2","countryid","stateid","stateothers","pinzipcode","currencyid","blocking","loader","tag","imageid","referrerPolicy","src","alt","height","width","initials","color","content","charAt","toUpperCase","Label","type","e","reader","FileReader","files","target","readAsDataURL","file","formData","FormData","append","catch","err","console","log","uploadFiles","hidden","accept","Form","md","defaultChecked","checked","UILoader","props","children","overlayColor","Tag","style","backgroundColor","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/75.8b42571f.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\n\n// ** Third Party Components\nimport Select from 'react-select'\nimport { useForm, Controller } from 'react-hook-form'\nimport 'cleave.js/dist/addons/cleave-phone.us'\nimport classnames from 'classnames'\nimport axios from '@src/configs/axios/axiosConfig'\n// ** Reactstrap Imports\nimport { Row, Col, Card, Input, Label, Button, CardBody, CardTitle, CardHeader, Form, FormFeedback } from 'reactstrap'\n// ** Demo Components\nimport { getOrganization, updateOrganization } from './store'\nimport { useDispatch, useSelector } from 'react-redux'\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { activeOrganization, activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\nimport toast from 'react-hot-toast'\nimport { useParams } from 'react-router-dom'\nimport Avatar from '../../../@core/components/avatar'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\nconst activeOrg = activeOrganization()\n\nconst AccountTabs = () => {\n  // ** Hooks\n  const dispatch = useDispatch()\n  const { tabId } = useParams()\n  const [businessEntityIdOptions, setBusinessEntityIdOptions] = useState([])\n  const [businessTypesOptions, setBusinessTypesOptions] = useState([])\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const [countryCode, setCountryCode] = useState(null)\n  const [isGstRegistered, setisGstRegistered] = useState(true)\n  const [stateOptions, setStateOptions] = useState([])\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [countryOptions, setCountryOptions] = useState([])\n  const phoneRegExp = /^[0-9\\- ]{10,10}$/\n  const pinzipcodeRegExp = /^[0-9\\- ]{6,6}$/\n  const gstinRegExp = /^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/\n\n  const store = useSelector(state => state.organization)\n  const OrganizationSchema = yup.object().shape({\n    updatedBy: yup.string().default(userId),\n    name: yup.string().required('Please Enter Business Name'),\n    businessEmail: yup.string().email().required('Please Enter Business Email'),\n    contactNo: yup.string().required('Please Enter Contact Number').matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true }),\n    countryCode: yup.string(),\n    currencyId: yup.string().required('Please Select Currency'),\n    businessEntityId: yup.string().when(\"countryCode\", { is: (countryCode) => countryCode === 'IN', then: yup.string().required('Please Select Business Entity') }),\n    businessTypeId: yup.string().when(\"countryCode\", { is: (countryCode) => countryCode === 'IN', then: yup.string().required('Please Select Business Type') }),\n    isGstRegistered: yup.boolean().default(true),\n    gstin: yup.string().when(\"isGstRegistered\", { is: (isGstRegistered) => isGstRegistered === true, then: yup.string().required(\"GSTIN Required.\").matches(gstinRegExp, { message: 'GSTIN is not valid', excludeEmptyString: true }) }),\n    addressLine1: yup.string().required('Please Enter Address Line 1'),\n    addressLine2: yup.string().default('').when(\"countryCode\", { is: (countryCode) => countryCode === 'IN', then: yup.string().required('Please Enter Area, Street, Sector, Village') }),\n    countryId: yup.string().required('Please Select CountryId'),\n    stateId: yup.string().when(\"countryCode\", { is: (countryCode) => countryCode === 'IN', then: yup.string().required('Please Select State') }),\n    stateOther: yup.string().default('').nullable(),\n    pinZipCode: yup.string().default('').when(\"countryCode\", { is: (countryCode) => countryCode === 'IN', then: yup.string().required('Please Enter Postal Code').matches(pinzipcodeRegExp, { message: 'Postal Code is not valid', excludeEmptyString: true }) }),\n    city: yup.string().default('').when(\"countryCode\", { is: (countryCode) => countryCode === 'IN', then: yup.string().required('Please Enter City') })\n  })\n\n  const {\n    control,\n    handleSubmit,\n    formState: { errors }, reset, setValue\n  } = useForm({\n    defaultValues: OrganizationSchema.cast(),\n    resolver: yupResolver(OrganizationSchema)\n  })\n\n  const uploadFiles = (file) => {\n\n    const formData = new FormData()\n    formData.append(`files[0]`, file)\n    formData.append('organizationId', activeOrgId)\n    formData.append('createdBy', userId)\n\n    setBlock(true)\n    axios.post('/google/logoUploads', formData).then(() => {\n      setBlock(false)\n      toast.success('Organization Picture Uploaded Successfully')\n    }).catch((err) => { console.log(err) })\n  }\n\n  const onChange = e => {\n    const reader = new FileReader(),\n      files = e.target.files\n    reader.readAsDataURL(files[0])\n\n    uploadFiles(e.target.files[0])\n\n  }\n\n  const onSubmit = async data => {\n    setBlock(true)\n    const res = await dispatch(updateOrganization(data))\n    localStorage.setItem('activeOrganization', JSON.stringify(res.payload))\n    toast.success('Organization Data Updated Successfully.', { position: 'bottom-right' })\n    setBlock(false)\n  }\n\n  const getBusineessEntity = () => {\n    axios.post('/businessentities/list').then(response => {\n      const arr = response.data\n      setBusinessEntityIdOptions(arr.businessentities)\n    })\n  }\n\n  const getBusineessTypes = () => {\n    axios.post('/businesstypes/dropdown').then(response => {\n      const arr = response.data\n      setBusinessTypesOptions(arr.businesstypes)\n    })\n  }\n\n  const getCurrencies = () => {\n    axios.post('/currencies/dropdown').then(response => {\n      const arr = response.data\n      setCurrencyOptions(arr.currencies)\n    })\n  }\n\n  const getCountries = () => {\n    axios.post('/countries/list').then(response => {\n      const arr = response.data\n      setCountryOptions(arr.countries)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  useEffect(async () => {\n    if (tabId === 'edit' || tabId === undefined) {\n      getBusineessEntity()\n      getBusineessTypes()\n      getCountries()\n      getStates()\n      getCurrencies()\n      setCountryCode(activeOrg.countryshortname)\n    }\n  }, [tabId])\n\n  useEffect(async () => {\n    await dispatch(getOrganization(activeOrgId))\n  }, [])\n\n  const getRow = (fieldLabel, fieldName, reqflag = false, disable = false) => {\n    return (\n      <Row className='mb-1'>\n        <Label sm='4' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='8'>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} disabled={disable} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Row>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false) => {\n    return (\n\n      <Row className='mb-1'>\n        <Label sm='4' size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm='8'>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                classNamePrefix='select'\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                onChange={val => {\n                  if (fieldName === 'countryId') {\n                    setCountryCode(val.shortname)\n                    setValue('CountryCode', val.shortname)\n                    if (val.shortname === 'IN') {\n                      setValue('isGstRegistered', true)\n                      setisGstRegistered(true)\n                    } else {\n                      setValue('isGstRegistered', false)\n                      setisGstRegistered(false)\n                    }\n                  }\n                  return field.onChange(val.id)\n                }}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Row>\n\n    )\n  }\n\n  useEffect(() => {\n    if (store.organizationData !== null) {\n      const data = store.organizationData\n      reset({\n        updatedBy: userId,\n        name: data.name,\n        id: data.id,\n        businessEmail: data.businessemail,\n        contactNo: data.contactno,\n        businessEntityId: data.businessentityid,\n        businessTypeId: data.businesstypeid,\n        isGstRegistered: data.isgstregistered,\n        gstin: data.gstin,\n        addressLine1: data.addressline1,\n        addressLine2: data.addressline2,\n        countryId: data.countryid,\n        stateId: data.stateid || '',\n        stateOther: data.stateothers,\n        pinZipCode: data.pinzipcode,\n        currencyId: data.currencyid,\n        city: data.city\n      })\n      setisGstRegistered(data.isgstregistered)\n    }\n  }, [store.organizationData])\n\n  return (\n    <Fragment>\n      <UILoader blocking={block} loader={<Loader />}>\n        <Card>\n          <CardHeader className='border-bottom'>\n            <CardTitle tag='h4'>Organization Details</CardTitle>\n          </CardHeader>\n          <CardBody className='py-2 my-25'>\n            <div className='d-flex'>\n              <div className='me-25'>\n                {(activeOrg.imageid !== null) ? <img referrerPolicy=\"no-referrer\" className='rounded me-50' src={`https://drive.google.com/thumbnail?id=${activeOrg.imageid}&authuser=0`} alt='Organization image' height='75' width='75' /> : <Avatar className='rounded me-50' initials color='light-primary' content={activeOrg.name ? activeOrg.name?.charAt(0).toUpperCase() : ''} />\n                }\n              </div>\n              <div className='d-flex align-items-end mt-75 ms-1'>\n                <div>\n                  <Button tag={Label} className='mb-75 me-75' size='sm' color='primary'>\n                    Upload Logo\n                    <Input type='file' onChange={onChange} hidden accept='image/*' />\n                  </Button>\n                  <p className='mb-0'>Allowed JPG, GIF or PNG. Max size of 800kB</p>\n                </div>\n              </div>\n            </div>\n            <Row tag={Form} className='mt-1' onSubmit={handleSubmit(onSubmit)}>\n              <Row>\n                <Col md='6' >\n                  {getRow('Business Name', 'name', true)}\n                </Col>\n                <Col md='6' >\n                  {getRow('Business E-mail', 'businessEmail', true, true)}\n                </Col>\n                <Col md='6' >\n                  {getRow('Conatct No', 'contactNo', true)}\n                </Col>\n                <Col md='6'>\n                  {getSelectRow('Country', 'countryId', countryOptions, true)}\n                </Col>\n                <Col md='6'>\n                  {getSelectRow('Currency', 'currencyId', currencyOptions, true)}\n                </Col>\n                <Col md='6'></Col>\n\n                {(countryCode === null || countryCode === 'IN') &&\n                  <Fragment>\n                    <Col md='6'>\n                      {getSelectRow('Business Entity', 'businessEntityId', businessEntityIdOptions, true)}\n                    </Col>\n                    <Col md='6'>\n                      {getSelectRow('Business Type', 'businessTypeId', businessTypesOptions, true)}\n                    </Col>\n                    <Col md='6' className='mt-1'>\n                      <Label className='form-label' for='pincode'>\n                        Is GST Registered?\n                      </Label>\n                      <div className='form-switch form-check-success'>\n                        {isGstRegistered &&\n                          <Input type='switch' id='switch-success' name='isGstRegistered' defaultChecked onChange={(e) => { setisGstRegistered(e.target.checked); setValue('isGstRegistered', e.target.checked) }} />\n                        }\n                        {!isGstRegistered &&\n                          <Input type='switch' id='switch-success' name='isGstRegistered' onChange={(e) => { setisGstRegistered(e.target.checked); setValue('isGstRegistered', e.target.checked) }} />\n                        }\n                      </div>\n                    </Col>\n                    <Col md='6'>\n                      {isGstRegistered ? getRow('GSTIN', 'gstin', true) : getRow('GSTIN', 'gstin', false)}\n                    </Col>\n                  </Fragment >\n                }\n                <Col sm='6' >\n                  {getRow('Address', 'addressLine1', true)}\n                </Col>\n                <Col sm={6}>\n                  {(countryCode === null || countryCode === 'IN') ? getRow('Area, Street', 'addressLine2', true) : getRow('Area, Street', 'addressLine2', false)}\n                </Col>\n                <Col md='6'>\n                  {(countryCode === null || countryCode === 'IN') ? getSelectRow('State', 'stateId', stateOptions, true) : getRow('State', 'stateOther', false)}\n                </Col>\n                <Col md='6'>\n                  {(countryCode === null || countryCode === 'IN') ? getRow('Postal Code', 'pinZipCode', true) : getRow('Postal Code', 'pinZipCode', false)}\n                </Col>\n                <Col md='6'>\n                  {(countryCode === null || countryCode === 'IN') ? getRow('Town/City', 'city', true) : getRow('Town/City', 'city', false)}\n                </Col>\n              </Row>\n              <div className='d-flex justify-content-between mt-2'>\n                <Button type='submit' className='me-1' color='primary'>\n                  Submit\n                </Button>\n              </div>\n            </Row>\n          </CardBody>\n        </Card>\n      </UILoader>\n    </Fragment>\n  )\n}\n\nexport default AccountTabs\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}