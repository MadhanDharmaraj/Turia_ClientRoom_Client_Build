{"version":3,"sources":["views/pages/account-settings/RolesAndDesignation/store/department.js","views/pages/account-settings/RolesAndDesignation/Department.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["userId","orgUserId","getData","createAsyncThunk","params","axios","post","response","data","departments","addDepartment","dispatch","getState","invoiceaccount","updateDepartment","deleteDepartment","id","updatedBy","createSlice","name","initialState","total","allData","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","activeOrgId","activeOrganizationid","Department","MySwal","withReactContent","Swal","useState","setData","selected","setSelected","formModal","setFormModal","useDispatch","store","useSelector","department","block","setBlock","Loader","schema","yup","shape","organizationId","default","required","createdBy","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","reset","resetForm","onSubmit","useEffect","className","color","size","onClick","lg","map","card","index","status","noofusers","Can","I","a","isdefault","openEditModal","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","then","result","value","dismiss","DismissReason","cancel","isOpen","toggle","blocking","loader","Object","keys","key","message","tag","Form","fieldLabel","fieldName","reqflag","md","sm","classnames","for","render","field","invalid","getRow","xs","type","UILoader","props","children","overlayColor","Tag","style","backgroundColor","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/84.e6ef2400.chunk.js","sourcesContent":["// ** Redux Imports\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\n// ** Axios Imports\nimport axios from '@src/configs/axios/axiosConfig'\nimport { orgUserId } from '@src/helper/sassHelper'\nconst userId = orgUserId()\n\nexport const getData = createAsyncThunk('appDepartment/getData', async params => {\n  const response = await axios.post(`/departments/list`, params)\n  return {\n    params,\n    data: response.data.departments\n  }\n})\n\nexport const addDepartment = createAsyncThunk('appDepartment/addDepartment', async (data, { dispatch, getState }) => {\n\n  await axios.post(`/departments/create`, data)\n  await dispatch(getData(getState().invoiceaccount.params))\n  return []\n\n})\n\nexport const updateDepartment = createAsyncThunk('appDepartment/updateDepartment', async (data, { dispatch, getState }) => {\n  await axios.post(`/departments/update`, data)\n  await dispatch(getData(getState().invoiceaccount.params))\n  return []\n})\n\nexport const deleteDepartment = createAsyncThunk('appDepartment/updateDepartment', async (id, { dispatch, getState }) => {\n  await axios.post('/departments/delete', { id, updatedBy : userId })\n  await dispatch(getData(getState().invoiceaccount.params))\n  return id\n})\n\nexport const appDepartmentSlice = createSlice({\n  name: 'appDepartment',\n  initialState: {\n    data: [],\n    total: 1,\n    params: {},\n    allData: []\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(getData.fulfilled, (state, action) => {\n        state.data = action.payload.data\n        state.params = action.payload.params\n      })\n\n  }\n})\n\nexport default appDepartmentSlice.reducer\n","// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\nimport { Can } from '@src/utility/context/Can.js'\n// ** Reactstrap Imports\nimport {\n  Row,\n  Col,\n  Card,\n  Form,\n  Badge,\n  Label,\n  Input,\n  Button,\n  CardBody,\n  FormFeedback,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Table\n} from 'reactstrap'\nimport { useForm, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\nimport { getData, addDepartment, updateDepartment, deleteDepartment } from './store/department'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Edit, Eye, Plus, Trash } from 'react-feather'\n\nconst Department = ({ }) => {\n  const MySwal = withReactContent(Swal)\n  const [data, setData] = useState([])\n  const [selected, setSelected] = useState(null)\n  const [formModal, setFormModal] = useState(false)\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.department)\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const schema = yup.object().shape({\n    organizationId: yup.string().default(activeOrgId),\n    name: yup.string().required('Please Enter Department'),\n    updatedBy: yup.string().default(userId),\n    createdBy: yup.string().default(userId)\n  })\n\n  const { handleSubmit, formState: { errors }, control, reset } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const deletefn = (id) => {\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteDepartment(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'Department has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        await dispatch(getData())\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  const resetForm = async () => {\n    reset({\n      organizationId: activeOrgId,\n      id: null,\n      name: ''\n    })\n    setFormModal(false)\n    setSelected(null)\n  }\n\n  const onSubmit = async data => {\n    setBlock(true)\n    if (selected !== null) {\n      await dispatch(updateDepartment(data))\n      resetForm()\n      setSelected(null)\n    } else {\n      await dispatch(addDepartment(data))\n      resetForm()\n    }\n    await dispatch(getData())\n    setBlock(false)\n  }\n\n  const getRow = (fieldLabel, fieldName, reqflag = true) => {\n    return (\n      <Col md={12}>\n        <Label sm='12' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Col>\n    )\n  }\n\n  useEffect(async () => {\n    await dispatch(getData())\n  }, [])\n\n  const openEditModal = card => {\n    setFormModal(true)\n    setSelected(card)\n    reset({\n      organizationId: activeOrgId,\n      id: card.id,\n      name: card.name\n    })\n  }\n\n  useEffect(() => {\n    setData(store.data)\n  }, [store.data])\n\n  return (\n    <Fragment>\n      <Card>\n        <CardBody className='py-25'>\n          <Row className='gx-4'>\n            <Row className='mb-50'>\n              <Col>\n                <Button color='primary' size='sm' onClick={() => { setFormModal(true) }}> <Plus size={15} />Add</Button>\n              </Col>\n            </Row>\n            <Col lg='12' className='mt-2 mt-lg-0'>\n              <Table className='table table-bordered table-hover'>\n                <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Status</th>\n                    <th>No of Users</th>\n                    <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {data.map((card, index) => {\n                    return (\n                      <tr key={index}>\n\n                        <td className='mb-0'>{card.name}</td>\n                        <td>\n                          {card.status === 1 ? (\n                            <Badge color='light-success' className='ms-50'>\n                              Active\n                            </Badge>\n                          ) : (\n                            <Badge color='light-danger' className='ms-50'>\n                              InActive\n                            </Badge>\n                          )}\n                        </td>\n                        <td>{card.noofusers}</td>\n                        <td>\n                          <Can I={'write'} a={'role'}>\n                            <div className='d-flex '>\n                              <Eye size={15} className='me-1' />\n                              {!card.isdefault &&\n                                <div className='d-flex'>\n                                  <Edit size={15} className='me-75' onClick={() => openEditModal(card)}>\n                                    Edit\n                                  </Edit>\n                                  <Trash size={15} onClick={() => { deletefn(card.id) }}>Delete</Trash>\n                                </div>\n                              }\n                            </div>\n                          </Can>\n                        </td>\n                      </tr>\n                    )\n                  })}\n                </tbody>\n              </Table>\n            </Col>\n\n            <Modal\n              isOpen={formModal}\n              toggle={() => setFormModal(!formModal)}\n              className='modal-dialog-centered modal-lg'\n            >\n              <UILoader blocking={block} loader={<Loader />}>\n                <ModalHeader className='bg-transparent' toggle={() => setFormModal(!formModal)}>\n                  Department\n                </ModalHeader>\n                <ModalBody>\n                  <Col>\n                    {\n                      Object.keys(errors).map((key) => {\n\n                        return <FormFeedback key={key}>${errors[key]?.message}</FormFeedback>\n\n                      })\n                    }\n                    <Row tag={Form} className='gx-2 gy-1' onSubmit={handleSubmit(onSubmit)}>\n\n                      {getRow('Department Name', 'name')}\n\n                      <Col className='mt-2 pt-1' xs={12}>\n                        <Button type='submit' className='me-1' color='primary'>\n                          Submit\n                        </Button>\n                        <Button type='button' color='warning' onClick={resetForm}>\n                          Cancel\n                        </Button>\n                      </Col>\n\n                    </Row>\n                  </Col>\n                </ModalBody>\n              </UILoader>\n            </Modal>\n          </Row>\n        </CardBody>\n      </Card>\n\n    </Fragment>\n  )\n}\n\nexport default Department\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}