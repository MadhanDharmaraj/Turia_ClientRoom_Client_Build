{"version":3,"sources":["views/reports/sales/reimbursement/columns.js","views/reports/sales/reimbursement/index.js"],"names":["renderClient","row","initials","className","color","content","contactname","charAt","paymentstatusObj","code","name","columns","sortable","minWidth","selector","uniqueno","cell","to","id","sortField","contactemail","reimbursementinvoiceitemsservicename","invoicedate","val","moment","format","totalamount","indianFormattedPrice","totalpaidamount","dueamount","paymentstatus","sts","find","o","parseInt","CustomHeader","handlePerPage","rowsPerPage","handleFilter","searchTerm","applyFileter","dataId","exportList","options","startDate","endDate","startOf","valueOf","endOf","subtract","set","add","useState","setStartDate","setEndDate","selectOpt","setSelectOpt","xl","md","sm","htmlFor","type","value","onChange","style","width","classNamePrefix","getOptionLabel","option","getOptionValue","oj","date","dates","start","end","flag","onDateChange","startdate","selected","enddate","mode","altInput","altFormat","dateFormat","outline","size","onClick","e","target","caret","Receivables","dispatch","useDispatch","store","useSelector","state","salesreport","sort","setSort","setSearchTerm","sortColumn","setSortColumn","setRowsPerPage","setDataId","useEffect","getReimbursement","q","perPage","currentTarget","exportReimbursement","export","handleSort","column","sortDirection","noHeader","subHeader","sortServer","responsive","onSort","sortIcon","data","filters","isFiltered","Object","keys","some","k","length","revenueByUser","dataToRender","subHeaderComponent"],"mappings":"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","file":"static/js/141.5bbb6b6a.chunk.js","sourcesContent":["// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\nimport moment from 'moment'\nimport { Badge } from 'reactstrap'\n\nimport { indianFormattedPrice } from '@src/helper/functionHelper.js'\n// ** Renders Client Columns\nconst renderClient = row => {\n\n  return (\n    <Avatar\n      initials\n      className='me-1'\n      color={'light-primary'}\n      content={row.contactname ? row.contactname?.charAt(0) : 'T'}\n    />\n  )\n}\n\nconst paymentstatusObj = [\n\n  { code: '5', name: \"Pending\", color: 'light-danger' },\n  { code: '6', name: \"Partially Paid\", color: 'light-warning' },\n  { code: '7', name: 'Paid', color: 'light-success' },\n  { code: '11', name: 'Sent', color: 'light-secondary' }\n]\n\nconst renderStatus = (val) => {\n  const obj = paymentstatusObj.find((o) => parseInt(o.code) === parseInt(val))\n  return obj\n}\n\nconst dateFormat = (val) => {\n  return moment(val, 'x').format('MMM DD, Y')\n}\n\nexport const columns = [\n  {\n    name: 'Unique Id',\n    sortable: true,\n    minWidth: '108px',\n    selector: row => row.uniqueno,\n    cell: row => (\n      <Link to={`/reimbursement/view/${row.id}`}>\n        <span className='text-capitalize'>{row.uniqueno}</span>\n      </Link>\n    )\n\n  },\n  {\n    name: 'Client',\n    sortable: true,\n    minWidth: '250px',\n    sortField: 'client',\n    selector: row => row.id,\n    cell: row => (\n      <div className='d-flex justify-content-left align-items-center text-overflow-ellipsis'>\n        {renderClient(row)}\n        <div className='d-flex flex-column'>\n          <span className='fw-bolder'>{row.contactname}</span>\n          <span >{row.contactemail}</span>\n        </div>\n      </div>\n    )\n  },\n  {\n    name: 'Service',\n    sortable: true,\n    minWidth: '170px',\n    sortField: 'servciename',\n    selector: row => row.reimbursementinvoiceitemsservicename\n  },\n  {\n    name: 'challan Date',\n    sortable: true,\n    minWidth: '88px',\n    selector: row => row.invoicedate,\n    cell: row => <span className='text-capitalize'>{dateFormat(row.invoicedate)}</span>\n  },\n  {\n    name: 'Challan Amount',\n    sortable: true,\n    minWidth: '88px',\n    selector: row => row.totalamount,\n    cell: row => <span className='text-capitalize'>{indianFormattedPrice(row.totalamount)}</span>\n  },\n  {\n    name: 'Paid Amount',\n    sortable: true,\n    minWidth: '88px',\n    selector: row => row.totalamount,\n    cell: row => <span className='text-capitalize'>{indianFormattedPrice(row.totalpaidamount ?? 0)}</span>\n  },\n  {\n    name: 'Balance',\n    sortable: true,\n    minWidth: '88px',\n    selector: row => row.dueamount,\n    cell: row => <span className='text-capitalize'>{indianFormattedPrice(row.dueamount)}</span>\n  },\n  {\n    name: 'Status',\n    sortable: true,\n    minWidth: '88px',\n    selector: row => row.paymentstatus,\n    cell: row => {\n      const sts = renderStatus(row.paymentstatus) || {}\n      return (\n        <Badge color={sts?.color || 'light-primary'}>{sts.name || row.paymentstatus}</Badge>\n      )\n    }\n  }\n\n]\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n// ** Table Columns\nimport { columns } from './columns'\n\n// ** Store & Actions\nimport { getReimbursement, exportReimbursement } from '../store/index'\nimport { useDispatch, useSelector } from 'react-redux'\n//import axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport DataTable from 'react-data-table-component'\nimport { ChevronDown, Download, MoreVertical } from 'react-feather'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\n// ** Reactstrap Imports\nimport {\n    Row,\n    Col,\n    Card,\n    Input,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n    Button\n} from 'reactstrap'\nimport moment from 'moment'\nimport Select from 'react-select'\n// ** Table Header\nconst CustomHeader = ({ handlePerPage, rowsPerPage, handleFilter, searchTerm, applyFileter, dataId, exportList }) => {\n    // ** Converts table to CSV\n    const options = [\n        { id: 1, name: 'All Time', startDate: '', endDate: '' },\n        { id: 2, name: 'This Month', startDate: moment().startOf('M').valueOf(), endDate: moment().endOf('M').valueOf() },\n        { id: 3, name: 'Last Month', startDate: moment().subtract(1, 'M').startOf('M').valueOf(), endDate: moment().subtract(1, 'M').endOf('M').valueOf() },\n        { id: 6, name: 'This Year', startDate: moment().set('M', 3).startOf('M').valueOf(), endDate: moment().set('M', 2).add(1, 'Y').endOf('M').valueOf() },\n        { id: 8, name: 'Custom Range', startDate: '', endDate: '' }\n    ]\n\n    const [startDate, setStartDate] = useState('')\n    const [endDate, setEndDate] = useState('')\n    const [selectOpt, setSelectOpt] = useState(1)\n\n    const onDateChange = dates => {\n        const [start, end] = dates\n        setStartDate(start)\n        setEndDate(end)\n\n        if (start && end) {\n            applyFileter({ id: 1, startDate: moment(start).valueOf() || '', endDate: moment(end).valueOf() || \"\", flag: true })\n        }\n    }\n\n    const resetFilter = () => {\n        setStartDate('')\n        setEndDate('')\n        setSelectOpt('')\n        applyFileter({ id: 1, name: 'All Time', startDate: '', endDate: \"\", flag: true })\n    }\n    return (\n        <div className='w-100 me-1 ms-50 mt-2 mb-75'>\n            <Row>\n                <Col xl='6' md='6' sm='6' className='d-flex align-items-center p-0'>\n                    <div className='d-flex align-items-center w-100'>\n                        <label htmlFor='rows-per-page'>Show</label>\n                        <Input\n                            className='mx-50'\n                            type='select'\n                            id='rows-per-page'\n                            value={rowsPerPage}\n                            onChange={handlePerPage}\n                            style={{ width: '5rem' }}\n                        >\n                            <option value='10'>10</option>\n                            <option value='25'>25</option>\n                            <option value='50'>50</option>\n                        </Input>\n                        <label htmlFor='rows-per-page'>Entries</label>\n                        <Col className='me-1'>\n                            <Select\n                                className={'react-select ms-1 w-100'}\n                                classNamePrefix='select'\n                                options={options}\n                                onChange={val => applyFileter(val)}\n                                getOptionLabel={(option) => option.name}\n                                getOptionValue={(option) => option.id}\n                                value={options.find(oj => oj.id === selectOpt) || {}}\n                            />\n                        </Col>\n\n                        {\n                            (dataId === 8) &&\n                            <Col className={'ms-1'}>\n                                <Flatpickr\n                                    onChange={(date) => { onDateChange(date) }}\n                                    startdate={startDate}\n                                    selected={startDate}\n                                    enddate={endDate}\n                                    options={{ mode: 'range', altInput: true, altFormat: \"M j, Y\", dateFormat: \"M j, Y\" }}\n                                    className='form-control invoice-edit-input date-picker'\n                                />\n                            </Col>\n                        }\n                        <Button outline color='primary' size='sm' className='ms-1' onClick={() => { resetFilter() }}>Clear Filter</Button>\n                    </div>\n                </Col>\n                <Col\n                    xl='6'\n                    className='d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1'\n                >\n                    <div className='d-flex align-items-center mb-sm-0 mb-1 me-1'>\n                        <label className='mb-0' htmlFor='search-invoice'>\n                            Search:\n                        </label>\n                        <Input\n                            id='search-invoice'\n                            className='ms-50 w-100'\n                            type='text'\n                            value={searchTerm}\n                            onChange={e => handleFilter(e.target.value)}\n                        />\n                    </div>\n\n                    <div className='d-flex align-items-center table-header-actions'>\n\n                        <UncontrolledDropdown className='ms-1'>\n                            <DropdownToggle color='secondary' caret outline>\n                                <MoreVertical className='font-small-4 me-50' />\n                            </DropdownToggle>\n                            <DropdownMenu>\n                                <DropdownItem onClick={() => { exportList() }} className='w-100'>\n                                    <Download className='font-small-4 me-50' />\n                                    <span className='align-middle'>Export</span>\n                                </DropdownItem>\n                            </DropdownMenu>\n                        </UncontrolledDropdown>\n\n                    </div>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nconst Receivables = () => {\n    // ** Store Vars\n    const dispatch = useDispatch()\n    const store = useSelector(state => state.salesreport)\n    // ** States\n    const [sort, setSort] = useState('desc')\n    const [searchTerm, setSearchTerm] = useState('')\n    const [sortColumn, setSortColumn] = useState('createdon')\n    const [rowsPerPage, setRowsPerPage] = useState(10)\n    const [dataId, setDataId] = useState(2)\n    const [startDate, setStartDate] = useState('')\n    const [endDate, setEndDate] = useState('')\n\n    // ** Get data on mount\n    useEffect(async () => {\n        await dispatch(\n            getReimbursement({\n                sort,\n                sortColumn,\n                q: searchTerm,\n                perPage: rowsPerPage,\n                startDate,\n                endDate\n            })\n        )\n    }, [dispatch])\n\n    // ** Function in get data on rows per page\n    const handlePerPage = async e => {\n        const value = parseInt(e.currentTarget.value)\n        await dispatch(\n            getReimbursement({\n                sort,\n                sortColumn,\n                q: searchTerm,\n                perPage: value,\n                startDate,\n                endDate\n            })\n        )\n        setRowsPerPage(value)\n    }\n\n    const exportList = async () => {\n        await dispatch(\n            exportReimbursement({\n                sort,\n                sortColumn,\n                q: searchTerm,\n                startDate,\n                endDate,\n                export: true\n            })\n        )\n    }\n\n    // ** Function in get data on search query change\n    const handleFilter = async val => {\n        setSearchTerm(val)\n        await dispatch(\n            getReimbursement({\n                sort,\n                q: val,\n                sortColumn,\n                perPage: rowsPerPage,\n                startDate,\n                endDate\n            })\n        )\n    }\n\n    // ** Table data to render\n    const dataToRender = () => {\n        const filters = {\n            q: searchTerm\n        }\n\n        const isFiltered = Object.keys(filters).some(function (k) {\n            return filters[k].length > 0\n        })\n\n        if (store.revenueByUser.length > 0) {\n            return store.revenueByUser\n        } else if (store.revenueByUser.length === 0 && isFiltered) {\n            return []\n        }\n    }\n\n    const handleSort = async (column, sortDirection) => {\n        setSort(sortDirection)\n        setSortColumn(column.sortField)\n        await dispatch(\n            getReimbursement({\n                sort,\n                sortColumn,\n                q: searchTerm,\n                perPage: rowsPerPage,\n                startDate,\n                endDate\n            })\n        )\n    }\n\n    const applyFileter = async (val) => {\n\n        setDataId(val.id)\n\n        if (val.id === 1 && !val.flag) {\n            return\n        }\n        setStartDate(val.startDate)\n        setEndDate(val.endDate)\n        await dispatch(\n            getReimbursement({\n                sort,\n                q: searchTerm,\n                sortColumn,\n                perPage: rowsPerPage,\n                startDate: val.startDate,\n                endDate: val.endDate\n            })\n        )\n    }\n\n    return (\n        <Fragment>\n            <Card className='overflow-hidden'>\n                <div className='react-dataTable'>\n                    <DataTable\n                        noHeader\n                        subHeader\n                        sortServer\n                        responsive\n                        columns={columns}\n                        onSort={handleSort}\n                        sortIcon={<ChevronDown />}\n                        className='react-dataTable'\n                        data={dataToRender()}\n                        subHeaderComponent={\n                            <CustomHeader\n                                store={store}\n                                searchTerm={searchTerm}\n                                rowsPerPage={rowsPerPage}\n                                handleFilter={handleFilter}\n                                handlePerPage={handlePerPage}\n                                applyFileter={applyFileter}\n                                dataId={dataId}\n                                exportList={exportList}\n                            />\n                        }\n                    />\n                </div>\n            </Card>\n        </Fragment>\n    )\n}\n\nexport default Receivables\n"],"sourceRoot":""}