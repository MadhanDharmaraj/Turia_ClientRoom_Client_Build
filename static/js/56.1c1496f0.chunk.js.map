{"version":3,"sources":["views/apps/proposal/edit/EditCard.js","views/apps/proposal/edit/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","views/apps/proposal/helper/hepler.js"],"names":["activeOrgId","activeOrganizationid","activeOrg","activeOrganization","userId","orgUserId","AddCard","data","useState","block","setBlock","Loader","colourStyles","multiValue","styles","backgroundColor","id","useParams","MySwal","withReactContent","Swal","clientOptions","setClientOptions","serviceOptions","setServiceOptions","taxGroupOptions","setTaxGroupOptions","stateOptions","setStateOptions","accountOptions","setAccountOptions","finalTotal","setFinalTotal","finalSubTotal","setFinalSubTotal","invoiceItems","setInvoiceItems","invoiceTaxes","setInvoiceTaxes","userOptions","setuserOptions","selEmployees","setSelEmployees","participants","setParticipants","selectedClient","setSelectedClient","taxValues","setTaxValues","accDetails","setAccDetails","exemptionReasonOptions","setExemptionReasonOptions","navigate","useNavigate","dispatch","useDispatch","store","useSelector","state","proposal","getOrganizationUsers","axios","post","then","response","arr","organizationusers","catch","err","console","log","deletefun","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","result","value","deleteInvoiceItem","dismiss","DismissReason","cancel","useEffect","status","clients","services","taxgroups","states","transactionaccounts","exemptionreasons","invoiceId","res","temp","taskinvoiceparticipants","map","obj","getClientData","getClient","payload","schema","yup","shape","updatedBy","default","contactId","required","uniqueIdentity","contactEmail","contactName","invoiceDate","paymentDue","placeOfSupplyId","subTotalAmount","totalAmount","totalTaxAmount","organizationId","isRcmApplicable","isgstregistered","dueAmount","billingAddressLine1","billingAddressLine2","billingAddressState","billingAddressCity","billingAddressZipCode","billingCurrencyId","currencyid","bankAccountBankName","bankAccountBranchName","bankAccountHolderName","bankAccountId","bankAccountIfscCode","bankAccountNumber","organizationAddressLine1","addressline1","organizationAddressLine2","addressline2","organizationCity","organizationcity","organizationState","statename","organizationZipCode","pinzipcode","organizationName","name","organizationImageUrl","organizationimageid","organizationStateCode","stateshortname","organizationGstin","gstin","note","calculateTaxes","paymentStatus","rows","of","serviceId","sacCode","price","exemptionReasonId","nullable","isTaxApplicable","actualPrice","taxGroupId","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","setValue","reset","useFieldArray","keyName","fields","append","remove","onSubmit","moment","valueOf","updateInvoice","InvoiceItems","forEach","key","updateInvoiceItems","length","ind","findIndex","push","users","deletedUser","addInvoiceParticipant","addItem","taxPrice","description","ItemFinalTotalAmount","items","_formValues","finalsubTotalAmount","finalTaxAmount","parseFloat","output","a","taxes","parser","flat","reduce","acc","item","undefined","existItem","find","taxName","taxAmount","String","Object","assign","JSON","stringify","calculateInvoiceTax","removeItem","tempid","flg","loadItemData","service_price","tax_group_id","desFlg","priceFlg","sacFlg","taxFlg","itemFlg","eachObj","selectedService","saccode","sellingprice","taxgroupid","exemptionreasonid","calculateTaxAmount","invoice_item_taxes","taxGroups","taxApplicable","nontaxableflag","istaxapplicable","taxid","calculateTax","percentage","dataTemp","parseInt","toFixed","taxvaluefn","taxtype","stateid","taxType","taxdata","type","taxvalues","getTaxValue","bankAccountfn","bankName","branchAddress","accountHolderName","ifscCode","accountNumber","keys","billingaddresscity","billingaddressline1","billingaddressstatesname","billingaddresszip","currenciessymbol","currenciescode","currenciesname","email","placeofsupplyid","getInvoiceItemList","getInvoiceItems","invoice","contactid","uniqueno","contactemail","contactname","invoicedate","format","paymentdue","subtotalamount","totalamount","totaltaxamount","isrcmapplicable","dueamount","billingaddressline2","billingaddressstate","billingaddresszipcode","billingcurrencyid","bankaccountbankname","bankaccountbranchname","bankaccountholdername","bankaccountid","bankaccountifsccode","bankaccountnumber","organizationaddressline1","organizationaddressline2","organizationstate","organizationzipcode","organizationname","organizationimageurl","organizationstatecode","organizationgstin","paymentstatus","handleUserChange","e","tempArr","Array","isArray","x","blocking","loader","className","xl","md","sm","ErrorText","message","renderError","height","width","referrerPolicy","src","imageid","alt","size","placeholder","disabled","render","field","onChange","date","dateStr","options","altInput","altFormat","dateFormat","ref","inputRef","classnames","classNamePrefix","c","val","getOptionLabel","option","getOptionValue","index","defaultValue","rules","invalid","onInput","lg","onClick","rowid","color","order","xs","for","outline","tag","Link","to","reviewer","isMulti","InvoiceEdit","setData","getInvoice","taskinvoices","EditCard","UILoader","props","children","overlayColor","Tag","style","defaultProps","ComponentSpinner","amount","taxRateInPercentage","TaxType","calculatedTax","str","parse","replace"],"mappings":"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","file":"static/js/56.1c1496f0.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus, Hash } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n// ** Reactstrap Imports\nimport { Row, Col, Card, Input, Label, Button, CardBody, CardText, InputGroup, InputGroupText, FormFeedback } from 'reactstrap'\nimport classnames from 'classnames'\n\nimport { updateInvoice, updateInvoiceItems, getClient, getInvoiceItems, deleteInvoiceItem, addInvoiceParticipant } from '../store/index'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { activeOrganizationid, activeOrganization, orgUserId } from '@src/helper/sassHelper'\nimport { calculateTax, parser } from '../helper/hepler'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport moment from 'moment'\n\nconst activeOrgId = activeOrganizationid()\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\n\nconst AddCard = ({ data }) => {\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const colourStyles = {\n    multiValue: (styles, { }) => {\n\n      return {\n        ...styles,\n        backgroundColor: '#7367f0'\n      }\n    }\n  }\n\n  const { id } = useParams()\n  const MySwal = withReactContent(Swal)\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  const [taxGroupOptions, setTaxGroupOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [accountOptions, setAccountOptions] = useState([])\n  const [finalTotal, setFinalTotal] = useState(0)\n  const [finalSubTotal, setFinalSubTotal] = useState(0)\n\n  const [invoiceItems, setInvoiceItems] = useState([])\n  const [invoiceTaxes, setInvoiceTaxes] = useState([])\n  const [userOptions, setuserOptions] = useState([])\n  const [selEmployees, setSelEmployees] = useState([])\n  const [participants, setParticipants] = useState([])\n  const [selectedClient, setSelectedClient] = useState({})\n  const [taxValues, setTaxValues] = useState([])\n  const [accDetails, setAccDetails] = useState([])\n  const [exemptionReasonOptions, setExemptionReasonOptions] = useState([])\n\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n\n  const store = useSelector(state => state.proposal)\n  const getClients = () => {\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getServices = () => {\n    axios.post('/services/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setServiceOptions(arr.services)\n    })\n  }\n\n  const getTaxValue = (taxType) => {\n    const taxdata = {\n      type: taxType\n    }\n    axios.post('/taxvalues/list', taxdata).then(response => {\n      const arr = response.data\n      setTaxValues(arr.taxvalues)\n    })\n  }\n\n  const getExemptionReason = () => {\n    axios.post('/exemptionreasons/dropdown').then(response => {\n      const arr = response.data\n      setExemptionReasonOptions(arr.exemptionreasons)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getTaxGroups = () => {\n    axios.post('/taxgroups/dropdown').then(response => {\n      const arr = response.data\n      setTaxGroupOptions(arr.taxgroups)\n    })\n  }\n\n\n  const getBankAccounts = () => {\n    axios.post('/transactionaccounts/dropdown').then(response => {\n      const arr = response.data\n      setAccountOptions(arr.transactionaccounts)\n    })\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown').then(response => {\n      const arr = response.data.organizationusers\n      setuserOptions(arr)\n    }).catch((err) => {\n      console.log(err)\n    })\n  }\n\n  const getParticipants = () => {\n\n    axios.post('/taskinvoices/getparticipants', { invoiceId: id })\n      .then((res) => {\n        const temp = res.data.taskinvoiceparticipants.map((obj) => obj.id)\n        setSelEmployees(temp)\n        setParticipants(res.data.taskinvoiceparticipants)\n      })\n      .catch((err) => { console.log(err) })\n\n  }\n\n\n  const deletefun = (id) => {\n\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteInvoiceItem(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'Conatct has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  useEffect(() => {\n    // ** Get Clients\n    getClients()\n    getServices()\n    getTaxGroups()\n    getStates()\n    getBankAccounts()\n    getOrganizationUsers()\n    getExemptionReason()\n    getParticipants()\n\n  }, [])\n\n  const getClientData = async (id) => {\n    const res = await dispatch(getClient(id))\n    setSelectedClient(res.payload)\n  }\n\n  const schema = yup.object().shape({\n    updatedBy: yup.string().default(userId),\n    id: yup.string().default(id),\n    contactId: yup.string().required(\"Please select a Client\"),\n    uniqueIdentity: yup.string(),\n    contactEmail: yup.string(),\n    contactName: yup.string(),\n    invoiceDate: yup.string(),\n    paymentDue: yup.string(),\n    placeOfSupplyId: yup.string().required(\"Please select a Place Of Supply\"),\n    subTotalAmount: yup.string(),\n    totalAmount: yup.string(),\n    totalTaxAmount: yup.string(),\n    organizationId: yup.string().default(activeOrgId),\n    isRcmApplicable: yup.boolean().default(false),\n    isgstregistered: yup.boolean().default(activeOrg?.isgstregistered),\n    dueAmount: yup.string(),\n    billingAddressLine1: yup.string(),\n    billingAddressLine2: yup.string(),\n    billingAddressState: yup.string(),\n    billingAddressCity: yup.string(),\n    billingAddressZipCode: yup.string(),\n    billingCurrencyId: yup.string().default(activeOrg.currencyid),\n    bankAccountBankName: yup.string(),\n    bankAccountBranchName: yup.string(),\n    bankAccountHolderName: yup.string(),\n    bankAccountId: yup.string().required('Please Select Account'),\n    bankAccountIfscCode: yup.string(),\n    bankAccountNumber: yup.string(),\n    organizationAddressLine1: yup.string().default(activeOrg.addressline1),\n    organizationAddressLine2: yup.string().default(activeOrg.addressline2),\n    organizationCity: yup.string().default(activeOrg.organizationcity),\n    organizationState: yup.string().default(activeOrg.statename),\n    organizationZipCode: yup.string().default(activeOrg.pinzipcode),\n    organizationName: yup.string().default(activeOrg.name),\n    organizationImageUrl: yup.string().default(activeOrg.organizationimageid || ''),\n    organizationStateCode: yup.string().default(activeOrg.stateshortname),\n    organizationGstin: yup.string().default(activeOrg.gstin),\n    gstin: yup.string(),\n    note: yup.string().default(''),\n    calculateTaxes: yup.string(),\n    status: yup.number().default(1),\n    paymentStatus: yup.number().default(11),\n    rows: yup.array().of(\n      yup.object().shape({\n        id: yup.string(),\n        serviceId: yup.string().required(\"Please Select Service Item\"),\n        invoiceId: yup.string(),\n        sacCode: yup.string(),\n        price: yup.string(),\n        organizationId: yup.string().default(activeOrgId),\n        exemptionReasonId: yup.string().nullable(),\n        isTaxApplicable: yup.boolean().default(true),\n        actualPrice: yup.string().required(),\n        taxGroupId: yup.string().required(\"Pleace Select Tax\"),\n        subTotalAmount: yup.string().required(1)\n      })\n    )\n  })\n\n  const { handleSubmit, formState: { errors }, control, setValue, reset } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, append, remove } = useFieldArray({ control, name: 'rows', keyName: 'rowid' })\n\n  const onSubmit = async data => {\n\n    data.invoiceDate = moment(data.invoiceDate).valueOf()\n    data.paymentDue = moment(data.paymentDue).valueOf()\n\n    setBlock(true)\n    const temp = data.rows\n    setInvoiceItems(temp)\n    delete data.rows\n    await dispatch(updateInvoice(data))\n\n  }\n\n  const InvoiceItems = async (id) => {\n    invoiceItems.forEach((obj, key) => {\n      invoiceItems[key].invoiceId = id\n      invoiceItems[key].updatedBy = userId\n    })\n    await dispatch(updateInvoiceItems(invoiceItems))\n    if (selEmployees.length > 0) {\n      const temp = []\n      selEmployees.forEach((id) => {\n        const ind = participants.findIndex(obj => obj.id === id)\n        if (ind !== -1 && participants.length > 0) {\n          temp.push(participants[ind].id)\n        }\n      })\n      const obj = { users: selEmployees, organizationId: activeOrgId, invoiceId: id, deletedUser: temp }\n      await dispatch(addInvoiceParticipant(obj))\n    }\n    await navigate(`/proposal/view/${store.invoiceId}`)\n  }\n\n  useEffect(async () => {\n    if (store.invoiceId !== null && invoiceItems.length > 0) {\n      await InvoiceItems(store.invoiceId)\n    }\n  }, [store.invoiceId, invoiceItems])\n\n  const addItem = (() => {\n    append({ invoiceId: 0, organizationId: activeOrgId, serviceId: '', exemptionReasonId: '', isTaxApplicable: true, sacCode: '', actualPrice: 0, taxGroupId: '', subTotalAmount: 0, taxPrice: 0, description: '' })\n  })\n\n  useEffect(() => {\n    addItem()\n  }, [])\n\n  const calculateInvoiceTax = () => {\n\n    const inputArray = control._formValues.rows.map(a => {\n      if (a.taxes) {\n        return parser(a.taxes)\n      } else {\n        return []\n      }\n    })\n    let temp = []\n    temp = inputArray.flat()\n    let output = []\n    output = temp.reduce((acc, item) => {\n      if (item !== undefined) {\n        const existItem = acc.find((obj) => {\n          return item.taxName === obj.taxName\n        })\n        if (existItem) {\n          existItem.taxAmount = parseFloat(existItem.taxAmount) + parseFloat(item.taxAmount)\n          existItem.taxAmount = String(existItem.taxAmount)\n        } else {\n          acc.push(Object.assign({}, item))\n        }\n      }\n      return acc\n    }, [])\n\n    setInvoiceTaxes(output)\n    setValue('calculateTaxes', JSON.stringify(output))\n  }\n\n  const ItemFinalTotalAmount = () => {\n\n    const items = control._formValues.rows\n    let finalTotal = 0\n    let finalsubTotalAmount = 0\n    let finalTaxAmount = 0\n    items.forEach(obj => {\n      finalTotal = parseFloat(obj.subTotalAmount) + parseFloat(finalTotal)\n      finalsubTotalAmount = parseFloat(obj.price) + parseFloat(finalsubTotalAmount)\n      finalTaxAmount = parseFloat(finalTaxAmount) + parseFloat(obj.taxPrice)\n    })\n\n    control._formValues.subTotalAmount = finalsubTotalAmount\n    control._formValues.totalAmount = finalTotal\n    control._formValues.dueAmount = finalTotal\n    control._formValues.totalTaxAmount = finalTaxAmount\n\n    setFinalTotal(finalTotal)\n    setFinalSubTotal(finalsubTotalAmount)\n    calculateInvoiceTax()\n  }\n\n  const removeItem = async (ind) => {\n    const tempid = control._formValues.rows[ind].id\n    let flg\n    if (tempid !== undefined) {\n      flg = await deletefun(tempid)\n    }\n    if (flg) {\n      remove(ind)\n    }\n    ItemFinalTotalAmount()\n  }\n\n  const loadItemData = (ind, desFlg = false, priceFlg = false, sacFlg = false, taxFlg = false, itemFlg = false) => {\n    const eachObj = control._formValues.rows[ind]\n    if (eachObj.serviceId === undefined || eachObj.serviceId === '') {\n      return false\n    }\n    if (serviceOptions.length === 0) {\n      return false\n    }\n    let service_price, tax_group_id\n    const selectedService = serviceOptions.find((a) => a.id === eachObj.serviceId)\n    setValue(`rows[${ind}].serviceId`, eachObj.serviceId)\n    if (itemFlg) {\n      setValue(`rows[${ind}].sacCode`, selectedService.saccode || '')\n      service_price = selectedService.sellingprice || 0\n      tax_group_id = selectedService.taxgroupid\n      setValue(`rows[${ind}].actualPrice`, service_price)\n      setValue(`rows[${ind}].price`, String(selectedService.sellingprice) || 0)\n      setValue(`rows[${ind}].taxGroupId`, tax_group_id)\n      setValue(`rows[${ind}].description`, selectedService.description)\n      setValue(`rows[${ind}].exemptionReasonId`, selectedService.exemptionreasonid || '')\n    } else {\n      setValue(`rows[${ind}].sacCode`, sacFlg ? eachObj.sacCode || '' : selectedService.saccode || '')\n      service_price = priceFlg ? eachObj.price : selectedService.sellingprice || 0\n      tax_group_id = taxFlg ? eachObj.taxGroupId : selectedService.taxgroupid\n      setValue(`rows[${ind}].price`, service_price)\n      setValue(`rows[${ind}].actualPrice`, String(selectedService.sellingprice) || 0)\n      setValue(`rows[${ind}].taxGroupId`, tax_group_id)\n      setValue(`rows[${ind}].description`, desFlg ? eachObj.description : selectedService.description)\n      setValue(`rows[${ind}].exemptionReasonId`, selectedService.exemptionreasonid || '')\n    }\n\n    let calculateTaxAmount = 0\n    const invoice_item_taxes = []\n\n    const taxGroups = taxGroupOptions.find((a) => a.id === tax_group_id)\n\n    const taxApplicable = taxGroups !== undefined ? !taxGroups.nontaxableflag : selectedService.istaxapplicable\n    setValue(`rows[${ind}].isTaxApplicable`, taxApplicable)\n\n    if (taxApplicable) {\n      if (taxGroups !== undefined) {\n        taxValues.forEach(obj => {\n          if (obj.taxid === tax_group_id) {\n            let temp = 0\n            temp = calculateTax(service_price, obj.percentage, 2)\n            calculateTaxAmount = parseFloat(calculateTaxAmount) + parseFloat(temp)\n            const dataTemp = {}\n            dataTemp[\"taxName\"] = `${obj.name} (${obj.percentage}%)`\n            dataTemp[\"taxId\"] = parseInt(obj.id)\n            dataTemp[\"taxNameValue\"] = obj.name\n            dataTemp[\"taxPercentage\"] = String(obj.percentage)\n            dataTemp[\"taxAmount\"] = String(temp)\n\n            invoice_item_taxes.push(dataTemp)\n          }\n        })\n      }\n    }\n\n    setValue(`rows[${ind}].subTotalAmount`, parseFloat(parseFloat(calculateTaxAmount || 0.00) + parseFloat(service_price || 0.00)).toFixed(2))\n    setValue(`rows[${ind}].taxPrice`, parseFloat(calculateTaxAmount).toFixed(2))\n    setValue(`rows[${ind}].taxes`, JSON.stringify(invoice_item_taxes))\n    setValue(`rows[${ind}].updatedBy`, userId)\n\n    ItemFinalTotalAmount()\n\n  }\n  const taxvaluefn = () => {\n    let taxtype = 1\n    if (activeOrg.stateid === control._formValues.placeOfSupplyId) {\n      taxtype = 2\n    }\n\n    getTaxValue(taxtype)\n  }\n\n  useEffect(() => {\n    if (taxValues.length > 0) {\n      if (typeof control._formValues.rows === 'object') {\n        control._formValues.rows.forEach((obj, ind) => {\n          loadItemData(ind, true, true, true, true, false)\n        })\n      }\n    }\n  }, [taxValues])\n\n  const bankAccountfn = (id) => {\n    const acc = accountOptions.find((obj) => obj.id === id)\n    if (acc !== undefined) {\n      setAccDetails(acc)\n      setValue('bankAccountBankName', acc.bankName)\n      setValue('bankAccountBranchName', acc.branchAddress)\n      setValue('bankAccountHolderName', acc.accountHolderName)\n      setValue('bankAccountIfscCode', acc.ifscCode)\n      setValue('bankAccountNumber', acc.accountNumber)\n    }\n  }\n\n  useEffect(() => {\n    if (accountOptions.length > 0) {\n      bankAccountfn(control._formValues.bankAccountId)\n    }\n  }, [accountOptions])\n\n  useEffect(() => {\n    if (Object.keys(selectedClient).length > 0) {\n      setValue('billingAddressCity', selectedClient.billingaddresscity)\n      setValue('billingAddressLine1', selectedClient.billingaddressline1)\n      setValue('billingAddressLine2', selectedClient.billingaddressline1)\n      setValue('billingAddressState', selectedClient.billingaddressstatesname)\n      setValue('billingAddressZipCode', selectedClient.billingaddresszip)\n      setValue('billingCurrencyId', selectedClient.currencyid || activeOrg.currencyid)\n      setValue('billingCurrencySymbol', selectedClient.currenciessymbol)\n      setValue('billingCurrencyShortName', selectedClient.currenciescode)\n      setValue('billingCurrencyName', selectedClient.currenciesname)\n      setValue('contactEmail', selectedClient.email)\n      setValue('gstin', selectedClient.gstin)\n      setValue('contactName', selectedClient.name)\n      setValue('placeOfSupplyId', selectedClient.placeofsupplyid)\n      taxvaluefn()\n    }\n\n  }, [selectedClient])\n\n  const renderError = () => {\n    const keys = Object.keys(errors)\n    const ErrorText = []\n    if (Array.isArray(keys)) {\n      keys.forEach((key) => {\n        if (key !== 'rows') {\n          ErrorText.push(<FormFeedback key={key}>${errors[key]?.message}</FormFeedback>)\n        }\n      })\n    }\n    return ErrorText\n  }\n\n  const getInvoiceItemList = async (id) => {\n    if (id !== undefined) {\n      const res = await dispatch(getInvoiceItems(id))\n      setValue('rows', res.payload)\n\n      ItemFinalTotalAmount()\n    }\n  }\n\n  useEffect(async () => {\n    if (Object.keys(data).length > 0) {\n      const invoice = data\n      reset({\n        contactId: invoice.contactid,\n        uniqueIdentity: invoice.uniqueno,\n        contactEmail: invoice.contactemail,\n        contactName: invoice.contactname,\n        invoiceDate: moment(invoice.invoicedate, 'x').format(\"MMM DD, YYYY\"),\n        paymentDue: moment(invoice.paymentdue, 'x').format(\"MMM DD, YYYY\"),\n        placeOfSupplyId: invoice.placeofsupplyid,\n        subTotalAmount: invoice.subtotalamount,\n        totalAmount: invoice.totalamount,\n        totalTaxAmount: invoice.totaltaxamount,\n        isRcmApplicable: invoice.isrcmapplicable,\n        dueAmount: invoice.dueamount,\n        billingAddressLine1: invoice.billingaddressline1,\n        billingAddressLine2: invoice.billingaddressline2,\n        billingAddressState: invoice.billingaddressstate,\n        billingAddressCity: invoice.billingaddresscity,\n        billingAddressZipCode: invoice.billingaddresszipcode,\n        billingCurrencyId: invoice.billingcurrencyid,\n        bankAccountBankName: invoice.bankaccountbankname,\n        bankAccountBranchName: invoice.bankaccountbranchname,\n        bankAccountHolderName: invoice.bankaccountholdername,\n        bankAccountId: invoice.bankaccountid,\n        bankAccountIfscCode: invoice.bankaccountifsccode,\n        bankAccountNumber: invoice.bankaccountnumber,\n        organizationAddressLine1: invoice.organizationaddressline1 === '' ? activeOrg.addressline1 : invoice.organizationaddressline1,\n        organizationAddressLine2: invoice.organizationaddressline2 === '' ? activeOrg.addressline2 : invoice.organizationaddressline2,\n        organizationCity: invoice.organizationcity === '' ? activeOrg.organizationcity : invoice.organizationcity,\n        organizationState: invoice.organizationstate === '' ? activeOrg.statename : invoice.organizationstate,\n        organizationZipCode: invoice.organizationzipcode === '' ? activeOrg.pinzipcode : invoice.organizationzipcode,\n        organizationName: invoice.organizationname === '' ? activeOrg.name : invoice.organizationname,\n        organizationImageUrl: invoice.organizationimageurl === null ? activeOrg.organizationimageid : invoice.organizationimageurl,\n        organizationStateCode: invoice.organizationstatecode || '',\n        organizationGstin: invoice.organizationgstin === '' ? activeOrg.gstin : invoice.gstin,\n        gstin: invoice.gstin,\n        note: invoice.note,\n        status: invoice.status,\n        paymentStatus: invoice.paymentstatus\n\n      })\n      await getClientData(invoice.contactid)\n      await getInvoiceItemList(invoice.id)\n    }\n  }, [data])\n\n  const handleUserChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    setSelEmployees(tempArr)\n\n  }\n\n\n  return (\n\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Row className='invoice-add'>\n          <Fragment>\n            <Col xl={10} md={8} sm={12}>\n\n              <Card className='invoice-preview-card'>\n\n                {/* Header */}\n                <CardBody className='invoice-padding pb-0'>\n                  {\n                    renderError()\n                  }\n                  <div className='d-flex justify-content-between flex-md-row flex-column invoice-spacing mt-0'>\n                    <div>\n                      <div className='logo-wrapper'>\n                        <img className='rounded me-50' height={75} width={75} referrerPolicy=\"no-referrer\" src={`https://drive.google.com/thumbnail?id=${data.imageid}&authuser=0`} alt=\"Organisation Logo\" />\n                        <h3 className='text-primary invoice-logo'>{activeOrg.name}</h3>\n                      </div>\n                      <p className='card-text mb-25'>{activeOrg.addressline1}</p>\n                      <p className='card-text mb-25'>{activeOrg.addressline2}</p>\n                      <p className='card-text mb-0'>{activeOrg.organizationcity} - {activeOrg.pinzipcode}</p>\n                      <p className='card-text mb-0'>{activeOrg.statename}</p>\n                      <p className='card-text mb-0'>{activeOrg.gstin}</p>\n                    </div>\n                    <div className='invoice-number-date mt-md-0 mt-2'>\n                      <div className='d-flex align-items-center justify-content-md-end mb-1'>\n                        <h4 className='invoice-title'>Profoma Invoice</h4>\n                        <InputGroup className='input-group-merge invoice-edit-input-group disabled'>\n                          <InputGroupText>\n                            <Hash size={15} />\n                          </InputGroupText>\n                          <Input\n                            type='number'\n                            className='invoice-edit-input'\n                            value={3171}\n                            placeholder='53634'\n                            disabled\n                          />\n                        </InputGroup>\n                      </div>\n                      <div className='d-flex align-items-center mb-1'>\n                        <span className='title required'>Proposal Date</span>\n                        <Controller\n                          control={control}\n                          name={`invoiceDate`}\n                          id='invoiceDate'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true, altFormat: \"M j, Y\", dateFormat: \"M j, Y\" }}\n                              className='form-control invoice-edit-input date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                      <div className='d-flex align-items-center'>\n                        <span className='title required'>Due Date</span>\n                        <Controller\n                          control={control}\n                          name={`paymentDue`}\n                          id='paymentDue'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true, altFormat: \"M j, Y\", dateFormat: \"M j, Y\" }}\n                              className='form-control invoice-edit-input due-date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </CardBody>\n                {/* /Header */}\n\n                <hr className='invoice-spacing' />\n\n                {/* Address and Contact */}\n                <CardBody className='invoice-padding pt-0'>\n                  <Row className='row-bill-to invoice-spacing'>\n                    <Col className='col-bill-to ps-0' xl='6'>\n                      <h6 className='invoice-to-title required'>Proposal To</h6>\n                      <div className='invoice-customer'>\n                        <Controller\n                          control={control}\n                          name={`contactId`}\n                          id={`contactId`}\n                          render={({ field, ref }) => (\n                            <Select\n                              inputRef={ref}\n                              className={classnames('react-select', { 'is-invalid': errors['contactId'] })}\n                              {...field}\n                              classNamePrefix='select'\n                              options={clientOptions}\n                              value={clientOptions.find(c => { return c.id === field.value })}\n                              onChange={val => { field.onChange(val.id); getClientData(val.id) }}\n                              getOptionLabel={(option) => option.name}\n                              getOptionValue={(option) => option.id}\n                            />\n                          )}\n                        />\n                      </div>\n                      <Col className='pe-0 mt-xl-2' xl='4'>\n                        <table>\n                          <tbody>\n                            <tr>\n                              <td>{selectedClient.billingaddressline1}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddressline2}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddresscity} {selectedClient.billingaddresszip && `-`}  {selectedClient.billingaddresszip}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddressstatesname}</td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </Col>\n                    </Col>\n                    <Col className='col-bill-to ps-0' xl='2'></Col>\n                    <Col className='pe-0 mt-xl-0 mt-2' xl='4'>\n                      <h6 className='mb-2'>Payment Details:</h6>\n                      <table>\n                        <tbody>\n                          <tr>\n                            <td className='pe-1'>Bank Name:</td>\n                            <td>\n                              {accDetails.bankName && <span className='fw-bolder'>{accDetails.bankName}</span>}\n                            </td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Account name:</td>\n                            <td>{accDetails.accountHolderName && <span className='fw-bolder'>{accDetails.accountHolderName}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Branch Name:</td>\n                            <td> {accDetails.branchAddress && <span className='fw-bolder'>{accDetails.branchAddress}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>IFSC Code:</td>\n                            <td>{accDetails.ifscCode && <span className='fw-bolder'>{accDetails.ifscCode} </span>}</td>\n                          </tr>\n                          {selectedClient.currenciescode &&\n                            <tr>\n                              <td className='pe-1'>Currency code:</td>\n                              <td>{selectedClient.currenciescode}</td>\n                            </tr>\n                          }\n                        </tbody>\n                      </table>\n                    </Col>\n                  </Row>\n                  {activeOrg?.isgstregistered &&\n                    <Row className='row-bill-to invoice-spacing'>\n                      <Col className='col-bill-to ps-0' xl='6'>\n                        <h6 className='invoice-to-title mt-2 required'>Place Of Supply</h6>\n                        <div className='invoice-customer'>\n                          <Controller\n                            control={control}\n                            name={`placeOfSupplyId`}\n                            id={`placeOfSupplyId`}\n                            render={({ field, ref }) => (\n                              <Select\n                                inputRef={ref}\n                                className={classnames('react-select', { 'is-invalid': errors['placeOfSupplyId'] })}\n                                {...field}\n                                classNamePrefix='select'\n                                options={stateOptions}\n                                value={stateOptions.find(c => { return c.id === field.value })}\n                                onChange={val => { field.onChange(val.id); taxvaluefn() }}\n                                getOptionLabel={(option) => option.name}\n                                getOptionValue={(option) => option.id}\n                              />\n                            )}\n                          />\n                        </div>\n                        {(selectedClient.gstin !== '' && selectedClient.gstin !== undefined) && <div className='mt-1'> GSTIN : {selectedClient.gstin}</div>}\n                      </Col>\n                      <Col className='col-bill-to ps-0' xl='2'></Col>\n                    </Row>\n                  }\n                </CardBody>\n                {/* /Address and Contact */}\n\n                {/* Product Details */}\n                <CardBody className='invoice-padding invoice-product-details'>\n                  {fields.map((item, index) => {\n                    return (\n                      <div key={item.rowid} className='repeater-wrapper'>\n                        <Row>\n                          <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                            <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                              <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-4 col-sm-12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Item</CardText>\n                                <Controller\n                                  control={control}\n                                  defaultValue={`${item.serviceId}`}\n                                  name={`rows[${index}].serviceId`}\n                                  rules={{ required: true }}\n                                  render={({ field, ref }) => (\n                                    <Select\n                                      {...field}\n                                      inputRef={ref}\n                                      className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.serviceId })}\n                                      classNamePrefix='select'\n                                      options={serviceOptions}\n                                      value={serviceOptions.find(c => c.id === field.value)}\n                                      onChange={val => { field.onChange(val.id); loadItemData(index, false, false, false, false, true) }}\n                                      getOptionLabel={(option) => option.name}\n                                      getOptionValue={(option) => option.id}\n                                    />\n                                  )}\n                                />\n                                {errors.rows?.[index]?.serviceId && <FormFeedback>{errors.rows?.[index]?.serviceId.message}</FormFeedback>}\n                                <Controller\n                                  id={`rows_${index}_description`}\n                                  defaultValue={`${item.description}`}\n                                  name={`rows[${index}].description`}\n                                  control={control}\n                                  render={({ field }) => <Input className='mt-1' invalid={errors.rows?.[index]?.description && true} onInput={(val) => { field.onChange(val); loadItemData(index, true, false, false, false, false) }} {...field} />}\n                                />\n                              </Col>\n                              {activeOrg?.isgstregistered &&\n                                <Col className='my-lg-0 my-2 col-lg-2 col-sm-12'>\n                                  <CardText className='col-title mb-md-2 mb-0'>SAC Code</CardText>\n                                  <Controller\n                                    id={`rows_${index}_sacCode`}\n                                    defaultValue={`${item.sacCode}`}\n                                    name={`rows[${index}].sacCode`}\n                                    control={control}\n                                    render={({ field }) => <Input type='text' invalid={errors.rows?.[index]?.sacCode && true} onInput={(val) => { field.onChange(val); loadItemData(index, false, true, true, false, false) }} {...field} />}\n                                  />\n                                  {errors.rows?.[index]?.sacCode && <FormFeedback>{errors.rows?.[index]?.sacCode.message}</FormFeedback>}\n                                </Col>\n                              }\n                              <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                                <CardText className='col-title mb-md-2 mb-0'>Price</CardText>\n                                <Controller\n                                  defaultValue={item.price}\n                                  id={`rows_${index}_price`}\n                                  name={`rows[${index}].price`}\n                                  control={control}\n                                  render={({ field }) => <Input type='number' id={`input_rows_${index}_price`} onInput={(val) => { field.onChange(val); loadItemData(index, false, true, false, false, false) }} {...field} invalid={errors.rows?.[index]?.price && true} />}\n                                />\n                                {errors.rows?.[index]?.price && <FormFeedback>{errors.rows?.[index]?.price.message}</FormFeedback>}\n                              </Col>\n                              {activeOrg?.isgstregistered &&\n                                <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                                  <CardText className='col-title mb-md-50 mb-0'>Tax Rate</CardText>\n                                  <Controller\n                                    control={control}\n                                    defaultValue={item.taxGroupId}\n                                    name={`rows[${index}].taxGroupId`}\n                                    rules={{ required: true }}\n                                    render={({ field, ref }) => (\n                                      <Select\n                                        {...field}\n                                        inputRef={ref}\n                                        className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.taxGroupId })}\n                                        classNamePrefix='select'\n                                        options={taxGroupOptions}\n                                        value={taxGroupOptions.find(c => c.id === field.value)}\n                                        onChange={(val) => { field.onChange(val.id); loadItemData(index, false, true, false, true, false) }}\n                                        getOptionLabel={(option) => option.name}\n                                        getOptionValue={(option) => option.id}\n                                      />\n                                    )}\n                                  />\n                                  {errors.rows?.[index]?.taxGroupId && <FormFeedback>{errors.rows?.[index]?.taxGroupId.message}</FormFeedback>}\n                                  {\n                                    !item.isTaxApplicable && <Controller\n                                      control={control}\n                                      name={`rows[${index}].exemptionReasonId`}\n                                      rules={{ required: true }}\n                                      render={({ field, ref }) => (\n                                        <Select\n                                          {...field}\n                                          inputRef={ref}\n                                          className={classnames('react-select mt-1', { 'is-invalid': errors.rows?.[index]?.taxGroupId })}\n                                          classNamePrefix='select'\n                                          options={exemptionReasonOptions}\n                                          value={exemptionReasonOptions.find(c => c.id === field.value)}\n                                          onChange={(val) => { field.onChange(val.id) }}\n                                          getOptionLabel={(option) => option.name}\n                                          getOptionValue={(option) => option.id}\n                                        />\n                                      )}\n                                    />\n                                  }\n                                </Col>\n                              }\n                              <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Amount</CardText>\n                                {control._formValues.rows[index].subTotalAmount}\n                              </Col>\n                            </Row>\n                            <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                              <X size={18} className='cursor-pointer' onClick={() => { removeItem(index) }} />\n                            </div>\n                          </Col>\n                        </Row>\n                      </div>\n                    )\n                  })}\n                  <Row className='mt-1'>\n                    <Col sm='12' className='px-0'>\n                      <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                        <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                      </Button>\n                    </Col>\n                  </Row>\n                </CardBody>\n\n                {/* /Product Details */}\n\n                {/* Invoice Total */}\n                <CardBody className='invoice-padding'>\n                  <Row className='invoice-sales-total-wrapper'>\n                    <Col className='mt-md-0 mt-3' md={{ size: '6', order: 1 }} xs={{ size: 12, order: 2 }}>\n\n                    </Col>\n                    <Col className='d-flex justify-content-end' md={{ size: '6', order: 2 }} xs={{ size: 12, order: 1 }}>\n                      <div className='invoice-total-wrapper'>\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>\n                            {activeOrg?.isgstregistered && 'Pre Tax'}  Amount:</p>\n                          <p className='invoice-total-amount'>{finalSubTotal}</p>\n                        </div>\n                        {activeOrg?.isgstregistered && <div>\n                          {\n                            invoiceTaxes.map((obj, ind) => {\n                              return (<div key={ind} className='invoice-total-item'>\n                                <p className='invoice-total-title'>{obj?.taxName}</p>\n                                <p className='invoice-total-amount'>{obj?.taxAmount}</p>\n                              </div>)\n                            })\n                          }\n                        </div>\n                        }\n                        <hr className='my-50' />\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>Total Payable:</p>\n                          <p className='invoice-total-amount'>{finalTotal}</p>\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Total */}\n\n                <hr className='invoice-spacing mt-0' />\n\n                {/* Invoice Note */}\n                <CardBody className='invoice-padding py-0'>\n                  <Row>\n                    <Col>\n                      <div className='mb-2'>\n                        <Label for='note' className='form-label fw-bold'>\n                          Note:\n                        </Label>\n                        <Controller\n                          id='note'\n                          name='note'\n                          control={control}\n                          render={({ field }) => <Input type=\"textarea\" value={field.value} invalid={errors.note && true} {...field} />}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Note */}\n              </Card>\n\n            </Col>\n            <Col xl={2} md={4} sm={12}>\n              <Card className='invoice-action-wrapper'>\n                <CardBody>\n                  {/* <Button color='primary' block className='mb-75' disabled>\n            Send Invoice\n          </Button>\n          <Button tag={Link} to='/invoice/preview' color='primary' block outline className='mb-75'>\n            Preview\n          </Button> */}\n                  <Button color='primary' type='submit' block outline className='mb-75'>\n                    Save\n                  </Button>\n                  <Button color='warning' block outline tag={Link} to={`/proposal/view/${id}`}>\n                    Cancel\n                  </Button>\n                </CardBody>\n              </Card>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50 required'>Accept payments via</p>\n                  <Controller\n                    control={control}\n                    name={`bankAccountId`}\n                    rules={{ required: true }}\n                    render={({ field, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select mt-1', { 'is-invalid': errors.bankAccountId })}\n                        classNamePrefix='select'\n                        options={accountOptions}\n                        value={accountOptions.find(c => c.id === field.value)}\n                        onChange={(val) => { field.onChange(val.id); bankAccountfn(val.id) }}\n                        getOptionLabel={(option) => option.accountHolderName}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n                  />\n                </div>\n              </div>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50'>Select Employee</p>\n                  <Controller\n                    control={control}\n                    name=\"reviewer\"\n                    id=\"reviewer\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.reviewer })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={userOptions}\n                        isMulti={true}\n                        defaultValue={participants}\n                        value={value} // set selected values\n                        onChange={handleUserChange}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                        styles={colourStyles}\n                      />\n                    )}\n\n                  />\n                </div>\n              </div>\n            </Col>\n          </Fragment >\n        </Row>\n      </form >\n    </UILoader>\n  )\n}\n\nexport default AddCard\n","// ** React Imports\nimport { useEffect, useState } from 'react'\nimport { useParams, Link } from 'react-router-dom'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\n\n// ** Reactstrap Imports\nimport { Alert, Row, Col } from 'reactstrap'\n\n// ** Invoice Edit Components\nimport EditCard from './EditCard'\n\nconst InvoiceEdit = () => {\n  // ** Hooks\n  const { id } = useParams()\n\n  // ** States\n  const [data, setData] = useState(null)\n\n  // ** Get invoice on mount based on id\n  const getInvoice = async () => {\n    axios.post('/taskinvoices/get', { id }).then((res) => {\n      setData(res.data.taskinvoices)\n    }).catch((err) => { console.log(err) })\n\n  }\n\n  useEffect(() => {\n    getInvoice()\n  }, [])\n\n  return data !== null && data !== undefined ? (\n    <div className='invoice-edit-wrapper'>\n      <Row className='invoice-edit'>\n        <Col xl={12} md={8} sm={12}>\n          <EditCard data={data} />\n        </Col>\n      </Row>\n    </div>\n  ) : (\n    <Alert color='danger'>\n      <h4 className='alert-heading'>Proposal not found</h4>\n      <div className='alert-body'>\n      Proposal with id: {id} doesn't exist. Check list of all Proposals:{' '}\n        <Link to='/proposal/list'>Proposal List</Link>\n      </div>\n    </Alert>\n  )\n}\n\nexport default InvoiceEdit\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","export const calculateTax = (amount, taxRateInPercentage, TaxType) => {\n    let calculatedTax = 0\n    if (TaxType === 1) { //Inclusive\n        calculatedTax = parseFloat(amount) - (parseFloat(amount) * (100 / (100 + parseFloat(taxRateInPercentage))))\n        // calculatedTax = parseFloat(amount) - parseFloat(calculatedTax);\n\n    } else if (TaxType === 2) { //Exclusive\n        calculatedTax = (parseFloat(amount) * parseFloat(taxRateInPercentage)) / 100\n    }\n    return parseFloat(calculatedTax)\n}\n\nexport const parser = (str) => {\n\n    return JSON.parse(Array.isArray(str) ? JSON.stringify(str).replace(/\\\\/g, '') : str.replace(/\\\\/g, ''))\n\n}"],"sourceRoot":""}