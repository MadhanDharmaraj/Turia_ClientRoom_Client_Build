{"version":3,"sources":["views/apps/timesheet/AddTimeSheet.js","views/apps/timesheet/list/Table.js","views/apps/timesheet/list/index.js","@core/components/widgets/stats/StatsHorizontal.js"],"names":["userId","orgUserId","TimeSheet","addTimeSheetModal","refreshList","selectedTimesheet","useState","formModal","setFormModal","startTime","setStartTime","endTime","setEndTime","moment","startOf","valueOf","timeSheetDate","setTimeSheetDate","hourlyRate","setHourlyRate","selectedTimeSheet","setSelectedTimesheet","name","setName","clientOptions","setClientOptions","taskOptions","setTaskOptions","clientId","setClientId","taskId","setTaskId","option","setOption","timesheetDate","setTimesheetDate","cancellModal","closeModal","useEffect","val","taskname","clientid","taskid","createdon","unix","starttime","format","endtime","axios","post","id","then","res","data","organizationusers","hourlyrate","catch","err","console","log","status","response","arr","clients","className","isOpen","toggle","defaultChecked","type","onChange","size","for","value","e","target","classnames","classNamePrefix","options","find","c","tasks","getOptionLabel","getOptionValue","String","date","dateStr","altInput","altFormat","dateFormat","color","onClick","set","split","userid","start","end","hours","duration","diff","asHours","amount","createdBy","totalhours","onSubmit","MySwal","withReactContent","Swal","activeOrg","activeOrganization","UsersList","dispatch","useDispatch","store","useSelector","state","timesheet","listTimeSheet","setListTimesheet","setAddTimeSheetModal","filterDate","setFilterDate","groupByOption","setGroupByOption","taskfilter","setTaskFilter","serviceOptions","setServiceOptions","currentClient","setCurrentClient","currentService","setCurrentService","services","unshift","timesheetList","enddate","endOf","parseInt","rolelevel","client","service","length","dateFormattime","hoursFormat","row","decimalTimeString","decimalTime","parseFloat","Math","floor","minutes","isNaN","hoursFormatTemp","flg","deleteTimeSheet","updatedBy","taskListTimeSheet","export","listTimeSheetByTask","outline","caret","label","isClearable","theme","selectThemeColors","placeholder","handleDateChange","exportList","AddTimeSheet","vl","responsive","map","obj","k","timesheets","item","temp","tempObj","openflg","openList","colSpan","reduce","memo","t","hour","min","join","i","clientname","substr","editModal","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","result","TeamList","Table","StatsHorizontal","stats","renderStats","statTitle","statsMargin"],"mappings":"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","file":"static/js/81.70ccb33d.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect, Fragment } from 'react'\n\nimport { Button, Card, Col, Input, Label, Modal, ModalBody, ModalFooter, ModalHeader, Row, Table, UncontrolledDropdown } from 'reactstrap'\nimport classnames from 'classnames'\n// ** Store & Actions\n//import { useDispatch, useSelector } from 'react-redux'\nimport Flatpickr from 'react-flatpickr'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\n// ** Styles\nimport '@styles/react/apps/app-invoice.scss'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\nimport moment from 'moment'\nimport axios from '@src/configs/axios/axiosConfig'\nimport { orgUserId } from '@src/helper/sassHelper'\nconst userId = orgUserId()\nimport Select from 'react-select'\nimport '@styles/react/libs/react-select/_react-select.scss'\n\nconst TimeSheet = ({ addTimeSheetModal, refreshList, selectedTimesheet }) => {\n\n    // ** States\n    const [formModal, setFormModal] = useState(false)\n    const [startTime, setStartTime] = useState()\n    const [endTime, setEndTime] = useState()\n    const [timeSheetDate, setTimeSheetDate] = useState(moment().startOf('day').valueOf())\n    const [hourlyRate, setHourlyRate] = useState(0)\n    const [selectedTimeSheet, setSelectedTimesheet] = useState(null)\n    const [name, setName] = useState('')\n    const [clientOptions, setClientOptions] = useState([])\n    const [taskOptions, setTaskOptions] = useState([])\n    const [clientId, setClientId] = useState(null)\n    const [taskId, setTaskId] = useState(null)\n    const [option, setOption] = useState(1)\n    const [timesheetDate, setTimesheetDate] = useState('')\n\n    const getEmployeeDet = () => {\n        axios.post('/organizationusers/getjobinfo', { id: userId })\n            .then((res) => {\n                setHourlyRate(res.data.organizationusers.hourlyrate || 0)\n            }).catch((err) => {\n                console.log(err)\n            })\n    }\n\n    const cancellModal = () => {\n        setFormModal(false)\n        setName('')\n        setClientId('')\n        setTaskId('')\n        setOption(1)\n        setStartTime('')\n        setEndTime('')\n        refreshList(false)\n    }\n\n    const closeModal = () => {\n        setFormModal(false)\n        refreshList(false)\n        cancellModal()\n    }\n\n    useEffect(() => {\n        setFormModal(addTimeSheetModal)\n    }, [addTimeSheetModal])\n\n    useEffect(() => {\n        if (selectedTimesheet) {\n            setFormModal(true)\n            const val = selectedTimesheet\n            setFormModal(true)\n            setSelectedTimesheet(val)\n            setName(val.taskname)\n            setClientId(val.clientid)\n            setTaskId(val.taskid)\n            setOption((val.taskid && val.taskid !== \"00000000-0000-0000-0000-000000000000\") ? 1 : 2)\n            setTimesheetDate(moment(val.createdon, 'x').unix())\n            setStartTime(moment(val.starttime, 'x').format('HH:mm'))\n            setEndTime(moment(val.endtime, 'x').format('HH:mm'))\n        }\n    }, [selectedTimesheet])\n\n    const onSubmit = () => {\n        const starttime = moment(timeSheetDate, 'x').set('hour', startTime?.split(':')[0]).set('minutes', startTime?.split(':')[1]).valueOf()\n        const endtime = moment(timeSheetDate, 'x').set('hour', endTime?.split(':')[0]).set('minutes', endTime?.split(':')[1]).valueOf()\n        const userid = userId\n        const start = moment(timeSheetDate, 'x').set('hour', startTime?.split(':')[0]).set('minutes', startTime?.split(':')[1])\n        const end = moment(timeSheetDate, 'x').set('hour', endTime?.split(':')[0]).set('minutes', endTime?.split(':')[1])\n        const duration = moment.duration(end.diff(start))\n        const hours = duration.asHours()\n        const amount = hourlyRate * hours\n\n        axios.post('/tasktimesheets/manualentry', { timeSheetDate, taskId, type: true, name, id: selectedTimeSheet?.id, createdBy: userId, starttime, endtime, userid, amount, hourlyRate, totalhours: hours })\n            .then(() => {\n                cancellModal()\n                refreshList(true)\n            })\n            .catch(() => {\n\n            })\n    }\n\n    const getClients = () => {\n        axios.post('/clients/dropdown', { status: 1 }).then(response => {\n            const arr = response.data\n            setClientOptions(arr.clients)\n        })\n    }\n\n    const getTasks = (id) => {\n        axios.post('/tasks/dropdown', { clientId: id }).then(response => {\n            const arr = response.data\n            setTaskOptions(arr.tasks)\n        })\n    }\n\n    useEffect(() => {\n\n    }, [clientId])\n\n    useEffect(() => {\n        getEmployeeDet()\n        getClients()\n    }, [])\n\n\n    return (\n        <div className='invoice-list-wrapper'>\n            <Card>\n\n\n                <div className='invoice-list-dataTable react-dataTable'>\n\n                    <Modal isOpen={formModal} toggle={() => closeModal()} className='modal-dialog-centered'>\n                        <ModalHeader toggle={() => closeModal()}>Timesheet Log</ModalHeader>\n\n                        <ModalBody>\n                            <Row>\n                                <Col className='d-flex align-items-center'>\n                                    <Input defaultChecked={option === 1} type='radio' name='timesheetType' id='task_time' onChange={() => { setTaskId(null); setClientId(null); setOption(1) }} />\n                                    <Label size='lg' className='form-labels mt-50 ms-50' for='task_time'>Task Linked Time</Label>\n                                </Col>\n                                <Col className='d-flex  align-items-center'>\n                                    <Input defaultChecked={option === 2} type='radio' name='timesheetType' id='non_task_time' onChange={() => { setTaskId(null); setClientId(null); setOption(2) }} />\n                                    <Label size='lg' className='form-label mt-50 ms-50' for='non_task_time'>Non Task Linked Time</Label>\n                                </Col>\n                            </Row>\n                            {option === 2 &&\n                                <Row>\n                                    <Label size='lg' className='form-label required'>No Task Timesheet Log</Label>\n                                    <Col><Input type='text' value={name} onChange={(e) => { setName(e.target.value) }} /></Col>\n                                </Row>\n                            }\n                            {option === 1 &&\n                                <Fragment>\n                                    <Row>\n                                        <Label size='lg' className='form-label required'>Client</Label>\n                                        <Col>\n                                            <Select\n                                                className={classnames('react-select')}\n                                                classNamePrefix='select'\n                                                options={clientOptions}\n                                                value={clientOptions.find(c => { return c.id === clientId })}\n                                                onChange={val => { setClientId(val.id); getTasks(val.id) }}\n                                                getOptionLabel={(option) => option.name}\n                                                getOptionValue={(option) => option.id}\n                                            />\n                                        </Col>\n                                    </Row>\n                                    <Row>\n                                        <Label size='lg' className='form-label required'>Task</Label>\n                                        <Col>\n                                            <Select\n                                                className={classnames('react-select')}\n                                                classNamePrefix='select'\n                                                options={taskOptions}\n                                                value={taskOptions.find(c => { return c.id === taskId })}\n                                                onChange={val => { setTaskId(val.id) }}\n                                                getOptionLabel={(option) => option.name}\n                                                getOptionValue={(option) => option.id}\n                                            />\n                                        </Col>\n                                    </Row>\n                                </Fragment>\n                            }\n                            <Row>\n                                <Label size='lg' className='form-label required'>Date</Label>\n                                <Col>\n                                    <Flatpickr\n                                        value={String(timesheetDate)}\n                                        onChange={(date, dateStr) => { setTimeSheetDate(moment.unix(dateStr).startOf('day').valueOf()) }}\n                                        options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                                        className={classnames('due-date-picker')} />\n                                </Col>\n                            </Row>\n                            <Row>\n                                <Label size='lg' className='form-label required'>Star Time</Label>\n                                <Col><Input type='time' value={startTime} onChange={(e) => { setStartTime(e.target.value) }} /></Col>\n                            </Row>\n                            <Row>\n                                <Label size='lg' className='form-label required'>End Time</Label>\n                                <Col>\n                                    <Input type='time' value={endTime} onChange={(e) => { setEndTime(e.target.value) }} />\n                                </Col>\n                            </Row>\n                        </ModalBody>\n                        <ModalFooter>\n                            <Button color='warning' onClick={() => closeModal()}>\n                                Cancel\n                            </Button>\n                            <Button color='primary' onClick={() => { onSubmit() }}>Submit</Button>\n                        </ModalFooter>\n                    </Modal >\n                </div>\n            </Card >\n        </div >\n    )\n}\n\nexport default TimeSheet\n","// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\n\n// ** Store & Actions\nimport { timesheetList, exportList } from '../store'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ChevronDown, ChevronUp, Download, Edit, MoreVertical, Plus, Trash } from 'react-feather'\n// ** Utils\nimport axios from '@src/configs/axios/axiosConfig'\nimport classnames from 'classnames'\nimport { selectThemeColors } from '@utils'\nimport Select from 'react-select'\nimport AddTimeSheet from '../AddTimeSheet'\n// ** Reactstrap Imports\nimport {\n  Row,\n  Col,\n  Card,\n  Input,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle,\n  UncontrolledDropdown,\n  Table,\n  CardBody,\n  CardHeader,\n  Button,\n  UncontrolledButtonDropdown\n} from 'reactstrap'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nconst MySwal = withReactContent(Swal)\n// ** Styles\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\nimport moment from 'moment'\nimport Flatpickr from 'react-flatpickr'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport { orgUserId, activeOrganization } from '@src/helper/sassHelper'\nconst userId = orgUserId()\nconst activeOrg = activeOrganization()\n// ** Table Header\n\nconst UsersList = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.timesheet)\n  const [listTimeSheet, setListTimesheet] = useState([])\n  const [addTimeSheetModal, setAddTimeSheetModal] = useState(false)\n  const [selectedTimesheet, setSelectedTimesheet] = useState(null)\n  const [filterDate, setFilterDate] = useState(moment().startOf('day').unix())\n  const [groupByOption, setGroupByOption] = useState(1)\n  const [taskfilter, setTaskFilter] = useState(1)\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  const [currentClient, setCurrentClient] = useState({ id: '', name: 'Select Client' })\n  const [currentService, setCurrentService] = useState({ id: '', name: 'Select Service' })\n  const taskFilterOption = ['', 'Current Task', 'Completed Task']\n\n  const getClients = () => {\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data.clients\n      arr.unshift({ id: '', name: 'Select All' })\n      setClientOptions(arr)\n    })\n  }\n\n  const getServices = () => {\n    axios.post('/services/dropdown', { status: 1 }).then(response => {\n      const arr = response.data.services\n      arr.unshift({ id: '', name: 'Select All' })\n      setServiceOptions(arr)\n    })\n  }\n\n  useEffect(() => {\n    getServices()\n    getClients()\n  }, [])\n\n  // ** Get data on mount\n  useEffect(() => {\n    dispatch(\n      timesheetList({\n        date: moment.unix(filterDate).startOf('day').valueOf(),\n        enddate: moment.unix(filterDate).endOf('day').valueOf(),\n        option: groupByOption,\n        userId: parseInt(activeOrg.rolelevel) === 1 ? '' : userId,\n        client: currentClient.id,\n        service: currentService.id,\n        taskfilter\n      })\n    )\n  }, [dispatch, store.timesheetList.length])\n\n\n  // ** Table (data to render\n  useEffect(() => {\n    setListTimesheet(store.timesheetList)\n  }, [store.timesheetList])\n\n\n  const dateFormattime = (value) => {\n\n    return moment(value, 'x').format(\"h:m A\")\n\n  }\n\n  const hoursFormat = (row) => {\n\n    const decimalTimeString = row.totalhours\n    let decimalTime = parseFloat(decimalTimeString)\n    decimalTime = decimalTime * 60 * 60\n    let hours = Math.floor((decimalTime / (60 * 60)))\n    decimalTime = decimalTime - (hours * 60 * 60)\n    let minutes = Math.floor((decimalTime / 60))\n\n    if (hours < 10) {\n      hours = `0${hours}`\n    }\n    if (minutes < 10) {\n      minutes = `0${minutes}`\n    }\n\n    return (`${isNaN(hours) ? '00' : hours}: ${isNaN(minutes) ? '00' : minutes}`)\n\n  }\n\n  const openList = (item) => {\n\n    const temp = listTimeSheet.map((obj) => {\n      const tempObj = { ...obj }\n      if (item.id === obj.id) {\n        tempObj.openflg = !obj.openflg\n      } else {\n        tempObj.openflg = false\n      }\n      return tempObj\n    })\n    setListTimesheet(temp)\n\n  }\n\n  const refreshList = (vl) => {\n    if (vl) {\n      dispatch(\n        timesheetList({\n          date: moment.unix(filterDate).startOf('day').valueOf(),\n          enddate: moment.unix(filterDate).endOf('day').valueOf(),\n          option: groupByOption,\n          userId: parseInt(activeOrg.rolelevel) === 1 ? '' : userId,\n          client: currentClient.id,\n          service: currentService.id,\n          taskfilter\n        })\n      )\n    } else {\n      setAddTimeSheetModal(false)\n    }\n  }\n\n  const hoursFormatTemp = (totalhours, flg) => {\n\n    const decimalTimeString = totalhours\n    let decimalTime = parseFloat(decimalTimeString)\n    decimalTime = decimalTime * 60 * 60\n    let hours = Math.floor((decimalTime / (60 * 60)))\n    decimalTime = decimalTime - (hours * 60 * 60)\n    let minutes = Math.floor((decimalTime / 60))\n\n    if (hours < 10) {\n      hours = `0${hours}`\n    }\n    if (minutes < 10) {\n      minutes = `0${minutes}`\n    }\n    if (flg) {\n      return isNaN(hours) ? 0 : hours\n    } else {\n      return isNaN(minutes) ? 0 : minutes\n    }\n\n  }\n\n  const totalHoursfn = (timesheets) => {\n\n    if (timesheets) {\n      return timesheets?.reduce(function (memo, t) { // sum the times\n        const hour = hoursFormatTemp(t.totalhours, true)\n        const min = hoursFormatTemp(t.totalhours, false)\n        memo[0] += parseInt(hour, 10)\n        memo[1] += parseInt(min, 10)\n        if (memo[1] >= 60) {\n          memo[0] += ~~(memo[1] / 60)\n          memo[1] = memo[1] % 60\n        }\n        return memo\n      }, [0, 0]).map(function (t) { // map to the desired format\n        if (t < 10) {\n          return `0${t}`\n        }\n        return t\n      }).join(' : ')\n    } else {\n      return '00:00'\n    }\n\n  }\n\n  const deleteTimeSheet = async (id) => {\n\n    await axios.post('/tasktimesheets/delete', { id, updatedBy: userId })\n      .then(() => {\n        dispatch(\n          timesheetList({\n            date: moment.unix(filterDate).startOf('day').valueOf(),\n            enddate: moment.unix(filterDate).endOf('day').valueOf(),\n            option: groupByOption,\n            userId: parseInt(activeOrg.rolelevel) === 1 ? '' : userId,\n            client: currentClient.id,\n            service: currentService.id,\n            taskfilter\n          })\n        )\n      })\n  }\n\n  const deletefn = (id) => {\n\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await deleteTimeSheet(id)\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'TImesheet has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n      }\n    })\n  }\n\n  const editModal = (item) => {\n    setSelectedTimesheet(item)\n    setAddTimeSheetModal(true)\n  }\n\n  const handleDateChange = (date) => {\n    setFilterDate(moment(date).startOf('day').unix())\n    dispatch(timesheetList({\n      date: moment.unix(date).startOf('day').valueOf(),\n      enddate: moment.unix(date).endOf('day').valueOf(),\n      option: groupByOption,\n      userId: parseInt(activeOrg.rolelevel) === 1 ? '' : userId,\n      client: currentClient.id,\n      service: currentService.id,\n      taskfilter\n    }))\n  }\n\n  const exportExcel = () => {\n    dispatch(exportList({\n      date: moment.unix(filterDate).startOf('day').valueOf(),\n      enddate: moment.unix(filterDate).endOf('day').valueOf(),\n      export: true\n    }))\n  }\n\n  const taskListTimeSheet = (val) => {\n    setGroupByOption(val)\n    dispatch(timesheetList({\n      date: moment.unix(filterDate).startOf('day').valueOf(),\n      enddate: moment.unix(filterDate).endOf('day').valueOf(),\n      client: currentClient.id,\n      service: currentService.id,\n      option: val,\n      export: false,\n      taskfilter\n    }))\n  }\n\n  const listTimeSheetByTask = (val) => {\n    setTaskFilter(val)\n    dispatch(timesheetList({\n      date: moment.unix(filterDate).startOf('day').valueOf(),\n      enddate: moment.unix(filterDate).endOf('day').valueOf(),\n      client: currentClient.id,\n      service: currentService.id,\n      option: groupByOption,\n      export: false,\n      taskfilter: val\n    }))\n  }\n\n  const optionArr = ['', 'Group By User', 'Group By Task']\n  return (\n    <Fragment>\n      <Card className='p-1 mb-0'>\n        <Row className='d-flex align-items-sm-center justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column'>\n\n          <Col className='col-12 col-md-5 col-lg-5 d-flex'>\n\n            <Col className='col-6 col-lg-4'>\n              <UncontrolledButtonDropdown className='col-12'>\n                <DropdownToggle outline color='secondary' caret>\n                  {optionArr[groupByOption]}\n                </DropdownToggle>\n                <DropdownMenu>\n                  <DropdownItem onClick={() => { taskListTimeSheet(1) }}>Group By User</DropdownItem>\n                  <DropdownItem onClick={() => { taskListTimeSheet(2) }}>Group By Task</DropdownItem>\n                </DropdownMenu>\n              </UncontrolledButtonDropdown>\n            </Col>\n\n            {groupByOption === 2 &&\n\n              <Col className='col-6 col-lg-4'>\n                <UncontrolledButtonDropdown className='col-12 ps-1'>\n                  <DropdownToggle outline color='secondary' caret>\n                    {taskFilterOption[taskfilter]}\n                  </DropdownToggle>\n                  <DropdownMenu>\n                    <DropdownItem onClick={() => { listTimeSheetByTask(1) }}>Current Task</DropdownItem>\n                    <DropdownItem onClick={() => { listTimeSheetByTask(2) }}>Completed Task</DropdownItem>\n                  </DropdownMenu>\n                </UncontrolledButtonDropdown>\n              </Col>\n            }\n          </Col>\n          <Col className='col-12 col-md-7 col-lg-7 d-flex align-items-sm-center justify-content-end flex-xl-nowrap flex-wrap flex-sm-row flex-column'>\n            {groupByOption === 2 &&\n\n              <Col className='ms-0 ms-lg-1 mt-50 mt-lg-0 col-12 col-lg-3 col-md-3'>\n                <Select\n                  label={'name'}\n                  isClearable={false}\n                  value={currentClient}\n                  options={clientOptions}\n                  className='react-select'\n                  classNamePrefix='select'\n                  theme={selectThemeColors}\n                  getOptionLabel={(option) => option.name}\n                  getOptionValue={(option) => option.id}\n                  onChange={async data => {\n                    setCurrentClient(data)\n                    await dispatch(\n                      timesheetList({\n                        date: moment.unix(filterDate).startOf('day').valueOf(),\n                        enddate: moment.unix(filterDate).endOf('day').valueOf(),\n                        option: groupByOption,\n                        userId: parseInt(activeOrg.rolelevel) === 1 ? '' : userId,\n                        client: data.id,\n                        service: currentService.id,\n                        taskfilter\n                      })\n                    )\n                  }}\n                />\n              </Col>\n            }\n            {groupByOption === 2 &&\n              <Col className='ms-0 ms-lg-1 col-12 col-lg-4 col-md-4 mt-50 mt-lg-0'>\n                <Select\n                  theme={selectThemeColors}\n                  isClearable={false}\n                  className='react-select'\n                  classNamePrefix='select'\n                  options={serviceOptions}\n                  value={currentService}\n                  getOptionLabel={(option) => option.name}\n                  getOptionValue={(option) => option.id}\n                  onChange={async data => {\n                    setCurrentService(data)\n                    await dispatch(\n                      timesheetList({\n                        date: moment.unix(filterDate).startOf('day').valueOf(),\n                        enddate: moment.unix(filterDate).endOf('day').valueOf(),\n                        option: groupByOption,\n                        userId: parseInt(activeOrg.rolelevel) === 1 ? '' : userId,\n                        client: currentClient.id,\n                        service: data.id,\n                        taskfilter\n                      })\n                    )\n                  }}\n                />\n              </Col>\n            }\n            {groupByOption === 1 &&\n              <Col className='me-1 ms-0 ms-lg-1 col-12 col-md-3 col-lg-3 mt-50 mt-lg-0'>\n                <Flatpickr\n                  value={String(filterDate)}\n                  placeholder='Select Date'\n                  onChange={(date, dateStr) => { handleDateChange(dateStr) }}\n                  options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                  className={classnames('due-date-picker')} />\n              </Col>\n            }\n            <Col className='d-flex flex-wrap flex-md-nowrap alin-items-center mt-50 mt-lg-0 col-12 col-md-4 col-lg-4'>\n              <Button className='ms-0' color='primary' onClick={() => setAddTimeSheetModal(true)}> <Plus size={15} /> Add</Button>\n              <UncontrolledDropdown className='ms-1'>\n                <DropdownToggle color='secondary' caret outline>\n                  <MoreVertical className='font-small-4 me-50' />\n                </DropdownToggle>\n                <DropdownMenu>\n                  <DropdownItem onClick={() => exportExcel()}>\n                    <Download size={14} className='me-50' />Export</DropdownItem>\n                </DropdownMenu>\n              </UncontrolledDropdown>\n            </Col>\n          </Col>\n        </Row>\n      </Card>\n      <AddTimeSheet addTimeSheetModal={addTimeSheetModal} refreshList={refreshList} selectedTimesheet={selectedTimesheet} />\n\n      <Card>\n        <CardBody>\n          <Table className='mb-0' responsive >\n            <thead>\n              <tr>\n                <th>Date</th>\n                <th>Client</th>\n                <th>\n                  {groupByOption === 1 ? 'Task' : 'User'}</th>\n                <th>Start</th>\n                <th>End</th>\n                <th>Total</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n\n            {\n              listTimeSheet?.map((obj, k) => {\n                return (\n                  <Fragment>\n                    <thead key={k} >\n                      <tr className='my-50' onClick={() => openList(obj)}>\n                        <th className={`border-white-3 border border-5 ${obj.openflg ? 'bg-light-primary' : 'bg-light-ocean'} text-white`} colSpan={'5'} >{obj.name}</th>\n                        <th className={`border-white-3 border border-5 ${obj.openflg ? 'bg-light-primary' : 'bg-light-ocean'} text-white`} >\n                          {totalHoursfn(obj?.timesheets)}\n                        </th>\n                        <th className={`border-white-3 border border-5 ${obj.openflg ? 'bg-light-primary' : 'bg-light-ocean'} text-white`} >\n                          {obj.openflg === true ? <ChevronDown size={16} /> : <ChevronUp size={16} />}\n                        </th>\n                      </tr>\n\n                      {(obj?.timesheets && obj.openflg === true) &&\n\n                        obj?.timesheets?.map((item, i) => {\n                          return (\n                            <tr key={i}>\n                              <td>{moment(item.createdon).format('MMM DD, Y')}</td>\n                              <td className='p-75'>{item.clientname ? (item.clientname?.length < 21 ? item.clientname : `${item.clientname?.substr(0, 20)}...`) : 'Non-Task Linked Time'}</td>\n                              <td className='p-75'>{item?.taskname ? (item.taskname?.length < 21 ? item.taskname : `${item.taskname?.substr(0, 20)}...`) : ''}</td>\n                              <td className='p-75'>{dateFormattime(item.starttime)}</td>\n                              <td className='p-75'>{(item.endtime !== null ? dateFormattime(item.endtime) : '-')}</td>\n                              <td className='p-75 text-center'>{hoursFormat(item || '0')}</td>\n                              <td>\n                                <Edit size={15} className='cursor-pointer' onClick={() => editModal(item)} />\n                                <Trash size={15} className='ms-50 cursor-pointer' onClick={() => deletefn(item.id)} />\n                              </td>\n                            </tr>\n                          )\n                        })\n                      }\n\n                      {(!obj?.timesheets && obj.openflg === true) &&\n                        <td colSpan={7}>\n                          <h5 className='text-center'>No Records</h5>\n                        </td>\n                      }\n\n                    </thead>\n                  </Fragment>\n                )\n              })\n\n            }\n          </Table>\n        </CardBody>\n      </Card>\n    </Fragment >\n  )\n}\n\nexport default UsersList\n","// ** User List Component\nimport Table from './Table'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Custom Components\nimport StatsHorizontal from '@components/widgets/stats/StatsHorizontal'\n\n// ** Icons Imports\nimport { User, UserPlus, UserCheck, UserX } from 'react-feather'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst TeamList = () => {\n  return (\n    <div className='app-user-list'>\n      <Table />\n    </div>\n  )\n}\n\nexport default TeamList\n","// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Card, CardBody } from 'reactstrap'\n\nconst StatsHorizontal = ({ icon, color, stats, renderStats, statTitle, className, statsMargin }) => {\n  return (\n    <Card>\n      <CardBody className={className}>\n        <div className='d-flex justify-content-between align-items-center'>\n          <div>\n            {renderStats ? (\n              renderStats\n            ) : (\n              <h2\n                className={classnames('fw-bolder', {\n                  'mb-0': !statsMargin,\n                  [statsMargin]: statsMargin\n                })}\n              >\n                {stats}\n              </h2>\n            )}\n\n            <p className='card-text'>{statTitle}</p>\n          </div>\n          <div className={`avatar avatar-stats p-50 m-0 ${color ? `bg-light-${color}` : 'bg-light-primary'}`}>\n            <div className='avatar-content'>{icon}</div>\n          </div>\n        </div>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default StatsHorizontal\n\n// ** PropTypes\nStatsHorizontal.propTypes = {\n  stats: PropTypes.string,\n  renderStats: PropTypes.any,\n  className: PropTypes.string,\n  icon: PropTypes.element.isRequired,\n  color: PropTypes.string.isRequired,\n  statTitle: PropTypes.string.isRequired,\n  statsMargin: PropTypes.oneOf(['mb-0', 'mb-25', 'mb-50', 'mb-75', 'mb-1', 'mb-2', 'mb-3', 'mb-4', 'mb-5'])\n}\n"],"sourceRoot":""}