{"version":3,"sources":["views/apps/digital-signature/list/Table.js","views/apps/digital-signature/list/index.js"],"names":["userId","orgUserId","CustomHeader","handlePerPage","rowsPerPage","handleFilter","searchTerm","updateRefreshList","currentStatus","statusArrOptions","handleStatus","exportList","useState","formModal","setFormModal","id","useParams","className","isOpen","toggle","updateRefresh","val","htmlFor","type","value","onChange","style","width","md","sm","lg","label","isClearable","options","classNamePrefix","theme","selectThemeColors","getOptionLabel","option","name","getOptionValue","data","placeholder","e","target","Can","I","a","color","onClick","tag","Link","to","caret","outline","DigitalSignatureList","dispatch","useDispatch","store","useSelector","state","digitalsignature","sort","setSearchTerm","currentPage","setCurrentPage","sortColumn","setRowsPerPage","setCurrentStatus","currentLocation","selectedDSC","setSelectedDSC","locationArr","statusObj","statusArr","renderClient","row","initials","content","dateFormat","length","moment","format","unix","block","setBlock","Loader","exportDSC","q","page","perPage","status","location","useEffect","getData","handlePagination","selected","parseInt","currentTarget","CustomPagination","count","Number","Math","ceil","total","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","MySwal","withReactContent","Swal","updateLocation","obj","updatedBy","updateDSCLocation","toast","success","position","blocking","loader","setFreshList","responsive","filters","isFiltered","Object","keys","some","k","allData","slice","dataToRender","map","uniqueidentity","contactname","email","contact","issueddate","expirydate","dsclocation","pill","password","href","preventDefault","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","then","result","deleteDigitalSignaturelist","deletefun","size","ServiceList","Table"],"mappings":"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","file":"static/js/232.3b7d9fa9.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect, forwardRef } from 'react'\nimport { Link, useParams } from 'react-router-dom'\nimport Avatar from '@components/avatar'\nimport { Can } from '@src/utility/context/Can.js'\n// ** Store & Actions\nimport { getData, deleteDigitalSignaturelist, exportDSC, updateDSCLocation } from '../store'\nimport { useDispatch, useSelector } from 'react-redux'\n// ** Third Party Components\nimport ReactPaginate from 'react-paginate'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport AddDSC from '@src/views/apps/digital-signature/add/AddCard.js'\nimport EditDSC from '@src/views/apps/digital-signature/edit/EditCard.js'\nimport { orgUserId } from '@src/helper/sassHelper'\nimport toast from 'react-hot-toast'\nconst userId = orgUserId()\n\nimport {\n  Badge,\n  Row,\n  Col,\n  Card,\n  Input,\n  Button,\n  Table,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from 'reactstrap'\n// ** Styles\nimport Select from 'react-select'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport { selectThemeColors } from '@utils'\nimport moment from 'moment'\nimport { Download, Edit, Edit2, MoreVertical, Trash, UploadCloud } from 'react-feather'\n\n// ** Table Header\nconst CustomHeader = ({ handlePerPage, rowsPerPage, handleFilter, searchTerm, updateRefreshList, currentStatus, statusArrOptions, handleStatus, exportList }) => {\n  const [formModal, setFormModal] = useState(false)\n  const { id } = useParams()\n  const updateRefresh = (val) => {\n    if (val) {\n      setFormModal(false)\n      updateRefreshList(true)\n    }\n  }\n\n  return (\n    <div className='d-flex flex-wrap flex-md-nowrap p-2 p-md-1 my-75'>\n      <Modal isOpen={formModal} toggle={() => setFormModal(!formModal)} className='modal-dialog-centered modal-dsc'>\n\n        <ModalHeader toggle={() => setFormModal(!formModal)}>Digital Signature</ModalHeader>\n        <ModalBody>\n          <AddDSC updateRefresh={updateRefresh} />\n        </ModalBody>\n      </Modal>\n      <Col className='col-12 col-md-6 d-flex align-items-center px-1'>\n        <div className='d-flex align-items-center w-100'>\n          <label htmlFor='rows-per-page'>Show</label>\n          <Input\n            className='mx-50'\n            type='select'\n            id='rows-per-page'\n            value={rowsPerPage}\n            onChange={handlePerPage}\n            style={{ width: '5rem' }}\n          >\n            <option value='10'>10</option>\n            <option value='25'>25</option>\n            <option value='50'>50</option>\n          </Input>\n          <label htmlFor='rows-per-page'>Entries</label>\n        </div>\n\n      </Col>\n      <Col className='col-12 col-md-6 d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1'\n      >\n        {!id &&\n          <Fragment>            \n            <Col md={5} sm={12} lg={5} className='p-25'>\n              <Select\n                label={'name'}\n                isClearable={false}\n                value={currentStatus}\n                options={statusArrOptions}\n                className='react-select'\n                classNamePrefix='select'\n                theme={selectThemeColors}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n                onChange={(data) => { handleStatus(data) }}\n              />\n            </Col>\n            <Col md={5} sm={12} lg={5} className='p-25'>\n              <Input\n                id='search-invoice'\n                className=''\n                type='text'\n                placeholder='Search'\n                value={searchTerm}\n                onChange={e => handleFilter(e.target.value)}\n              />\n            </Col>\n          </Fragment>\n        }\n        <Col className='d-flex justify-content-start justify-content-lg-end align-items-center table-header-actions col-12 col-md-2'>\n          <Can I={'write'} a={'digital-signature'}>\n            {id &&\n              <Button className='add-new-user' color='primary' onClick={() => { setFormModal(!formModal) }}>\n                Add\n              </Button>\n            }\n            {!id &&\n              <Button className='add-new-user' color='primary' tag={Link} to={'/digital-signature/add'} >\n                Add\n              </Button>\n            }\n          </Can>\n          <UncontrolledDropdown className='ms-1'>\n            <DropdownToggle color='secondary' caret outline className='px-1'>\n              <MoreVertical className='font-small-4' />\n            </DropdownToggle>\n            <DropdownMenu>\n              <Can I={'write'} a={'digital-signature'}>\n                <DropdownItem className='w-100' tag={Link} to='/import/digitalsignatures'>\n                  <UploadCloud className='font-small-4 me-50' />\n                  <span className='align-middle'>Import</span>\n                </DropdownItem>\n              </Can>\n              <Can I={'write'} a={'digital-signature'}>\n                <DropdownItem className='w-100' onClick={() => { exportList() }} >\n                  <Download className='font-small-4 me-50' />\n                  <span className='align-middle'>Export</span>\n                </DropdownItem>\n              </Can>\n            </DropdownMenu>\n          </UncontrolledDropdown>\n        </Col>\n      </Col>\n    </div>\n  )\n}\n\nconst DigitalSignatureList = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => { return state.digitalsignature })\n  const { id } = useParams()\n  // ** States\n  const [sort] = useState('desc')\n  const [searchTerm, setSearchTerm] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [sortColumn] = useState('createdon')\n  const [rowsPerPage, setRowsPerPage] = useState(id ? 6 : 25)\n  const [currentStatus, setCurrentStatus] = useState({ id: '', name: 'Select Status' })\n  const [currentLocation] = useState({ id: '', name: 'All' })\n  const [formModal, setFormModal] = useState(false)\n  const [selectedDSC, setSelectedDSC] = useState(null)\n  const locationArr = ['', 'Office', 'With Client']\n\n  const statusObj = [\n    '',\n    'light-primary',\n    'light-success',\n    'light-danger'\n  ]\n\n  const statusArr = [\n    '',\n    \"Active\",\n    \"Inactive\",\n    \"Expired\"\n  ]\n\n  const statusArrOptions = [\n    { id: 0, name: 'Select All' },\n    { id: 1, name: \"Active\" },\n    { id: 2, name: \"Inactive\" },\n    { id: 3, name: \"Expired\" }\n  ]\n\n  const renderClient = row => {\n\n    return (\n      <Avatar\n        initials\n        className='me-1'\n        color={'light-primary'}\n        content={row.name || ''}\n      />\n    )\n\n  }\n\n  const dateFormat = (value) => {\n    if (value.length === 13) {\n      return moment(value, 'x').format(\"MMM DD, YYYY\")\n    } else {\n      return moment.unix(value).format(\"MMM DD, YYYY\")\n    }\n\n  }\n\n  // ** Bootstrap Checkbox Component\n  const BootstrapCheckbox = forwardRef((props, ref) => (\n    <div className='form-check'>\n      <Input type='checkbox' ref={ref} {...props} />\n    </div>\n  ))\n\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  \n  const exportList = async () => {\n    await dispatch(\n      exportDSC({\n        sort,\n        sortColumn,\n        q: searchTerm,      \n        page: currentPage,\n        perPage: rowsPerPage,\n        status: currentStatus.id,\n        location: currentLocation.id\n      })\n    )\n  }\n\n  // ** Get data on mount\n  useEffect(async () => {\n    setBlock(true)\n    await dispatch(\n      getData({\n        sort,\n        sortColumn,\n        q: searchTerm,        \n        page: currentPage,\n        perPage: rowsPerPage,\n        status: currentStatus.id,\n        location: currentLocation.id\n      })\n    )\n    setBlock(false)\n  }, [dispatch])\n\n  // ** Function in get data on page change\n  const handlePagination = async page => {\n    setBlock(true)\n    await dispatch(\n      getData({\n        sort,\n        sortColumn,\n        q: searchTerm,\n        perPage: rowsPerPage,\n        page: page.selected + 1,\n        status: currentStatus.id,\n        location: currentLocation.id\n      })\n    )\n    setBlock(false)\n    setCurrentPage(page.selected + 1)\n  }\n\n  // ** Function in get data on rows per page\n  const handlePerPage = async e => {\n    const value = parseInt(e.currentTarget.value)\n    setBlock(true)\n    await dispatch(\n      getData({\n        sort,\n        sortColumn,\n        q: searchTerm,\n        perPage: value,\n        page: currentPage,\n        status: currentStatus.id,\n        location: currentLocation.id\n      })\n    )\n    setRowsPerPage(value)\n    setBlock(false)\n  }\n\n  // ** Function in get data on search query change\n  const handleFilter = async val => {\n    setSearchTerm(val)\n    setBlock(true)\n    await dispatch(\n      getData({\n        sort,\n        q: val,\n        sortColumn,\n        page: currentPage,\n        perPage: rowsPerPage,\n        status: currentStatus.id,\n        location: currentLocation.id\n      })\n    )\n    setBlock(false)\n  }\n\n  const handleStatus = async val => {\n    setCurrentStatus(val)\n    setBlock(true)\n    await dispatch(\n      getData({\n        sort,\n        q: searchTerm,\n        sortColumn,\n        page: currentPage,\n        perPage: rowsPerPage,\n        status: val.id,\n        location: currentLocation.id\n      })\n    )\n    setBlock(false)\n  }\n\n\n  // ** Custom Pagination\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(store.total / rowsPerPage))\n\n    return (\n      <ReactPaginate\n        previousLabel={''}\n        nextLabel={''}\n        pageCount={count || 1}\n        activeClassName='active'\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={page => handlePagination(page)}\n        pageClassName={'page-item'}\n        nextLinkClassName={'page-link'}\n        nextClassName={'page-item next'}\n        previousClassName={'page-item prev'}\n        previousLinkClassName={'page-link'}\n        pageLinkClassName={'page-link'}\n        containerClassName={'pagination react-paginate justify-content-end my-2 pe-1'}\n      />\n    )\n  }\n\n  // ** Table data to render\n  const dataToRender = () => {\n    const filters = {\n      status: currentStatus.id,\n      q: searchTerm\n    }\n\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n\n    if (store.data.length > 0) {\n      return store.data\n    } else if (store.data.length === 0 && isFiltered) {\n      return []\n    } else {\n      return store.allData.slice(0, rowsPerPage)\n    }\n  }\n\n  const MySwal = withReactContent(Swal)\n\n  const deletefun = (id) => {\n\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteDigitalSignaturelist(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'Digital Signature has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n      }\n    })\n  }\n\n  const updateRefreshList = async (val) => {\n    if (val) {\n      setBlock(true)\n      await dispatch(\n        getData({\n          sort,\n          q: searchTerm,\n          sortColumn,\n          page: currentPage,\n          perPage: rowsPerPage,\n          status: currentStatus.id,\n          location: currentLocation.id\n        })\n      )\n      setBlock(false)\n    }\n  }\n\n  const updateLocation = async (val, id) => {\n    const obj = { id, location: val, updatedBy: userId }\n    await dispatch(updateDSCLocation(obj))\n    toast.success('Digital Signature Location Update Successfully.', { position: 'bottom-right' })\n  }\n\n  const setFreshList = () => {\n    setFormModal(false)\n    setSelectedDSC(null)\n\n  }\n\n  const editDSC = (val) => {\n\n    setFormModal(true)\n    setSelectedDSC(val)\n  }\n\n  return (\n    <Fragment>\n      <UILoader blocking={block} loader={<Loader />}>\n        <Card className='overflow-hidden'>\n          <Row>\n            <CustomHeader\n              searchTerm={searchTerm}\n              rowsPerPage={rowsPerPage}\n              handleFilter={handleFilter}\n              handlePerPage={handlePerPage}\n              updateRefreshList={updateRefreshList}              \n              statusArrOptions={statusArrOptions}\n              currentStatus={currentStatus}\n              handleStatus={handleStatus}\n              exportList={exportList}\n            />\n\n            <Modal isOpen={formModal} toggle={() => setFormModal(!formModal)} className='modal-dialog-centered modal-dsc'>\n\n              <ModalHeader toggle={() => setFormModal(!formModal)}>Digital Signature</ModalHeader>\n              <ModalBody>\n                <EditDSC selectedDSC={selectedDSC} setFreshList={setFreshList} />\n              </ModalBody>\n            </Modal>\n\n            <Table responsive className='table tabel-bordered table-hover'>\n              <thead>\n                <tr>\n                  <th>Id</th>\n                  <th>Client</th>\n                  <th>Name</th>\n                  <th>Contact</th>\n                  <th>Issued Date</th>\n                  <th>Expiry Date</th>\n                  <th>Location</th>\n                  <th>Password</th>\n                  <th>Status</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>{\n\n                dataToRender().map((row, k) => {\n                  return (\n                    <tr key={k}>\n                      <td>\n                        <div className='d-flex justify-content-left align-items-center'>\n                          <span className='text-capitalize fw-bolder font-small-3'>{row.uniqueidentity}</span>\n                        </div>\n                      </td>\n                      <td>\n                        <div className='d-flex justify-content-left align-items-center'>\n                          <span className='text-capitalize fw-bolder text-truncate font-small-3'>{row.contactname}</span>\n                        </div>\n                      </td>\n                      <td>\n                        <div className='d-flex justify-content-left align-items-center font-small-5'>\n                          {renderClient(row)}\n                          <div className='d-flex flex-column'>\n                            <span className='fw-bolder font-small-5'>{row.name}</span>\n                            <small className='text-truncate mb-0 font-small-3'>{row.email}</small>\n                          </div>\n                        </div>\n                      </td>\n                      <td>\n                        {row.contact}\n                      </td>\n                      <td className='font-small-3'>\n                        {dateFormat(row.issueddate)}\n                      </td>\n                      <td className='font-small-3'>\n                        {dateFormat(row.expirydate)}\n                      </td>\n                      <td>\n                        <Badge className='text-capitalize' color={statusObj[row.dsclocation]} pill>{locationArr[row.dsclocation]}</Badge>\n                      </td>\n                      <td>\n                        {row.password}\n                      </td>\n                      <td>\n                        <Badge className='text-capitalize' color={statusObj[row.status]} pill>\n                          {statusArr[row.status]}\n                        </Badge>\n                      </td>\n                      <td>\n                        <div className='column-action d-flex align-items-center'>\n                          <Can I={'delete'} a={'digital-signature'}>\n                            <Col tag={'a'} href='/'\n                              onClick={e => {\n                                e.preventDefault()\n                                deletefun(row.id)\n                              }}\n                            >\n                              <Trash\n                                className='cursor-pointer ms-1 mt-0' size={16} />\n                            </Col>\n                            <Col tag={'a'} href='/'\n                              onClick={e => {\n                                e.preventDefault()\n                                editDSC(row)\n                              }}\n                            >\n                              <Edit\n                                className='cursor-pointer ms-1 mt-0' size={16} />\n                            </Col>\n                          </Can>\n                          <UncontrolledDropdown>\n                            <DropdownToggle tag='div' className='btn btn-sm'>\n                              <MoreVertical size={14} className='cursor-pointer' />\n                            </DropdownToggle>\n                            <DropdownMenu>\n                              <DropdownItem\n                                tag='a'\n                                href='/'\n                                className='w-100'\n                                onClick={e => {\n                                  e.preventDefault()\n                                  updateLocation(1, row.id)\n                                }}\n                              >\n                                <span className='align-middle'>Office</span>\n                              </DropdownItem>\n\n                              <DropdownItem\n                                tag='a'\n                                href='/'\n                                className='w-100'\n                                onClick={e => {\n                                  e.preventDefault()\n                                  updateLocation(2, row.id)\n                                }}\n                              >\n                                <span className='align-middle'>With Client</span>\n                              </DropdownItem>\n\n                            </DropdownMenu>\n                          </UncontrolledDropdown>\n                        </div>\n                      </td>\n                    </tr>\n                  )\n                })\n              }</tbody>\n            </Table>\n            <CustomPagination />\n          </Row>\n        </Card>\n      </UILoader>\n    </Fragment>\n  )\n}\n\nexport default DigitalSignatureList","// ** User List Component\nimport Table from './Table'\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst ServiceList = () => {\n  return (\n    <div className='app-user-list'>\n      <Table />\n    </div>\n  )\n}\n\nexport default ServiceList\n"],"sourceRoot":""}