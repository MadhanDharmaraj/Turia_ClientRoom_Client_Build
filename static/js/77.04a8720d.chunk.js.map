{"version":3,"sources":["views/apps/task/summary/Table.js","views/apps/task/summary/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","@core/components/widgets/stats/StatsHorizontal.js"],"names":["userId","orgUserId","activeOrg","activeOrganization","TaskList","dispatch","useDispatch","navigate","useNavigate","store","useSelector","state","task","useState","block","setBlock","Loader","useEffect","getTaskSummary","orguserid","parseInt","rolelevel","exportList","exportSummary","blocking","loader","className","color","caret","outline","size","onClick","responsive","taskcreateapproval","filters","isFiltered","Object","keys","some","k","length","summaryData","dataToRender","map","obj","ke","getDataStore","status","service","serviceid","servicename","todo","pending","inprogress","sentforreview","requestchange","completed","Table","UILoader","props","children","tag","overlayColor","Tag","classnames","style","backgroundColor","defaultProps","ComponentSpinner","StatsHorizontal","icon","stats","renderStats","statTitle","statsMargin"],"mappings":"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","file":"static/js/77.04a8720d.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n// ** Store & Actions\nimport { getDataStore, getTaskSummary, exportSummary } from '../store'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ChevronDown, Download, MoreVertical } from 'react-feather'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** Reactstrap Imports\nimport {\n  Card,\n  Badge,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Row,\n  Col,\n  Table\n} from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\nimport { activeOrganization, orgUserId } from '@src/helper/sassHelper'\nimport { useNavigate } from 'react-router-dom'\n\n//import toast from 'react-hot-toast'\nconst userId = orgUserId()\nconst activeOrg = activeOrganization()\n\nconst TaskList = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const store = useSelector(state => state.task)\n\n  // ** States\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  // ** Get data on mount\n  useEffect(async () => {\n    setBlock(true)\n\n    await dispatch(\n      getTaskSummary({\n        orguserid: parseInt(activeOrg?.rolelevel) === 1 ? '' : userId\n      })\n    )\n    setBlock(false)\n  }, [dispatch])\n\n  const exportList = async () => {\n    setBlock(true)\n    await dispatch(\n      exportSummary({\n        orguserid: parseInt(activeOrg?.rolelevel) === 1 ? '' : userId\n      })\n    )\n    setBlock(false)\n  }\n\n  // ** Table data to render\n  const dataToRender = () => {\n    const filters = {\n\n      orguserid: parseInt(activeOrg?.rolelevel) === 1 ? '' : userId\n    }\n\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n\n    if (store.summaryData.length > 0) {\n      return store.summaryData\n    } else if (store.summaryData.length === 0 && isFiltered) {\n      return []\n    }\n  }\n\n\n  return (\n    <Fragment>\n\n      <UILoader blocking={block} loader={<Loader />}>\n        <Card className='overflow-hidden'>\n          <Col className='d-flex justify-content-end p-1'>\n            <UncontrolledDropdown className='ms-1'>\n              <DropdownToggle color='secondary' caret outline>\n                <MoreVertical size={14} />\n              </DropdownToggle>\n              <DropdownMenu>\n                <DropdownItem onClick={() => exportList()}>\n                  <Download className='me-50' size={14} />\n                  Export\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </Col>\n          <Row>\n            <Table responsive >\n              <thead>\n                <tr>\n                  <th>Service</th>\n                  {activeOrg.taskcreateapproval && <th>To Do</th>}\n                  <th>Pending</th>\n                  <th>In Progress</th>\n                  <th>Sent for Review</th>\n                  <th>Request Changes</th>\n                  <th>Completed</th>\n                </tr>\n              </thead>\n              <tbody>\n                {\n                  dataToRender()?.map((obj, k) => {\n                    return (\n                      <tr ke={k}>\n                        <td className='cursor-pointer text-primary' onClick={() => {\n                          dispatch(getDataStore({\n                            status: activeOrg.taskcreateapproval ? [1, 2, 6, 7, 8] : [1, 2, 6, 7],\n                            service: obj.serviceid\n                          }))\n                          navigate('/task/list')\n                        }}>{obj.servicename}</td>\n                        {activeOrg.taskcreateapproval && <td className='cursor-pointer text-primary' onClick={() => {\n                          dispatch(getDataStore({\n                            status: [8],\n                            service: obj.serviceid\n                          }))\n                          navigate('/task/list')\n                        }}\n                        >{obj.todo}</td>}\n                        <td className='cursor-pointer text-primary' onClick={() => {\n                          dispatch(getDataStore({\n                            status: [1],\n                            service: obj.serviceid\n                          }))\n                          navigate('/task/list')\n                        }}>{obj.pending}</td>\n                        <td className='cursor-pointer text-primary' onClick={() => {\n                          dispatch(getDataStore({\n                            status: [2],\n                            service: obj.serviceid\n                          }))\n                          navigate('/task/list')\n                        }}>{obj.inprogress}</td>\n                        <td className='cursor-pointer text-primary' onClick={() => {\n                          dispatch(getDataStore({\n                            status: [6],\n                            service: obj.serviceid\n                          }))\n                          navigate('/task/list')\n                        }}>{obj.sentforreview}</td>\n                        <td className='cursor-pointer text-primary' onClick={() => {\n                          dispatch(getDataStore({\n                            status: [7],\n                            service: obj.serviceid\n                          }))\n                          navigate('/task/list')\n                        }}>{obj.requestchange}</td>\n                        <td className='cursor-pointer text-primary' onClick={() => {\n                          dispatch(getDataStore({\n                            status: [3],\n                            service: obj.serviceid\n                          }))\n                          navigate('/task/list')\n                        }}>{obj.completed}</td>\n                      </tr>\n                    )\n                  })\n                }\n              </tbody>\n            </Table>\n          </Row>\n        </Card>\n      </UILoader>\n    </Fragment >\n  )\n}\n\nexport default TaskList\n","// ** User List Component\nimport Table from './Table'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Custom Components\nimport StatsHorizontal from '@components/widgets/stats/StatsHorizontal'\n\n// ** Icons Imports\nimport { User, UserPlus, UserCheck, UserX } from 'react-feather'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst TaskList = () => {\n  return (\n    <div className='app-user-list'>\n      <Table />\n    </div>\n  )\n}\n\nexport default TaskList\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Card, CardBody } from 'reactstrap'\n\nconst StatsHorizontal = ({ icon, color, stats, renderStats, statTitle, className, statsMargin }) => {\n  return (\n    <Card>\n      <CardBody className={className}>\n        <div className='d-flex justify-content-between align-items-center'>\n          <div>\n            {renderStats ? (\n              renderStats\n            ) : (\n              <h2\n                className={classnames('fw-bolder', {\n                  'mb-0': !statsMargin,\n                  [statsMargin]: statsMargin\n                })}\n              >\n                {stats}\n              </h2>\n            )}\n\n            <p className='card-text'>{statTitle}</p>\n          </div>\n          <div className={`avatar avatar-stats p-50 m-0 ${color ? `bg-light-${color}` : 'bg-light-primary'}`}>\n            <div className='avatar-content'>{icon}</div>\n          </div>\n        </div>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default StatsHorizontal\n\n// ** PropTypes\nStatsHorizontal.propTypes = {\n  stats: PropTypes.string,\n  renderStats: PropTypes.any,\n  className: PropTypes.string,\n  icon: PropTypes.element.isRequired,\n  color: PropTypes.string.isRequired,\n  statTitle: PropTypes.string.isRequired,\n  statsMargin: PropTypes.oneOf(['mb-0', 'mb-25', 'mb-50', 'mb-75', 'mb-1', 'mb-2', 'mb-3', 'mb-4', 'mb-5'])\n}\n"],"sourceRoot":""}