{"version":3,"sources":["views/apps/client/add/AddCard.js","views/apps/client/add/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["activeOrg","activeOrganization","userId","orgUserId","AddCard","useState","block","setBlock","Loader","colourStyles","multiValue","styles","backgroundColor","phoneRegExp","navigate","useNavigate","dispatch","useDispatch","businessEntityOptions","setBusinessEntityOptions","userOptions","setUserOptions","stateOptions","setStateOptions","countryOptions","setCountryOptions","currencyOptions","setCurrencyOptions","gstRegistrationTypeOptions","setGstRegistrationTypeOptions","clientInfo","setClientInfo","contactId","setConatctId","countryshortname","countryCode","setCountryCode","store","useSelector","state","client","schema","yup","shape","createdBy","default","organization","id","referredby","nullable","employeeList","createFolder","contactPersonName","required","registrationNo","name","contactNumber","matches","message","excludeEmptyString","email","organizationName","businessEntity","when","is","then","gstRegistrationType","gstin","placeOfSupply","placeOfSupplyOther","stateothers","currency","currencyid","billingCountryCode","billingAddressLine1","billingAddressLine2","billingAddressCity","billingAddressState","billingAddressStateOthers","billingAddressCountry","countryid","billingAddressZip","contact_info","of","designation","adharnumber","dinnumber","pannumber","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","control","errors","formState","setError","setValue","useFieldArray","fields","append","remove","saveContactInfo","clientId","length","forEach","obj","ind","splice","rows","addContactInfo","useEffect","clientErrors","Object","keys","map","type","onSubmit","data","temp","predata","accesstoken","expiry_date","moment","valueOf","oj","addClient","undefined","datatemp","payload","addItem","primarytag","_formValues","organizationId","primaryStatus","getOrganizationUsers","axios","post","response","arr","organizationusers","catch","err","console","log","getRow","fieldLabel","fieldName","reqflag","colFlag","className","sm","size","classnames","for","render","field","invalid","getSelectRow","options","ref","inputRef","classNamePrefix","value","find","c","getOptionLabel","option","getOptionValue","onChange","val","shortname","businessentities","countries","currencies","gstregistrationtypes","states","setPrimaryDetails","index","target","checked","contactnumber","blocking","loader","k","md","lg","isMulti","item","i","placeholder","onInput","e","defaultChecked","onClick","color","outline","tag","Link","to","ClientAdd","xl","UILoader","props","children","overlayColor","Tag","style","defaultProps","ComponentSpinner"],"mappings":"yZA0BMA,EAAYC,cACZC,EAASC,cA4iBAC,EA3iBC,WAAO,IAAD,IACpB,EAA0BC,oBAAS,GAAM,mBAAlCC,EAAK,KAAEC,EAAQ,KAChBC,EAAS,WACb,OACE,cAAC,WAAQ,UACP,cAAC,IAAO,KAGd,EAEMC,EAAe,CACnBC,WAAY,SAACC,EAAO,GAElB,OAF4B,eAErB,2BACFA,GAAM,IACTC,gBAAiB,WAErB,GAIIC,EAAc,oBAEdC,EAAWC,YAAY,CAAC,GACxBC,EAAWC,cACjB,EAA0DZ,mBAAS,IAAG,mBAA/Da,EAAqB,KAAEC,EAAwB,KACtD,EAAsCd,mBAAS,IAAG,mBAA3Ce,EAAW,KAAEC,EAAc,KAClC,EAAwChB,mBAAS,IAAG,mBAA7CiB,EAAY,KAAEC,EAAe,KACpC,EAA4ClB,mBAAS,IAAG,mBAAjDmB,EAAc,KAAEC,EAAiB,KACxC,EAA8CpB,mBAAS,IAAG,oBAAnDqB,GAAe,MAAEC,GAAkB,MAC1C,GAAoEtB,mBAAS,IAAG,qBAAzEuB,GAA0B,MAAEC,GAA6B,MAChE,GAAoCxB,mBAAS,IAAG,qBAAzCyB,GAAU,MAAEC,GAAa,MAChC,GAAkC1B,mBAAS,MAAK,qBAAzC2B,GAAS,MAAEC,GAAY,MAC9B,GAAsC5B,mBAASL,EAAUkC,kBAAiB,qBAAnEC,GAAW,MAAEC,GAAc,MAC5BC,GAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,MAAM,IAEzCC,GAASC,MAAaC,MAAM,CAChCC,UAAWF,MAAaG,QAAQ3C,GAChC4C,aAAcJ,MAAaG,QAAQ7C,EAAU+C,IAC7CC,WAAYN,MAAaO,WAAWJ,QAAQ,IAC5CK,aAAcR,MAAYG,QAAQ,IAClCM,aAAcT,MAAcG,SAAQ,GACpCO,kBAAmBV,MAAaW,SAAS,sCACzCC,eAAgBZ,MAAaG,QAAQ,IAAII,WACzCM,KAAMb,MAAaW,SAAS,+BAA+BR,QAAQ,IACnEW,cAAed,MAAaG,QAAQ,IAAIY,QAAQ5C,EAAa,CAAE6C,QAAS,4BAA6BC,oBAAoB,IAAQV,WACjIW,MAAOlB,MAAakB,MAAM,4BAA4BX,WAAWJ,QAAQ,IACzEV,YAAaO,MAAaG,QAAQ7C,EAAUkC,kBAC5C2B,iBAAkBnB,MAAaG,QAAQ7C,EAAUuD,MACjDO,eAAgBpB,MAAaqB,KAAK,cAAe,CAAEC,GAAI,SAAC7B,GAAW,MAAqB,OAAhBA,CAAoB,EAAE8B,KAAMvB,MAAaW,SAAS,mCAC1Ha,oBAAqBxB,MAAaO,WAClCkB,MAAOzB,MAAaO,WACpBmB,cAAe1B,MAAaG,QAAQ,IACpCwB,mBAAoB3B,MAAaG,QAAQ7C,EAAUsE,aAAe,IAClEC,SAAU7B,MAAaG,QAAQ7C,EAAUwE,YAAYnB,SAAS,0BAC9DoB,mBAAoB/B,MAAaG,QAAQ,IACzC6B,oBAAqBhC,MAAaO,WAClC0B,oBAAqBjC,MAAaO,WAClC2B,mBAAoBlC,MAAaO,WACjC4B,oBAAqBnC,MAAaG,QAAQ,IAC1CiC,0BAA2BpC,MAAaG,QAAQ7C,EAAUsE,aAAe,IACzES,sBAAuBrC,MAAaG,QAAQ7C,EAAUgF,WAAW3B,SAAS,yBAC1E4B,kBAAmBvC,MAAae,QAxCf,kBAwCmC,CAAEC,QAAS,wBAAyBC,oBAAoB,IAAQV,SAAS,IAC7HiC,aAAcxC,MAAYyC,GACxBzC,MAAaC,MAAM,CACjBC,UAAWF,MAAaG,QAAQ3C,GAChCqD,KAAMb,MAAaO,WACnBW,MAAOlB,MAAakB,QAAQX,WAC5BmC,YAAa1C,MAAaO,WAC1BoC,YAAa3C,MAAaO,WAC1BqC,UAAW5C,MAAaO,WACxBsC,UAAW7C,MAAaO,WACxBO,cAAed,MAAaO,WAAWQ,QAAQ5C,EAAa,CAAE6C,QAAS,4BAA6BC,oBAAoB,SAM9H,GAA6E6B,YAAQ,CACnFC,SAAUC,YAAYjD,IACtBkD,cAAelD,GAAOmD,SAFhBC,GAAY,GAAZA,aAAcC,GAAO,GAAPA,QAAsBC,GAAM,GAAnBC,UAAaD,OAAUE,GAAQ,GAARA,SAAUC,GAAQ,GAARA,SAKhE,GAAmCC,YAAc,CAAE5C,KAAM,eAAgBuC,aAAjEM,GAAM,GAANA,OAAQC,GAAM,GAANA,OAAQC,GAAM,GAANA,OAElBC,GAAe,iDAAG,WAAOC,GAAQ,sFACjC1E,GAAW2E,OAAS,GAAC,gCACjB3E,GAAW4E,SAAQ,SAACC,EAAKC,GAC7B9E,GAAW8E,GAAK5E,UAAYwE,EACX,KAAbG,EAAIpD,MAA6B,KAAdoD,EAAI/C,OACzB9B,GAAW+E,OAAOD,EAAK,EAE3B,IAAE,OACqB,MAAjBE,EAAOhF,IACJ2E,OAAS,GAAC,gCACXzF,EAAS+F,YAAe,CAAED,UAAQ,OAG5ChG,EAAS,iBAAD,OAAkB0F,IAAW,2CACtC,gBAdoB,sCAgBrBQ,qBAAU,WACmB,OAAvB3E,GAAM4E,eACR1G,GAAS,GACT2G,OAAOC,KAAK9E,GAAM4E,cAAcG,KAAI,SAACT,GACnCV,GAASU,EAAK,CAAEU,KAAM,SAAU3D,QAASrB,GAAM4E,aAAaN,GAAK,IACnE,IAEJ,GAAG,CAACtE,GAAM4E,eAEV,IAAMK,GAAQ,iDAAG,WAAOC,GAAI,qFAQiC,OAN3DhH,GAAS,GACHiH,EAAOD,EAAKrC,cAAgB,GAClCnD,IAAc,SAAA0F,GAAO,4BAASA,GAAO,YAAKD,GAAI,IAE9CD,EAAKpE,cAAoC,QAArB,EAAAnD,EAAU0H,mBAAW,aAArB,EAAuBC,aAAcC,MAASC,iBAC3DN,EAAKrC,aACZqC,EAAmB,aAAIA,EAAKrE,aAAakE,KAAI,SAACU,GAAE,OAAKA,EAAG/E,EAAE,IAAC,SACpC/B,EAAS+G,YAAUR,IAAM,OAAlC,QACkBS,KAD1BC,EAAQ,QACDC,QAAQ1F,OAAoB,2CAChC,GAAK,QAEZP,GAAagG,EAASC,QAAQ1F,OAAOO,IAAG,4CAG3C,gBAhBa,sCAkBRoF,GAAW,WACf,IAAIC,GAAa,EACbtC,GAAQuC,YAAYnD,aAAauB,OAAS,IAC5C2B,GAAa,GAEf/B,GAAO,CAAEzD,UAAW1C,EAAQoI,eAAgBtI,EAAU+C,GAAIf,UAAW,EAAGuB,KAAM,GAAIK,MAAO,GAAIJ,cAAe,GAAI4B,YAAa,GAAImD,cAAeH,GAClJ,EAOMI,GAAoB,iDAAG,wFAC3BC,IAAMC,KAAK,+BAA+BzE,MAAK,SAAA0E,GAC7C,IAAMC,EAAMD,EAASpB,KACrBlG,EAAeuH,EAAIC,kBACrB,IAAGC,OAAM,SAACC,GACRC,QAAQC,IAAIF,EACd,IAAE,2CAEH,kBARyB,mCA6CpBG,GAAS,SAACC,EAAYC,GAAgD,IAArCC,EAAO,wDAAUC,IAAO,yDAC7D,OACE,eAAC,KAAG,CAACC,UAAU,eAAc,UAC3B,cAAC,IAAK,CAACC,GAAIF,EAAU,IAAM,KAAMG,KAAK,KAAKF,UAAWG,IAAW,cAAD,OAAeL,EAAU,WAAa,KAAOM,IAAKP,EAAU,SACzHD,IAEH,eAAC,IAAG,CAACK,GAAIF,EAAU,IAAM,KAAK,UAC5B,cAAC,IAAU,CACTvG,GAAIqG,EACJ7F,KAAM6F,EACNtD,QAASA,GACT8D,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OAAO,cAAC,IAAK,aAACC,QAAS/D,GAAOqD,KAAc,GAAUS,GAAS,IAEhF9D,GAAOqD,IAAc,cAAC,IAAY,UAAErD,GAAOqD,GAAW1F,eAI/D,EAEMqG,GAAe,SAACZ,EAAYC,EAAWY,GAA8C,IAAD,EAApCX,EAAO,wDAAUC,IAAO,yDAC5E,OAEE,eAAC,KAAG,CAACC,UAAU,eAAc,UAC3B,cAAC,IAAK,CAACC,GAAIF,EAAU,IAAM,KAAMG,KAAK,KAAKF,UAAWG,IAAW,cAAD,OAAeL,EAAU,WAAa,KAAOM,IAAKP,EAAU,SACzHD,IAEH,eAAC,IAAG,CAACK,GAAIF,EAAU,IAAM,KAAK,UAC5B,cAAC,IAAU,CACTxD,QAASA,GACTvC,KAAM6F,EACNrG,GAAIqG,EACJQ,OAAQ,gBAAGC,EAAK,EAALA,MAAOI,EAAG,EAAHA,IAAG,OACnB,cAAC,IAAM,yBACLC,SAAUD,EACVV,UAAWG,IAAW,eAAgB,CAAE,aAAc3D,GAAOqD,MACzDS,GAAK,IACTM,gBAAgB,SAChBH,QAASA,EACTI,MAAOJ,EAAQK,MAAK,SAAAC,GAAO,OAAOA,EAAEvH,KAAO8G,EAAMO,KAAM,IACvDG,eAAgB,SAACC,GAAM,OAAKA,EAAOjH,IAAI,EACvCkH,eAAgB,SAACD,GAAM,OAAKA,EAAOzH,EAAE,EACrC2H,SAAU,SAAAC,GAMR,MALkB,0BAAdvB,IACFJ,QAAQC,IAAI0B,EAAIC,WAChBxI,GAAeuI,EAAIC,WACnB1E,GAAS,qBAAsByE,EAAIC,YAE9Bf,EAAMa,SAASC,EAAI5H,GAC5B,IACA,IAILgD,GAAOqD,IAAc,cAAC,IAAY,CAACG,UAAU,cAAa,SAAmB,QAAnB,EAAExD,GAAOqD,UAAU,aAAjB,EAAmB1F,eAKxF,EAEAsD,qBAAU,WACU,OAAdhF,KA/FJyG,IAAMC,KAAK,0BAA0BzE,MAAK,SAAA0E,GACxC,IAAMC,EAAMD,EAASpB,KACrBpG,EAAyByH,EAAIiC,iBAC/B,IA8FErC,KA1FFC,IAAMC,KAAK,uBAAuBzE,MAAK,SAAA0E,GACrC,IAAMC,EAAMD,EAASpB,KACrB9F,EAAkBmH,EAAIkC,UACxB,IAWArC,IAAMC,KAAK,wBAAwBzE,MAAK,SAAA0E,GACtC,IAAMC,EAAMD,EAASpB,KACrB5F,GAAmBiH,EAAImC,WACzB,IAIAtC,IAAMC,KAAK,8BAA8BzE,MAAK,SAAA0E,GAC5C,IAAMC,EAAMD,EAASpB,KACrB1F,GAA8B+G,EAAIoC,qBACpC,IAjBAvC,IAAMC,KAAK,gBAAgBzE,MAAK,SAAA0E,GAC9B,IAAMC,EAAMD,EAASpB,KACrBhG,EAAgBqH,EAAIqC,OACtB,IAsFE9C,MAGgB,OAAdnG,IACFuE,GAAgBvE,GAGpB,GAAG,CAACF,GAAYE,KAEhB,IAAMkJ,GAAoB,SAAC9B,EAAWgB,EAAOe,GAEzB,kBAAd/B,GAAiCgB,EAAMgB,OAAOC,SAChDnF,GAAS,oBAAqBJ,GAAQuC,YAAYnD,aAAaiG,GAAO5H,MACtE2C,GAAS,gBAAiBJ,GAAQuC,YAAYnD,aAAaiG,GAAOG,eAClEpF,GAAS,QAASJ,GAAQuC,YAAYnD,aAAaiG,GAAOvH,QAEtDkC,GAAQuC,YAAYnD,aAAaiG,GAAO5C,eAExCrC,GAASkD,EADO,kBAAdA,EACkBgB,EAAMgB,OAAOC,QAEbjB,EAI5B,EAEA,OACE,cAAC,IAAQ,CAACmB,SAAUjL,EAAOkL,OAAQ,cAAChL,EAAM,IAAI,SAC5C,uBAAM8G,SAAUzB,GAAayB,IAAU,UAEpCJ,OAAOC,KAAKpB,IAAQqB,KAAI,SAACT,EAAK8E,GAAO,IAAD,EACnC,OAAO,eAAC,IAAY,WAAS,IAAa,QAAZ,EAAC1F,GAAOY,UAAI,aAAX,EAAajD,UAAlB+H,EAC5B,IAGA,eAAC,IAAI,CAAClC,UAAU,uBAAsB,UAEpC,cAAC,IAAU,UACT,cAAC,IAAS,UAAC,kBAEb,eAAC,IAAQ,CAACA,UAAU,OAAM,UAExB,eAAC,KAAG,WACF,cAAC,IAAG,CAACmC,GAAG,IAAInC,UAAU,eAAc,SACjCL,GAAO,gBAAiB,QAAQ,GAAM,KAEzC,cAAC,IAAG,CAACwC,GAAG,IAAInC,UAAU,eAAc,SACjCQ,GAAa,kBAAmB,iBAAkB7I,GAAuB,GAAM,KAElF,cAAC,IAAG,CAACwK,GAAG,IAAInC,UAAU,eAAc,SACjCL,GAAO,kBAAmB,kBAAkB,GAAO,QAGxD,cAAC,KAAG,CAACK,UAAU,GAAE,SACf,eAAC,IAAG,CAACmC,GAAG,IAAInC,UAAU,eAAc,UAClC,cAAC,IAAK,CAACC,GAAI,KAAMmC,GAAG,KAAKlC,KAAK,KAAKF,UAAWG,IAAW,cAAc,SAAE,gBAGzE,eAAC,IAAG,CAACF,GAAI,KAAMmC,GAAG,KAAI,UACpB,cAAC,IAAU,CACT7F,QAASA,GACTvC,KAAK,eACLR,GAAG,eACH6G,OAAQ,gBAAGC,EAAK,EAALA,MAAOO,EAAK,EAALA,MAAOH,EAAG,EAAHA,IAAG,OAC1B,cAAC,IAAM,yBACLC,SAAUD,EACVV,UAAWG,IAAW,eAAgB,CAAE,aAAc3D,GAAO7C,gBACzD2G,GAAK,IACTM,gBAAgB,SAChBH,QAAS5I,EACTwK,SAAS,EACTxB,MAAOA,EACPG,eAAgB,SAACC,GAAM,OAAKA,EAAOjH,IAAI,EACvCkH,eAAgB,SAACD,GAAM,OAAKA,EAAOzH,EAAE,EACrCpC,OAAQF,IACR,IAILsF,GAAO7C,cAAgB,cAAC,IAAY,CAACqG,UAAU,cAAa,SAAqB,QAArB,EAAExD,GAAO7C,oBAAY,aAAnB,EAAqBQ,qBAuB5F,oBAAI6F,UAAU,oBACbxD,GAAOb,cAAgB,mBAAGqE,UAAU,mBAAkB,SAAqB,QAArB,EAAExD,GAAOb,oBAAY,aAAnB,EAAqBxB,UAE9E,eAAC,IAAQ,CAAC6F,UAAU,8CAA6C,UAC9DnD,GAAOgB,KAAI,SAACyE,EAAMC,GAAC,mEAClB,qBAAmBvC,UAAU,mBAAkB,SAC7C,cAAC,KAAG,UACF,cAAC,IAAG,CAACA,UAAU,6EAA6EC,GAAG,KAAKmC,GAAG,KAAKD,GAAG,KAAI,SACjH,eAAC,KAAG,CAACnC,UAAU,0BAAyB,UACtC,eAAC,IAAG,CAACA,UAAU,+BAA8B,UAC3C,cAAC,IAAK,CAACA,UAAU,kBAAiB,SAAC,QACnC,cAAC,IAAU,CACTzD,QAASA,GACT/C,GAAG,yBACHQ,KAAI,uBAAkBuI,EAAC,eACvBlC,OAAQ,oBAAGC,EAAK,EAALA,MAAK,OACd,cAAC,IAAK,aAACxC,KAAK,OAAO0E,YAAY,MAAMrB,SAAU,SAACC,GAAUd,EAAMa,SAASC,EAAK,EAAGb,SAA4B,QAAnB,EAAA/D,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0BvG,aAAa,GAAUsE,GAAS,KAGpI,QAAnB,EAAA9D,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0BvG,YAAa,cAAC,IAAY,UAAqB,QAArB,EAAEQ,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0BvG,UAAU7B,aAE7F,eAAC,IAAG,CAAC6F,UAAU,+BAA8B,UAC3C,cAAC,IAAK,CAACA,UAAU,kBAAiB,SAAC,SACnC,cAAC,IAAU,CACTzD,QAASA,GACT/C,GAAG,yBACHQ,KAAI,uBAAkBuI,EAAC,UACvBlC,OAAQ,oBAAGC,EAAK,EAALA,MAAK,OACd,cAAC,IAAK,aAACxC,KAAK,OAAO0E,YAAY,OAAOC,QAAS,SAACC,GAAQf,GAAkB,oBAAqBe,EAAEb,OAAOhB,MAAO0B,EAAG,EAAGpB,SAAU,SAACC,GAAUd,EAAMa,SAASC,EAAK,EAAGb,SAA4B,QAAnB,EAAA/D,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0BvI,QAAQ,GAAUsG,GAAS,KAG/M,QAAnB,EAAA9D,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0BvI,OAAQ,cAAC,IAAY,UAAqB,QAArB,EAAEwC,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0BvI,KAAKG,aAEnF,eAAC,IAAG,CAAC6F,UAAU,+BAA8B,UAC3C,cAAC,IAAK,CAACA,UAAU,kBAAiB,SAAC,WACnC,cAAC,IAAU,CACTzD,QAASA,GACT/C,GAAG,6BACHQ,KAAI,uBAAkBuI,EAAC,mBACvBlC,OAAQ,oBAAGC,EAAK,EAALA,MAAK,OACd,cAAC,IAAK,aAACxC,KAAK,SAAS0E,YAAY,SAASC,QAAS,SAACC,GAAQf,GAAkB,gBAAiBe,EAAEb,OAAOhB,MAAO0B,EAAG,EAAGpB,SAAU,SAACC,GAAUd,EAAMa,SAASC,EAAK,EAAGb,SAA4B,QAAnB,EAAA/D,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0BtI,iBAAiB,GAAUqG,GAAS,KAGxN,QAAnB,EAAA9D,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0BtI,gBAAiB,cAAC,IAAY,UAAqB,QAArB,EAAEuC,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0BtI,cAAcE,aAErG,eAAC,IAAG,CAAC6F,UAAU,+BAA8B,UAC3C,cAAC,IAAK,CAACA,UAAU,kBAAiB,SAAC,UACnC,cAAC,IAAU,CACTzD,QAASA,GACT/C,GAAG,qBACHQ,KAAI,uBAAkBuI,EAAC,WACvBlC,OAAQ,oBAAGC,EAAK,EAALA,MAAK,OACd,cAAC,IAAK,aAACxC,KAAK,QAAQ0E,YAAY,QAAQC,QAAS,SAACC,GAAQf,GAAkB,QAASe,EAAEb,OAAOhB,MAAO0B,EAAG,EAAGpB,SAAU,SAACC,GAAUd,EAAMa,SAASC,EAAK,EAAGb,SAA4B,QAAnB,EAAA/D,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0BlI,SAAS,GAAUiG,GAAS,KAGtM,QAAnB,EAAA9D,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0BlI,QAAS,cAAC,IAAY,UAAqB,QAArB,EAAEmC,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0BlI,MAAMF,aAErF,eAAC,IAAG,CAAC6F,UAAU,+BAA8B,UAC3C,cAAC,IAAK,CAACA,UAAU,kBAAiB,SAAC,gBACnC,cAAC,IAAU,CACTzD,QAASA,GACT/C,GAAG,2BACHQ,KAAI,uBAAkBuI,EAAC,iBACvBlC,OAAQ,oBAAGC,EAAK,EAALA,MAAK,OACd,cAAC,IAAK,aAACxC,KAAK,OAAO0E,YAAY,cAAcrB,SAAU,SAACC,GAAUd,EAAMa,SAASC,EAAK,EAAGb,SAA4B,QAAnB,EAAA/D,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0B1G,eAAe,GAAUyE,GAAS,KAG9I,QAAnB,EAAA9D,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0B1G,cAAe,cAAC,IAAY,UAAqB,QAArB,EAAEW,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0B1G,YAAY1B,aAEjG,eAAC,IAAG,CAAC6F,UAAU,+BAA8B,UAC3C,cAAC,IAAK,CAACA,UAAU,kBAAiB,SAAC,YACnC,cAAC,IAAU,CACTzD,QAASA,GACT/C,GAAG,2BACHQ,KAAI,uBAAkBuI,EAAC,iBACvBlC,OAAQ,oBAAGC,EAAK,EAALA,MAAK,OACd,cAAC,IAAK,aAACxC,KAAK,OAAO0E,YAAY,SAASrB,SAAU,SAACC,GAAUd,EAAMa,SAASC,EAAK,EAAGb,SAA4B,QAAnB,EAAA/D,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0BzG,eAAe,GAAUwE,GAAS,KAGzI,QAAnB,EAAA9D,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0BzG,cAAe,cAAC,IAAY,UAAqB,QAArB,EAAEU,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0BzG,YAAY3B,aAEjG,eAAC,IAAG,CAAC6F,UAAU,+BAA8B,UAC3C,cAAC,IAAK,CAACA,UAAU,kBAAiB,SAAC,QACnC,cAAC,IAAU,CACTzD,QAASA,GACT/C,GAAG,yBACHQ,KAAI,uBAAkBuI,EAAC,eACvBlC,OAAQ,oBAAGC,EAAK,EAALA,MAAK,OACd,cAAC,IAAK,aAACxC,KAAK,OAAO0E,YAAY,MAAMrB,SAAU,SAACC,GAAUd,EAAMa,SAASC,EAAK,EAAGb,SAA4B,QAAnB,EAAA/D,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0BxG,aAAa,GAAUuE,GAAS,KAGpI,QAAnB,EAAA9D,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0BxG,YAAa,cAAC,IAAY,UAAqB,QAArB,EAAES,GAAOb,oBAAY,OAAK,QAAL,EAAnB,EAAsB4G,UAAE,WAAL,EAAnB,EAA0BxG,UAAU5B,aAE7F,eAAC,IAAG,CAAC6F,UAAU,+BAA8B,UAC3C,cAAC,IAAK,CAACA,UAAU,kBAAiB,SAAC,YACnC,qBAAKA,UAAU,iCAAgC,SAC7C,cAAC,IAAU,CACTzD,QAASA,GACT/C,GAAG,6BACHQ,KAAI,uBAAkBuI,EAAC,mBACvBlC,OAAQ,gBAAGC,EAAK,EAALA,MAAK,OACd,cAAC,IAAK,yBAACxC,KAAK,SAAS+C,MAAOP,EAAMO,MAAO4B,QAAS,SAACrB,GAAUO,GAAkB,gBAAiBP,EAAKmB,EAAG,GAAOjC,GAAK,IAAEqC,eAAgBrC,EAAMO,QAAS,SAM3JtE,GAAQuC,YAAYnD,aAAauB,OAAS,GAC1C,qBAAK8C,UAAU,6FAA4F,SACzG,cAAC,IAAC,CAACE,KAAM,GAAIF,UAAU,iBAAiB4C,QAAS,WAxUvE7F,GAwU0FwF,EAAG,cAxGzED,EAAK9I,GA8GT,IAGR,cAAC,KAAG,CAACwG,UAAU,OAAM,SACnB,cAAC,IAAG,CAACC,GAAG,KAAKmC,GAAG,IAAID,GAAG,IAAInC,UAAU,OAAM,SACzC,eAAC,IAAM,CAAC6C,MAAM,UAAU3C,KAAK,KAAKF,UAAU,cAAc4C,QAAS,kBAAMhE,IAAS,EAAC,UACjF,cAAC,IAAI,CAACsB,KAAM,GAAIF,UAAU,UAAe,IAAC,sBAAMA,UAAU,eAAc,SAAC,uBAOjF,oBAAIA,UAAU,oBAEd,eAAC,IAAQ,CAACA,UAAU,OAAM,UACP,OAAhBpH,IACC,eAAC,KAAG,WACF,cAAC,IAAG,CAACuJ,GAAG,IAAInC,UAAU,eAAc,SACjCQ,GAAa,WAAY,sBAAuBnI,MAEnD,cAAC,IAAG,CAAC8J,GAAG,IAAInC,UAAU,eAAc,SACjCL,GAAO,QAAS,cAKvB,eAAC,KAAG,WACF,cAAC,IAAG,CAACwC,GAAG,IAAInC,UAAU,eAAc,SACjB,OAAhBpH,GAAuB4H,GAAa,kBAAmB,gBAAiBzI,GAAgB4H,GAAO,kBAAmB,wBAErH,cAAC,IAAG,CAACwC,GAAG,IAAInC,UAAU,eAAc,SACjCQ,GAAa,WAAY,WAAYrI,IAAiB,WAK7D,eAAC,IAAQ,CAAC6H,UAAU,OAAM,UACxB,oBAAIA,UAAU,6BAA4B,SAAC,oBAC3C,eAAC,KAAG,WACF,cAAC,IAAG,CAACmC,GAAG,IAAInC,UAAU,eAAc,SACjCL,GAAO,gBAAiB,yBAE3B,cAAC,IAAG,CAACwC,GAAG,IAAInC,UAAU,eAAc,SACjCL,GAAO,gBAAiB,4BAI7B,eAAC,KAAG,WACF,cAAC,IAAG,CAACwC,GAAG,IAAInC,UAAU,eAAc,SACjCL,GAAO,OAAQ,wBAElB,cAAC,IAAG,CAACwC,GAAG,IAAInC,UAAU,eAAc,SACjB,OAAhBpH,GAAuB4H,GAAa,QAAS,sBAAuBzI,GAAgB4H,GAAO,QAAS,kCAGzG,eAAC,KAAG,WACF,cAAC,IAAG,CAACwC,GAAG,IAAInC,UAAU,eAAc,SACjCQ,GAAa,UAAW,wBAAyBvI,GAAgB,KAEpE,cAAC,IAAG,CAACkK,GAAG,IAAInC,UAAU,eAAc,SACjCL,GAAO,WAAY,gCAK5B,cAAC,IAAI,UACH,cAAC,IAAQ,UACP,sBAAKK,UAAU,wBAAuB,UACpC,cAAC,IAAM,CAAC6C,MAAM,UAAUC,SAAO,EAACC,IAAKC,IAAMC,GAAG,gBAAe,SAAC,WAG9D,cAAC,IAAM,CAACJ,MAAM,UAAU/E,KAAK,SAAQ,SAAE,oBASrD,EC/iBeoF,UAZG,WAChB,OACE,qBAAKlD,UAAU,sBAAqB,SAClC,cAAC,KAAG,CAACA,UAAU,cAAa,SAC1B,cAAC,IAAG,CAACmD,GAAI,GAAIhB,GAAI,GAAIlC,GAAI,GAAG,SAC1B,cAAC,EAAO,SAKlB,C,qGCPMmD,EAAW,SAAAC,GAAU,IAAD,EAChBC,EAA6DD,EAA7DC,SAAUtB,EAAmDqB,EAAnDrB,SAAUC,EAAyCoB,EAAzCpB,OAAQjC,EAAiCqD,EAAjCrD,UAAW+C,EAAsBM,EAAtBN,IAAKQ,EAAiBF,EAAjBE,aAE9CC,EAAMT,EAEZ,OACE,eAACS,EAAG,CAACxD,UAAWG,IAAW,aAAW,mBAAKH,EAAYA,GAAS,qBAAQgC,GAAQ,IAAI,UACjFsB,EACAtB,EACC,eAAC,WAAQ,WACP,iCACEhC,UAAU,WACLgC,GAAYuB,EAAe,CAAEE,MAAO,CAAEpM,gBAAiBkM,IAAmB,CAAC,IAGlF,qBAAKvD,UAAU,SAAQ,SAAEiC,OAEzB,OAGV,EAEemB,MAEfA,EAASM,aAAe,CACtBX,IAAK,MACLf,UAAU,EACVC,OAAQ,cAAC,KAAO,CAACY,MAAM,Y,8CC5BVc,IAZU,WACvB,OACE,qBAAK3D,UAAU,mBAAkB,SAC/B,sBAAKA,UAAU,UAAS,UACtB,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,qBACf,qBAAKA,UAAU,yBAIvB,C","file":"static/js/64.7ca6be53.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect, Fragment } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\nimport classnames from 'classnames'\nimport { useDispatch, useSelector } from 'react-redux'\n// ** Custom Components\nimport { addClient, addContactInfo } from '../store'\nimport axios from '@src/configs/axios/axiosConfig'\nimport { X, Plus } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n// ** Reactstrap Imports\nimport { Row, Col, Card, Button, CardBody, Label, Input, FormFeedback, CardTitle, CardHeader } from 'reactstrap'\n\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { orgUserId, activeOrganization } from '@src/helper/sassHelper'\nimport moment from 'moment'\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\nconst AddCard = () => {\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const colourStyles = {\n    multiValue: (styles, { }) => {\n\n      return {\n        ...styles,\n        backgroundColor: '#7367f0'\n      }\n    }\n  }\n\n  // ** States\n  const phoneRegExp = /^[0-9\\- ]{10,10}$/\n  const zipcodeExp = /^[0-9\\- ]{6,6}$/\n  const navigate = useNavigate({})\n  const dispatch = useDispatch()\n  const [businessEntityOptions, setBusinessEntityOptions] = useState([])\n  const [userOptions, setUserOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [countryOptions, setCountryOptions] = useState([])\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [gstRegistrationTypeOptions, setGstRegistrationTypeOptions] = useState([])\n  const [clientInfo, setClientInfo] = useState([])\n  const [contactId, setConatctId] = useState(null)\n  const [countryCode, setCountryCode] = useState(activeOrg.countryshortname)\n  const store = useSelector(state => state.client)\n\n  const schema = yup.object().shape({\n    createdBy: yup.string().default(userId),\n    organization: yup.string().default(activeOrg.id),\n    referredby: yup.string().nullable().default(''),\n    employeeList: yup.array().default([]),\n    createFolder: yup.boolean().default(true),\n    contactPersonName: yup.string().required(\"Please Enter a Contact Person Name\"),\n    registrationNo: yup.string().default('').nullable(),\n    name: yup.string().required(\"Please Enter Business Name.\").default(''),\n    contactNumber: yup.string().default('').matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true }).nullable(),\n    email: yup.string().email(\"Please Enter valid Email\").nullable().default(''),\n    countryCode: yup.string().default(activeOrg.countryshortname),\n    organizationName: yup.string().default(activeOrg.name),\n    businessEntity: yup.string().when(\"countryCode\", { is: (countryCode) => countryCode === 'IN', then: yup.string().required('Please Select Business Entity') }),\n    gstRegistrationType: yup.string().nullable(),\n    gstin: yup.string().nullable(),\n    placeOfSupply: yup.string().default(''),\n    placeOfSupplyOther: yup.string().default(activeOrg.stateothers || ''),\n    currency: yup.string().default(activeOrg.currencyid).required('Please select Currency'),\n    billingCountryCode: yup.string().default(''),\n    billingAddressLine1: yup.string().nullable(),\n    billingAddressLine2: yup.string().nullable(),\n    billingAddressCity: yup.string().nullable(),\n    billingAddressState: yup.string().default(''),\n    billingAddressStateOthers: yup.string().default(activeOrg.stateothers || ''),\n    billingAddressCountry: yup.string().default(activeOrg.countryid).required('Please select Country'),\n    billingAddressZip: yup.string().matches(zipcodeExp, { message: 'Zip Code is not valid', excludeEmptyString: true }).nullable(''),\n    contact_info: yup.array().of(\n      yup.object().shape({\n        createdBy: yup.string().default(userId),\n        name: yup.string().nullable(),\n        email: yup.string().email().nullable(),\n        designation: yup.string().nullable(),\n        adharnumber: yup.string().nullable(),\n        dinnumber: yup.string().nullable(),\n        pannumber: yup.string().nullable(),\n        contactNumber: yup.string().nullable().matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true })\n      })\n    )\n\n  })\n\n  const { handleSubmit, control, formState: { errors }, setError, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, append, remove } = useFieldArray({ name: 'contact_info', control })\n\n  const saveContactInfo = async (clientId) => {\n    if (clientInfo.length > 0) {\n      await clientInfo.forEach((obj, ind) => {\n        clientInfo[ind].contactId = clientId\n        if (obj.name === '' && obj.email === '') {\n          clientInfo.splice(ind, 1)\n        }\n      })\n      const rows = clientInfo\n      if (rows.length > 0) {\n        await dispatch(addContactInfo({ rows }))\n      }\n    }\n    navigate(`/clients/view/${clientId}`)\n  }\n\n  useEffect(() => {\n    if (store.clientErrors !== null) {\n      setBlock(false)\n      Object.keys(store.clientErrors).map((obj) => {\n        setError(obj, { type: 'custom', message: store.clientErrors[obj][0] })\n      })\n    }\n  }, [store.clientErrors])\n\n  const onSubmit = async (data) => {\n\n    setBlock(true)\n    const temp = data.contact_info || []\n    setClientInfo(predata => ([...predata, ...temp]))\n\n    data.createFolder = activeOrg.accesstoken?.expiry_date > moment().valueOf()\n    delete data.contact_info\n    data['employeeList'] = data.employeeList.map((oj) => oj.id)\n    const datatemp = await dispatch(addClient(data))\n    if (datatemp.payload.client === undefined) {\n      return false\n    } else {\n      setConatctId(datatemp.payload.client.id)\n    }\n\n  }\n\n  const addItem = (() => {\n    let primarytag = true\n    if (control._formValues.contact_info.length > 0) {\n      primarytag = false\n    }\n    append({ createdBy: userId, organizationId: activeOrg.id, contactId: 0, name: '', email: '', contactNumber: '', designation: '', primaryStatus: primarytag })\n  })\n\n  const removeItem = ind => {\n\n    remove(ind)\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown').then(response => {\n      const arr = response.data\n      setUserOptions(arr.organizationusers)\n    }).catch((err) => {\n      console.log(err)\n    })\n\n  }\n\n  const getBusineessEntity = () => {\n    axios.post('/businessentities/list').then(response => {\n      const arr = response.data\n      setBusinessEntityOptions(arr.businessentities)\n    })\n  }\n\n  const getCountries = () => {\n    axios.post('/countries/dropdown').then(response => {\n      const arr = response.data\n      setCountryOptions(arr.countries)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getCurrency = () => {\n    axios.post('/currencies/dropdown').then(response => {\n      const arr = response.data\n      setCurrencyOptions(arr.currencies)\n    })\n  }\n\n  const getGSTRegType = () => {\n    axios.post('/gstregistrationtypes/list').then(response => {\n      const arr = response.data\n      setGstRegistrationTypeOptions(arr.gstregistrationtypes)\n    })\n  }\n\n  const getRow = (fieldLabel, fieldName, reqflag = false, colFlag = true) => {\n    return (\n      <Row className='mb-0 mb-lg-1'>\n        <Label sm={colFlag ? '4' : '12'} size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm={colFlag ? '8' : '12'} >\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Row>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false, colFlag = true) => {\n    return (\n\n      <Row className='mb-0 mb-lg-1'>\n        <Label sm={colFlag ? '4' : '12'} size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName} >\n          {fieldLabel}\n        </Label>\n        <Col sm={colFlag ? '8' : '12'} >\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                classNamePrefix='select'\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n                onChange={val => {\n                  if (fieldName === 'billingAddressCountry') {\n                    console.log(val.shortname)\n                    setCountryCode(val.shortname)\n                    setValue('billingCountryCode', val.shortname)\n                  }\n                  return field.onChange(val.id)\n                }}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Row>\n\n    )\n  }\n\n  useEffect(() => {\n    if (contactId === null) {\n      getBusineessEntity()\n      getOrganizationUsers()\n      getCountries()\n      getCurrency()\n      getGSTRegType()\n      getStates()\n\n      addItem()\n    }\n\n    if (contactId !== null) {\n      saveContactInfo(contactId)\n    }\n\n  }, [clientInfo, contactId])\n\n  const setPrimaryDetails = (fieldName, value, index) => {\n\n    if (fieldName === 'primaryStatus' && value.target.checked) {\n      setValue('contactPersonName', control._formValues.contact_info[index].name)\n      setValue('contactNumber', control._formValues.contact_info[index].contactnumber)\n      setValue('email', control._formValues.contact_info[index].email)\n    } else {\n      if (control._formValues.contact_info[index].primaryStatus) {\n        if (fieldName === 'primaryStatus') {\n          setValue(fieldName, value.target.checked)\n        } else {\n          setValue(fieldName, value)\n        }\n      }\n    }\n  }\n\n  return (\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n\n        {Object.keys(errors).map((obj, k) => {\n          return <FormFeedback key={k}> {errors[obj]?.message}</FormFeedback>\n        })}\n\n\n        <Card className='invoice-preview-card'>\n          {/* Header */}\n          <CardHeader>\n            <CardTitle> Add Client</CardTitle>\n          </CardHeader>\n          <CardBody className='pb-0'>\n\n            <Row>\n              <Col md='4' className='mb-0 mb-lg-1'>\n                {getRow('Business Name', 'name', true, false)}\n              </Col>\n              <Col md='4' className='mb-0 mb-lg-1'>\n                {getSelectRow('Business Entity', 'businessEntity', businessEntityOptions, true, false)}\n              </Col>\n              <Col md='4' className='mb-0 mb-lg-1'>\n                {getRow('Registration No', 'registrationNo', false, false)}\n              </Col>\n            </Row>\n            <Row className=''>\n              <Col md='4' className='mb-0 mb-lg-1'>\n                <Label sm={'12'} lg='12' size='lg' className={classnames(`form-label`)} >\n                  Assign User\n                </Label>\n                <Col sm={'12'} lg='12' >\n                  <Controller\n                    control={control}\n                    name=\"employeeList\"\n                    id=\"employeeList\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.employeeList })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={userOptions}\n                        isMulti={true}\n                        value={value}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                        styles={colourStyles}\n                      />\n                    )}\n\n                  />\n                  {errors.employeeList && <FormFeedback className='text-danger'>{errors.employeeList?.message}</FormFeedback>}\n                </Col>\n              </Col>\n            </Row>\n            {/* {referredBy &&\n              <Row>\n                <Col md='4' className='mb-0 mb-lg-1'>\n                  {getRow('Referred By', 'referredby', false, false)}\n                </Col>\n              </Row>\n            } */}\n            {/* <Col md='4' className='mb-0 mb-lg-1'>\n                {getRow('Contact Person Name', 'contactPersonName', true, false)}\n              </Col>\n              <Col md='4' className='mb-0 mb-lg-1'>\n                {getRow('Mobile', 'contactNumber', true, false)}\n              </Col>\n              <Col md='4' className='mb-0 mb-lg-1'>\n                {getRow('Email', 'email', true, false)}\n              </Col> */}\n          </CardBody>\n          {/* /Header */}\n\n          <hr className='invoice-spacing' />\n          {errors.contact_info && <p className='text-danger ms-2'>{errors.contact_info?.message}</p>}\n          {/* Product Details */}\n          <CardBody className='invoice-padding invoice-product-details p-3'>\n            {fields.map((item, i) => (\n              <div key={item.id} className='repeater-wrapper'>\n                <Row >\n                  <Col className='d-lg-flex justify-content-between product-details-border position-relative' sm='12' lg='12' md='12' >\n                    <Row className='align-items-center p-75'>\n                      <Col className='p-50 col-6 col-lg-2 col-md-2' >\n                        <Label className='form-label mt-1'>PAN</Label>\n                        <Controller\n                          control={control}\n                          id='contact_info_pannumber'\n                          name={`contact_info[${i}].pannumber`}\n                          render={({ field }) => (\n                            <Input type='text' placeholder='PAN' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.pannumber && true} {...field} />\n                          )}\n                        />\n                        {errors.contact_info?.[i]?.pannumber && <FormFeedback>{errors.contact_info?.[i]?.pannumber.message}</FormFeedback>}\n                      </Col>\n                      <Col className='p-50 col-6 col-lg-2 col-md-2'>\n                        <Label className='form-label mt-1'>Name</Label>\n                        <Controller\n                          control={control}\n                          id='contact_info_firstName'\n                          name={`contact_info[${i}].name`}\n                          render={({ field }) => (\n                            <Input type='text' placeholder='Name' onInput={(e) => { setPrimaryDetails('contactPersonName', e.target.value, i) }} onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.name && true} {...field} />\n                          )}\n                        />\n                        {errors.contact_info?.[i]?.name && <FormFeedback>{errors.contact_info?.[i]?.name.message}</FormFeedback>}\n                      </Col>\n                      <Col className='p-50 col-6 col-lg-2 col-md-2'>\n                        <Label className='form-label mt-1'>Mobile</Label>\n                        <Controller\n                          control={control}\n                          id='contact_info_contactNumber'\n                          name={`contact_info[${i}].contactNumber`}\n                          render={({ field }) => (\n                            <Input type='number' placeholder='Mobile' onInput={(e) => { setPrimaryDetails('contactNumber', e.target.value, i) }} onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.contactNumber && true} {...field} />\n                          )}\n                        />\n                        {errors.contact_info?.[i]?.contactNumber && <FormFeedback>{errors.contact_info?.[i]?.contactNumber.message}</FormFeedback>}\n                      </Col>\n                      <Col className='p-50 col-6 col-lg-2 col-md-2'>\n                        <Label className='form-label mt-1'>Email</Label>\n                        <Controller\n                          control={control}\n                          id='contact_info_email'\n                          name={`contact_info[${i}].email`}\n                          render={({ field }) => (\n                            <Input type='email' placeholder='Email' onInput={(e) => { setPrimaryDetails('email', e.target.value, i) }} onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.email && true} {...field} />\n                          )}\n                        />\n                        {errors.contact_info?.[i]?.email && <FormFeedback>{errors.contact_info?.[i]?.email.message}</FormFeedback>}\n                      </Col>\n                      <Col className='p-50 col-6 col-lg-2 col-md-2'>\n                        <Label className='form-label mt-1'>Designation</Label>\n                        <Controller\n                          control={control}\n                          id='contact_info_designation'\n                          name={`contact_info[${i}].designation`}\n                          render={({ field }) => (\n                            <Input type='text' placeholder='Designation' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.designation && true} {...field} />\n                          )}\n                        />\n                        {errors.contact_info?.[i]?.designation && <FormFeedback>{errors.contact_info?.[i]?.designation.message}</FormFeedback>}\n                      </Col>\n                      <Col className='p-50 col-6 col-lg-2 col-md-2'>\n                        <Label className='form-label mt-1'>Aadhaar</Label>\n                        <Controller\n                          control={control}\n                          id='contact_info_adharnumber'\n                          name={`contact_info[${i}].adharnumber`}\n                          render={({ field }) => (\n                            <Input type='text' placeholder='Adhaar' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.adharnumber && true} {...field} />\n                          )}\n                        />\n                        {errors.contact_info?.[i]?.adharnumber && <FormFeedback>{errors.contact_info?.[i]?.adharnumber.message}</FormFeedback>}\n                      </Col>\n                      <Col className='p-50 col-6 col-lg-2 col-md-2'>\n                        <Label className='form-label mt-1'>DIN</Label>\n                        <Controller\n                          control={control}\n                          id='contact_info_dinnumber'\n                          name={`contact_info[${i}].dinnumber`}\n                          render={({ field }) => (\n                            <Input type='text' placeholder='DIN' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.dinnumber && true} {...field} />\n                          )}\n                        />\n                        {errors.contact_info?.[i]?.dinnumber && <FormFeedback>{errors.contact_info?.[i]?.dinnumber.message}</FormFeedback>}\n                      </Col>\n                      <Col className='p-50 col-6 col-lg-2 col-md-2'>\n                        <Label className='form-label mt-1'>Primary</Label>\n                        <div className='form-switch form-check-primary'>\n                          <Controller\n                            control={control}\n                            id='contact_info_primaryStatus'\n                            name={`contact_info[${i}].primaryStatus`}\n                            render={({ field }) => (\n                              <Input type='switch' value={field.value} onInput={(val) => { setPrimaryDetails('primaryStatus', val, i) }} {...field} defaultChecked={field.value} />\n                            )}\n                          />\n                        </div>\n                      </Col>\n                      {\n                        control._formValues.contact_info.length > 1 &&\n                        <div className='d-lg-flex width-50 justify-content-center border-start invoice-product-actions py-50 px-25'>\n                          <X size={18} className='cursor-pointer' onClick={() => { removeItem(i) }} />\n                        </div>\n                      }\n                    </Row>\n                  </Col>\n                </Row>\n              </div>\n            ))}\n\n            <Row className='mt-1'>\n              <Col sm='12' lg='2' md='2' className='px-0'>\n                <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                  <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                </Button>\n              </Col>\n            </Row>\n\n          </CardBody>\n\n          <hr className='invoice-spacing' />\n          {/* Product Details */}\n          <CardBody className='pb-0'>\n            {countryCode === 'IN' &&\n              <Row>\n                <Col md='6' className='mb-0 mb-lg-1'>\n                  {getSelectRow('GST Type', 'gstRegistrationType', gstRegistrationTypeOptions)}\n                </Col>\n                <Col md='6' className='mb-0 mb-lg-1'>\n                  {getRow('GSTIN', 'gstin')}\n\n                </Col>\n              </Row>\n            }\n            <Row>\n              <Col md='6' className='mb-0 mb-lg-1'>\n                {countryCode === 'IN' ? getSelectRow('Place of Supply', 'placeOfSupply', stateOptions) : getRow('Place of Supply', 'placeOfSupplyOther')}\n              </Col>\n              <Col md='6' className='mb-0 mb-lg-1'>\n                {getSelectRow('Currency', 'currency', currencyOptions, true)}\n              </Col>\n            </Row>\n          </CardBody>\n          {/* Invoice Total */}\n          <CardBody className='pt-0'>\n            <h4 className='text-primary mt-50 mt-lg-0'>Billing Address</h4>\n            <Row>\n              <Col md='6' className='mb-0 mb-lg-1'>\n                {getRow('Address Line1', 'billingAddressLine1')}\n              </Col>\n              <Col md='6' className='mb-0 mb-lg-1'>\n                {getRow('Address Line2', 'billingAddressLine2')}\n              </Col>\n            </Row>\n\n            <Row>\n              <Col md='6' className='mb-0 mb-lg-1'>\n                {getRow('City', 'billingAddressCity')}\n              </Col>\n              <Col md='6' className='mb-0 mb-lg-1'>\n                {countryCode === 'IN' ? getSelectRow('State', 'billingAddressState', stateOptions) : getRow('State', 'billingAddressStateOthers')}\n              </Col>\n            </Row>\n            <Row>\n              <Col md='6' className='mb-0 mb-lg-1'>\n                {getSelectRow('Country', 'billingAddressCountry', countryOptions, true)}\n              </Col>\n              <Col md='6' className='mb-0 mb-lg-1'>\n                {getRow('Zip Code', 'billingAddressZip')}\n              </Col>\n            </Row>\n          </CardBody>\n        </Card>\n        <Card>\n          <CardBody>\n            <div className='modal-footer border-0'>\n              <Button color='warning' outline tag={Link} to='/clients/list'>\n                Cancel\n              </Button>\n              <Button color='primary' type=\"submit\" >\n                Save\n              </Button>\n            </div>\n          </CardBody>\n        </Card>\n      </form >\n    </UILoader>\n  )\n}\n\nexport default AddCard\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ClientAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <AddCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ClientAdd\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}