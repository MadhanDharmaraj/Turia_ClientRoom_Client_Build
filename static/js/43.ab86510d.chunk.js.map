{"version":3,"sources":["views/apps/taskworkflow/view/TimeSheet.js","views/apps/taskworkflow/view/Conversation.js","views/apps/taskworkflow/view/UserInfoCard.js","views/apps/taskworkflow/view/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["userId","orgUserId","dateFormattime","value","length","moment","format","unix","hoursFormat","row","decimalTimeString","totalhours","decimalTime","parseFloat","hours","Math","floor","minutes","isNaN","Timesheets","withReactContent","Swal","tabId","selectedTaskWorkFlow","id","useParams","useState","dataArr","setData","currentPage","setCurrentPage","startTime","setStartTime","endTime","setEndTime","hourlyRate","setHourlyRate","startOf","timeSheetDate","setTimeSheetDate","valueOf","timeSheetTempDate","setTimeSheetTempDate","total","setTotal","formModal","setFormModal","eventName","setEventName","selectedTimeSheet","setSelectedTimesheet","getTimeSheetList","page","axios","post","taskId","taskid","taskWorkFlowId","then","res","data","tasktimesheets","deleteTimeSheet","updatedBy","MySwal","handlePagination","selected","cancellModal","useEffect","organizationusers","hourlyrate","catch","err","console","log","CustomPagination","count","Number","ceil","nextLabel","breakLabel","previousLabel","pageCount","activeClassName","breakClassName","pageClassName","breakLinkClassName","nextLinkClassName","pageLinkClassName","nextClassName","previousLinkClassName","previousClassName","onPageChange","forcePage","containerClassName","className","color","onClick","size","map","k","username","createdon","starttime","endtime","openEditModal","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","result","deletefn","isOpen","toggle","onChange","date","dateStr","options","altInput","altFormat","dateFormat","classnames","type","e","target","set","split","userid","start","end","duration","diff","asHours","amount","createdBy","onSubmit","activeOrgId","activeOrganizationid","fileClassNames","image","pdf","xlsx","xls","docx","doc","CommentBox","renderClient","initials","content","charAt","block","setBlock","Loader","domInputRef","useRef","description","setDescription","filesArr","setFilesArr","attachmentIds","setAttachmentsId","fileUploadProgress","setProgress","commentsData","setCommentsData","getList","workflowId","comments","configUpload","headers","onUploadProgress","round","loaded","uploadFiles","files","formData","FormData","forEach","file","key","append","name","attachment_ids","toast","error","position","useDropzone","multiple","onDrop","rejectedFiles","acceptedFiles","obj","extension","pop","push","getRootProps","getInputProps","handleRemoveFile","index","filtered","filter","i","splice","RenderFile","md","substr","blocking","loader","placeholder","toolbarClassName","wrapperClassName","editorState","onEditorStateChange","val","des","draftToHtml","convertToRaw","getCurrentContent","editorClassName","organizationId","current","innerHTML","submitComment","item","editFlag","comment","dangerouslySetInnerHTML","__html","replace","href","driveid","originalfilename","UserInfoCard","dispatch","useDispatch","active","setActive","timerFlag","setTimerFlag","store","useSelector","state","taskworkflow","toggleTab","tab","startTaskTimer","existStatus","taskstatus","startTimer","localStorage","setItem","JSON","stringify","payload","stopTaskTimer","temp","parse","getItem","toDate","end_timestamp","endTimer","removeItem","updateTaskStatus","status","success","setPopoverOpen","setPopoverOpen1","updateStatusRefresh","postComment","selectedTaskTimer","servicename","responsive","bordered","colSpan","timesheetFlag","disabled","outline","tag","Link","to","parseInt","progressstatus","clientname","rowSpan","width","users","user","pills","Can","I","a","activeTab","Conversation","TimeSheet","TaskView","getTaskWorkFlow","undefined","xl","lg","UILoader","props","children","overlayColor","Tag","style","backgroundColor","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/43.ab86510d.chunk.js","sourcesContent":["// ** Reactstrap Imports\nimport { Button, Card, Col, Input, Label, Modal, ModalBody, ModalHeader, Row, Table } from 'reactstrap'\n\n// ** Third Party Components\nimport { Edit, Plus, Trash } from 'react-feather'\n\nimport axios from '@src/configs/axios/axiosConfig'\n// ** Styles\nimport classnames from 'classnames'\nimport Flatpickr from 'react-flatpickr'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\nimport { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport moment from 'moment'\nimport ReactPaginate from 'react-paginate'\nimport { orgUserId } from '@src/helper/sassHelper'\nconst userId = orgUserId()\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\n\nconst dateFormattime = (value) => {\n  if (value.length === 13) {\n    return moment(value, 'x').format(\"h:m a\")\n  } else {\n    return moment.unix(value).format(\"h:m a\")\n  }\n}\n\nconst dateFormat = (value) => {\n  if (value.length === 13) {\n    return moment(value, 'x').format(\"Y MMM, DD\")\n  } else {\n    return moment.unix(value).format(\"Y MMM, DD\")\n  }\n}\n\nconst hoursFormat = (row) => {\n\n  const decimalTimeString = row.totalhours\n  let decimalTime = parseFloat(decimalTimeString)\n  decimalTime = decimalTime * 60 * 60\n  let hours = Math.floor((decimalTime / (60 * 60)))\n  decimalTime = decimalTime - (hours * 60 * 60)\n  let minutes = Math.floor((decimalTime / 60))\n\n  if (hours < 10) {\n    hours = `0${hours}`\n  }\n  if (minutes < 10) {\n    minutes = `0${minutes}`\n  }\n\n  return (`${isNaN(hours) ? '00' : hours}Hrs : ${isNaN(minutes) ? '00' : minutes}Mins`)\n\n}\nconst MySwal = withReactContent(Swal)\nconst Timesheets = ({ tabId, selectedTaskWorkFlow }) => {\n\n  const { id } = useParams()\n  const [dataArr, setData] = useState([])\n  const [currentPage, setCurrentPage] = useState(1)\n\n  const [startTime, setStartTime] = useState()\n  const [endTime, setEndTime] = useState()\n  const [hourlyRate, setHourlyRate] = useState(0)\n  const [timeSheetDate, setTimeSheetDate] = useState(moment().startOf('day').unix())\n  const [timeSheetTempDate, setTimeSheetTempDate] = useState(moment().startOf('day').valueOf())\n  const [total, setTotal] = useState(0)\n  const [formModal, setFormModal] = useState(false)\n  const [eventName, setEventName] = useState('Add')\n  const [selectedTimeSheet, setSelectedTimesheet] = useState(null)\n  const rowsPerPage = 15\n\n\n  const getTimeSheetList = async (page) => {\n\n    await axios.post('/tasktimesheets/list', { taskId: selectedTaskWorkFlow.taskid, taskWorkFlowId: id, page })\n      .then((res) => {\n        setData(res.data.tasktimesheets.tasktimesheets)\n        setTotal(res.data.tasktimesheets.total)\n      })\n  }\n\n  const deleteTimeSheet = async (id) => {\n\n    await axios.post('/tasktimesheets/delete', { id, updatedBy: userId })\n      .then(() => {\n        getTimeSheetList(currentPage)\n      })\n  }\n\n  const MySwal = withReactContent(Swal)\n\n  const deletefn = (id) => {\n\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await deleteTimeSheet(id)\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'TImesheet has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n      }\n    })\n  }\n\n  const handlePagination = async page => {\n    setCurrentPage(page.selected + 1)\n    getTimeSheetList(page.selected + 1)\n  }\n\n  const cancellModal = () => {\n    setFormModal(false)\n    setEventName('Add')\n    setSelectedTimesheet(null)\n  }\n\n  const onSubmit = () => {\n    const starttime = moment(timeSheetTempDate, 'x').set('hour', startTime.split(':')[0]).set('minutes', startTime.split(':')[1]).valueOf()\n    const endtime = moment(timeSheetTempDate, 'x').set('hour', endTime.split(':')[0]).set('minutes', endTime.split(':')[1]).valueOf()\n    const userid = userId\n    const start = moment(timeSheetTempDate, 'x').set('hour', startTime.split(':')[0]).set('minutes', startTime.split(':')[1])\n    const end = moment(timeSheetTempDate, 'x').set('hour', endTime.split(':')[0]).set('minutes', endTime.split(':')[1])\n    const duration = moment.duration(end.diff(start))\n    const hours = duration.asHours()\n    const amount = hourlyRate * hours\n\n    axios.post('/tasktimesheets/manualentry', {taskWorkFlowId: selectedTaskWorkFlow?.id,  timeSheetDate: timeSheetTempDate, id: selectedTimeSheet?.id, createdBy: userId, starttime, endtime, userid, amount, hourlyRate, totalhours: hours, taskId: selectedTaskWorkFlow?.taskid })\n      .then(() => {\n        getTimeSheetList(currentPage)\n        cancellModal()\n      })\n      .catch(() => {\n\n      })\n  }\n\n  const getEmployeeDet = () => {\n    axios.post('/organizationusers/getjobinfo', { id: userId })\n      .then((res) => {\n        setHourlyRate(res.data.organizationusers.hourlyrate || 0)\n      }).catch((err) => {\n        console.log(err)\n      })\n  }\n\n  useEffect(async () => {\n    if (tabId === 'timesheets') {\n      getTimeSheetList(currentPage)\n      getEmployeeDet()      \n    }\n  }, [tabId])\n\n  const CustomPagination = () => {\n    const count = Number(Math.ceil(total / rowsPerPage))\n\n    return (\n      <ReactPaginate\n        nextLabel=''\n        breakLabel='...'\n        previousLabel=''\n        pageCount={count || 1}\n        activeClassName='active'\n        breakClassName='page-item'\n        pageClassName={'page-item'}\n        breakLinkClassName='page-link'\n        nextLinkClassName={'page-link'}\n        pageLinkClassName={'page-link'}\n        nextClassName={'page-item next'}\n        previousLinkClassName={'page-link'}\n        previousClassName={'page-item prev'}\n        onPageChange={page => handlePagination(page)}\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        containerClassName={'pagination react-paginate justify-content-end p-1'}\n      />\n    )\n  }\n\n  const openEditModal = (row) => {\n    setSelectedTimesheet(row)\n    setTimeSheetDate(moment(row.createdon, 'x').format('MMM DD, Y'))\n    setStartTime(moment(row.starttime, 'x').format('HH:mm'))\n    setEndTime(moment(row.endtime, 'x').format('HH:mm'))\n    setFormModal(true)\n    setEventName('Edit')\n  }\n\n  return (\n    <Card className='px-2'>\n      <div className='react-dataTable user-view-account-projects'>\n        <Col className='d-flex justify-contents-between p-2'>\n          <Col>\n            <h4>Time Sheet List</h4>\n          </Col>\n          <Button color='primary' onClick={() => setFormModal(!formModal)} >\n            <Plus size={14} /> {eventName} Logs Manually\n          </Button>\n        </Col>\n\n        <Table className='table table-hover table-bordered px-2'>\n          <thead>\n            <tr>\n              <th>User</th>\n              <th>Date</th>\n              <th>Start Time</th>\n              <th>End Time</th>\n              <th>Time Taken (HH : MM)</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              dataArr.map((row, k) => {\n                return (<tr key={k}>\n                  <td>{row.username}</td>\n                  <td>{dateFormat(row.createdon)}</td>\n                  <td>{dateFormattime(row.starttime)}</td>\n                  <td>{(row.endtime !== null ? dateFormattime(row.endtime) : '-')}</td>\n                  <td>{hoursFormat(row || '0')}</td>\n                  <td>\n                    <Col className='d-flex'>\n                      <Edit size={14} className='me-1' onClick={() => openEditModal(row)} />\n                      <Trash size={14} onClick={() => { deletefn(row.id) }} />\n                    </Col>\n                  </td>\n                </tr>\n                )\n              })\n            }\n          </tbody>\n        </Table>\n        <CustomPagination />\n\n        <Modal isOpen={formModal} toggle={() => setFormModal(!formModal)} className='modal-dialog-centered'>\n          <ModalHeader toggle={() => setFormModal(!formModal)}>Add Timesheet Log</ModalHeader>\n          <ModalBody>            \n            <Row>\n              <Label size='lg' className='form-label required'>Date</Label>\n              <Col>\n                <Flatpickr\n                  onChange={(date, dateStr) => { setTimeSheetTempDate(moment.unix(dateStr).startOf('day').valueOf()) }}\n                  options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                  value={timeSheetDate}\n                  className={classnames('due-date-picker')} />\n              </Col>\n            </Row>\n            <Row>\n              <Label size='lg' className='form-label required'>Star Time</Label>\n              <Col><Input type='time' value={startTime} onChange={(e) => { setStartTime(e.target.value) }} /></Col>\n\n              <Label size='lg' className='form-label required'>End Time</Label>\n              <Col>\n                <Input type='time' value={endTime} onChange={(e) => { setEndTime(e.target.value) }} />\n              </Col>\n\n            </Row>\n            <Row className='d-flex justify-content-between mt-1'>\n              <Col>\n              </Col>\n              <Col>\n                <Button color='warning' onClick={() => { cancellModal() }}>Cancel</Button>\n                <Button color='primary' className='ms-1' onClick={() => { onSubmit() }}>Submit</Button>\n              </Col>\n            </Row>\n          </ModalBody>\n\n        </Modal>\n\n      </div>\n    </Card>\n  )\n}\n\nexport default Timesheets\n","import { useEffect, useState, Fragment, useRef } from 'react'\nimport { Row, Input, Button, Col, Progress, ListGroupItem } from 'reactstrap'\nimport { Paperclip, X } from 'react-feather'\nimport axios from '@src/configs/axios/axiosConfig'\nimport { orgUserId, activeOrganizationid } from '@src/helper/sassHelper'\nimport { useDropzone } from 'react-dropzone'\nimport Avatar from '@src/@core/components/avatar'\nconst userId = orgUserId()\nconst activeOrgId = activeOrganizationid()\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nimport { Editor } from 'react-draft-wysiwyg'\nimport draftToHtml from 'draftjs-to-html'\nimport { convertToRaw } from 'draft-js'\nimport '@styles/react/libs/editor/editor.scss'\n\n// ** Timeline \nconst fileClassNames = {\n  image: \"ui-attachment--image\",\n  pdf: \"ui-attachment--pdf\",\n  xlsx: \"ui-attachment--excel\",\n  xls: \"ui-attachment--excel\",\n  docx: \"ui-attachment--docx\",\n  doc: \"ui-attachment--docx\"\n}\n\nimport toast from 'react-hot-toast'\nimport moment from 'moment'\nimport { useParams } from 'react-router-dom'\n\nconst CommentBox = ({ selectedTaskWorkFlow, tabId }) => {\n\n\n  const {id} = useParams()\n  const renderClient = row => {\n\n    return (\n      <Avatar\n        initials\n        className='me-1'\n        color={'light-primary'}\n        content={row?.username?.charAt(0) || 'T'}\n      />\n    )\n\n  }\n  const dateformat = (val) => {\n\n    return moment(val, 'x').format('YYYY, MMM-D h:m A')\n\n  }\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const domInputRef = useRef(null)\n  const [description, setDescription] = useState('')\n  const [filesArr, setFilesArr] = useState([])\n  const [data, setData] = useState('')\n  const [attachmentIds, setAttachmentsId] = useState([])\n  const [fileUploadProgress, setProgress] = useState(0)\n  const [commentsData, setCommentsData] = useState([])\n  const getList = () => {\n    axios.post('/comments/list', { workflowId: id }).then((res) => {\n      setCommentsData(res.data.comments)\n    }).catch(() => {\n\n    })\n  }\n\n\n  const submitComment = () => {\n    if (description === '' && attachmentIds.length === 0) {\n      return false\n    }\n    const obj = {\n      workflowId: id,\n      taskId: selectedTaskWorkFlow.taskid,\n      description,\n      createdBy: userId,\n      organizationId: activeOrgId,\n      attachmentIds\n    }\n    setData('')\n    setBlock(true)\n    axios.post('/comments/add', obj)\n      .then(() => {\n        setFilesArr([])\n        getList()\n        setProgress(0)\n        setAttachmentsId([])\n        setBlock(false)\n        if (domInputRef.current) {\n          domInputRef.current.innerHTML = ''\n        }\n      })\n      .catch((err) => { console.log(err); setBlock(false) })\n\n  }\n\n  const configUpload =\n  {\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    },\n    onUploadProgress: data => {\n      //Set the progress value to show the progress bar\n      setProgress(Math.round((100 * data.loaded) / data.total))\n    }\n  }\n\n  const uploadFiles = (files) => {\n\n    setBlock(true)\n    const formData = new FormData()\n    files.forEach((file, key) => {\n      formData.append(`files[${key}]`, file)\n    })\n    formData.append('id', selectedTaskWorkFlow.taskid)\n    formData.append('workflowname', selectedTaskWorkFlow.name)\n    formData.append('organizationId', activeOrgId)\n    formData.append('createdBy', userId)\n\n    axios.post('/google/taskworkflowfolders', formData, configUpload).then((res) => {\n      setAttachmentsId([...attachmentIds, ...res.data.attachment_ids])\n      setBlock(false)\n    }).catch(() => {\n      toast.error('Upload Failed', { position: 'bottom-right' })\n      setBlock(false)\n    })\n  }\n\n  const { getRootProps, getInputProps } = useDropzone({\n    multiple: true,\n    onDrop: async (files, rejectedFiles) => {\n\n      const acceptedFiles = []\n      files.forEach(obj => {\n        obj.extension = obj.name.split('.').pop()\n        acceptedFiles.push(obj)\n      })\n      if (rejectedFiles.length) {\n        toast.error('You can only upload image Files!.')\n      } else {\n        await uploadFiles(acceptedFiles)\n        setFilesArr([...filesArr, ...acceptedFiles])\n      }\n    }\n  })\n\n  const handleContentEditable = (val) => {\n    const des = draftToHtml(convertToRaw(val.getCurrentContent()))\n    setDescription(des)\n\n    setData(val)\n  }\n\n  const handleRemoveFile = (file, index) => {\n    const uploadedFiles = filesArr\n    const filtered = uploadedFiles.filter(i => i.name !== file.name)\n    setAttachmentsId([...attachmentIds.splice(index, 1)])\n    setFilesArr(filtered)\n  }\n\n  const RenderFile = ({ filesArr }) => {\n\n    return (\n      <Row>\n        <Row className='d-flex p-1'>\n          {\n            filesArr.map((file, index) => {\n              return (<Col md={2} key={`${file.name}-${index}`} className={`d-flex align-items-center justify-content-between ui-attachment ${fileClassNames[file.extension] || fileClassNames['image']}`}>\n                <div className='file-details d-flex align-items-center'>\n                  <div>\n                    <p className='file-name mb-0 text-overflow-ellipsis'>{file.name.split('.')[0].length > 15 ? `${file.name.split('.')[0].substr(0, 15)}` : file.name}</p>\n                  </div>\n                </div>\n                <X size={14} className='cursor-pointer' onClick={() => handleRemoveFile(file, index)} />\n              </Col>\n              )\n            })\n          }\n        </Row>\n      </Row>\n    )\n  }\n\n  useEffect(() => {\n    getList()\n  }, [tabId])\n\n  return (\n    <UILoader blocking={block} loader={<Loader />}>\n      <Col className='px-2'>\n        <Editor\n          placeholder='Message'\n          toolbarClassName='rounded-0'\n          wrapperClassName='toolbar-bottom mt-50'\n          editorState={data}\n          onEditorStateChange={handleContentEditable}\n          editorClassName='rounded-0 border-1'\n        />\n        <Col className='mt-md-50 ps-1'>\n          <input {...getInputProps()} />\n          <Button type='button' color='primary' size='sm' {...getRootProps({ className: 'dropzone me-1' })} >\n            <Paperclip size={14} className=''></Paperclip>\n          </Button>\n          <Button size='sm' color='primary' onClick={() => { submitComment() }}>Submit</Button>\n        </Col>\n        {fileUploadProgress > 0 && <Progress className='mt-md-50' color={fileUploadProgress < 100 ? 'primary' : 'success'} value={fileUploadProgress} />}\n        <RenderFile filesArr={filesArr} fileUploadProgress={fileUploadProgress} />\n      </Col>\n\n\n      {commentsData.map((item, k) => {\n        return (\n          <div className='d-flex align-items-start px-2' key={k}>\n            {renderClient(item)}\n            <div className='profile-user-info w-100'>\n              <div className='d-flex align-items-center justify-content-between'>\n                <h6 className='mb-0'>{item.username}</h6>\n                <span className='d-flex text-body'>\n                  <span className='text-sm text-body font-small-3 mt-25'>{dateformat(item.createdon)}</span>\n                </span>\n              </div>\n              {(!item.editFlag) &&\n                <Row className='mt-1'>\n\n                  <div className='white-space-wrap text-body '>\n                    {item.comment !== '' &&\n                      < span className='rounded-3 bg-light-primary chat-bubble'>\n                        <div dangerouslySetInnerHTML={{ __html: item.comment.replace(/(\\\\n)/g, \"\\n\") }}></div>\n                      </span>\n                    }\n                    <Row>\n                      {\n                        item?.files?.map((file, k) => {\n                          return (\n                            <Col md={'2'} key={k} className='file-details d-flex align-items-center cursor-pointer'>\n                              <ListGroupItem className={`col-12 d-flex mb-1 align-items-center ui-attachment ${fileClassNames[file.extension] || fileClassNames['image']}`}>\n                                <a target='_blank' className='file-name text-overflow-ellipsis' href={`http://docs.google.com/fileview?id=${file.driveid}&hl=en&pid=explorer&efh=false&a=v&chrome=false&embedded=true`}>{file.originalfilename.split('.')[0].length > 15 ? `${file.originalfilename.split('.')[0].substr(0, 15)}.${file.extension}` : file.originalfilename}</a>\n                              </ListGroupItem>\n                            </Col>\n                          )\n                        })\n                      }\n                    </Row>\n                  </div>\n                </Row>\n              }\n            </div>\n          </div>\n        )\n      })\n      }\n    </UILoader>\n  )\n}\n\nexport default CommentBox","// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\nimport { Link, useParams } from 'react-router-dom'\n// ** Reactstrap Imports\nimport { Can } from '@src/utility/context/Can.js'\nimport { Row, Col, Card, CardBody, Badge, Table, Nav, NavItem, NavLink, Input, TabContent, TabPane, Button, Popover, PopoverHeader, PopoverBody, UncontrolledTooltip, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, Label, Progress, CardHeader, ModalBody, Modal, InputGroup, ModalHeader } from 'reactstrap'\n// ** Third Party Components\n\nimport TimeSheet from './TimeSheet'\nimport Documents from './Documents'\nimport Conversation from './Conversation'\n\nimport { Clock, MessageCircle, User, X, File, Plus, MoreVertical, CheckCircle, RefreshCcw } from 'react-feather'\n\nimport '@styles/react/libs/react-select/_react-select.scss'\n// ** Custom Components\nimport toast from 'react-hot-toast'\nimport axios from '@src/configs/axios/axiosConfig'\nimport { startTimer, endTimer, updateStatusRefresh } from '../store/index'\n\n// ** Styles\nimport { useDispatch, useSelector } from 'react-redux'\nimport moment from 'moment'\nimport { orgUserId, activeOrganizationid } from '@src/helper/sassHelper'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nconst userId = orgUserId()\nconst activeOrgId = activeOrganizationid()\n\n\nconst UserInfoCard = ({ selectedTaskWorkFlow }) => {\n\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const { id } = useParams()\n  // ** State\n  const dispatch = useDispatch()\n  const [active, setActive] = useState('tasknotes')\n  const [timerFlag, setTimerFlag] = useState(false)\n  const [hourlyRate, setHourlyRate] = useState(0)\n\n  const store = useSelector(state => state.taskworkflow)\n  const toggleTab = tab => {\n    if (active !== tab) {\n      setActive(tab)\n    }\n  }\n\n  const getEmployeeDet = () => {\n    axios.post('/organizationusers/getjobinfo', { id: userId })\n      .then((res) => {\n        setHourlyRate(res.data.organizationusers.hourlyrate || 0)\n\n      }).catch((err) => {\n        console.log(err)\n      })\n  }\n\n  const startTaskTimer = async () => {\n    const data = {\n      createdBy: userId,\n      taskId: selectedTaskWorkFlow.taskid,\n      taskWorkFlowId: id,\n      userId,\n      hourlyRate,\n      organizationId: activeOrgId,\n      startTime: moment().valueOf(),\n      existStatus: selectedTaskWorkFlow.taskstatus\n    }\n    const res = await dispatch(startTimer(data))\n    localStorage.setItem('currentTask', JSON.stringify(res.payload))\n  }\n\n  const stopTaskTimer = async () => {\n    const temp = JSON.parse(localStorage.getItem('currentTask') || null)\n    if (temp !== null) {\n      const end = moment()\n      const start = moment(temp.starttime, 'x').toDate()\n      const end_timestamp = moment().valueOf()\n      const duration = moment.duration(end.diff(start))\n      const hours = duration.asHours()\n      const amount = hourlyRate * hours\n      const data = {\n        updatedBy: userId,\n        id: temp.id,\n        taskWorkFlowId: id,\n        taskId: selectedTaskWorkFlow.taskid,\n        totalhours: hours,\n        amount,\n        hourlyRate,\n        userId,\n        endTime: end_timestamp\n      }\n      await dispatch(endTimer(data))\n      await localStorage.removeItem('currentTask')\n      await setTimerFlag(false)\n    }\n  }\n\n  const updateTaskStatus = async (status, id) => {\n    const data = {\n      updatedBy: userId,\n      taskId: selectedTaskWorkFlow.taskid,\n      taskWorkFlowId: id,\n      status\n    }\n    setBlock(true)\n\n    axios.post('/taskworkflows/updatestatus', data)\n      .then(async () => {\n        toast.success('Task Status Updated SuccesFully', { position: 'bottom-right' })\n        setPopoverOpen(false)\n        setPopoverOpen1(false)\n        await dispatch(updateStatusRefresh(data))\n        setBlock(false)\n        setFormModal(false)\n        if (comment !== '' || attachmentIds.length > 0) {\n          await postComment()\n        }\n      })\n      .catch(() => {\n        setBlock(false)\n      })\n  }\n\n  useEffect(() => {\n    if (selectedTaskWorkFlow !== null) {\n      getEmployeeDet()\n    }\n\n\n  }, [selectedTaskWorkFlow])\n\n  useEffect(() => {\n    const temp = JSON.parse(localStorage.getItem('currentTask'))\n    if (store.selectedTaskTimer !== null) {\n      setTimerFlag(true)\n    } else if (temp !== null) {\n      setTimerFlag(true)\n    } else {\n      setTimerFlag(false)\n    }\n  }, [store.selectedTaskTimer])\n\n  return (\n    <Fragment>\n      <UILoader blocking={block} loader={<Loader />}>\n        <Col className='d-flex mb-1 ms-50'>\n          <a className='text-primary' href={`/task/list`}>Task / </a>\n          <a className='text-primary ms-50' href={`/task/view/${selectedTaskWorkFlow.taskid}?tabId=checklist`}>{selectedTaskWorkFlow.servicename} /</a>\n          <a className='text-primary ms-50' href={`/taskworkflow/view/${selectedTaskWorkFlow.id}`}>{selectedTaskWorkFlow.name}</a>\n        </Col>\n        <Card>\n          <CardBody>\n            <Table responsive bordered>\n              <thead>\n                <tr >\n                  <th className='bg-light-warning' colSpan='3'>\n                    <Col className='d-flex align-item-center'><p className='m-0 text-body'>Sub Task - </p> <p className='m-0 text-primary'>{selectedTaskWorkFlow.name}</p>\n\n                    </Col></th>\n                  <th className='bg-light-warning'>\n                    <Row className='justify-content-end align-items-center'>\n\n                      <Col md={4}>\n                        {!selectedTaskWorkFlow.timesheetFlag &&\n                          <Button size='sm' disabled={timerFlag} outline color='success' onClick={() => { startTaskTimer() }}>\n                            <Clock size={14} /> Start Timer</Button>\n                        }\n                        {selectedTaskWorkFlow.timesheetFlag &&\n                          <Button size='sm' outline color='danger' onClick={() => { stopTaskTimer() }}>\n                            <Clock size={14} /> Stop Timer</Button>\n                        }\n                      </Col>\n\n                      <Col md={3} className='d-flex'>\n                        <Col tag={Link} to={`/task/view/${selectedTaskWorkFlow.taskid}?tabId=checklist`} >\n                          <X size={16} className='ms-1 cursor-pointer' id='deletetooltip' />\n                        </Col>\n\n                        <UncontrolledDropdown>\n                          <DropdownToggle tag='div' className='btn btn-sm p-25'>\n                            <MoreVertical size={14} className='cursor-pointer' />\n                          </DropdownToggle>\n                          <DropdownMenu>\n                            {parseInt(selectedTaskWorkFlow?.progressstatus) === 1 &&\n                              <DropdownItem onClick={() => updateTaskStatus(3, selectedTaskWorkFlow?.id)}>\n                                <CheckCircle size={14} /> Mark as Complete\n                              </DropdownItem>\n                            }\n                            {parseInt(selectedTaskWorkFlow?.progressstatus) === 3 &&\n                              <DropdownItem onClick={() => updateTaskStatus(1, selectedTaskWorkFlow?.id)}>\n                                <RefreshCcw size={14} /> Reopen\n                              </DropdownItem>\n                            }\n                          </DropdownMenu>\n                        </UncontrolledDropdown>\n\n                      </Col>\n                    </Row>\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>Client Name</td>\n                  <td>{selectedTaskWorkFlow.clientname}</td>\n                  <td >\n                    Status\n                  </td>\n                  <td>\n                    {parseInt(selectedTaskWorkFlow.progressstatus) === 1 ? <Badge className='text-capitalize' color='light-primary'>Progress </Badge> : <Badge className='text-capitalize' color='light-success'> Completed</Badge>}\n                  </td>\n                </tr>\n                <tr>\n                  <td >\n                    Task Name\n                  </td>\n                  <td>{selectedTaskWorkFlow.servicename}</td>\n                  <td >\n                    Description\n                  </td>\n                  <td rowSpan='4' width={500}>\n                    <div className='white-space-wrap'>\n                      <p className='white-space-wrap' dangerouslySetInnerHTML={{ __html: selectedTaskWorkFlow.description.replace('\\\\', '') }} ></p>\n                    </div>\n                  </td>\n                </tr>\n                <tr>\n                  <td >\n                    Assigned To\n                  </td>\n                  <td>\n                    {selectedTaskWorkFlow?.users?.map((user, key) => {\n\n                      return (<Badge color='light-primary' key={key} className='ms-50'>\n                        <User size={14} />\n                        <span className='align-middle ms-50'>{user.name}</span>\n                      </Badge>\n                      )\n                    })\n                    }\n                  </td>\n\n                </tr>\n\n              </tbody>\n            </Table>\n          </CardBody>\n        </Card>\n        <Nav pills className=\"flex-lg-row flex-column nav nav-left\">\n          <NavItem>\n            <NavLink active={active === 'tasknotes'} onClick={() => toggleTab('tasknotes')}>\n              <MessageCircle className='font-medium-3 me-50' />\n              <span className='fw-bold'>Comments</span>\n            </NavLink>\n          </NavItem>\n          {/* <NavItem>\n            <NavLink active={active === 'taskdocuments'} onClick={() => toggleTab('taskdocuments')}>\n              <File className='font-medium-3 me-50' />\n              <span className='fw-bold'>Attachments</span>\n            </NavLink>\n          </NavItem> */}\n          <Can I='read' a='time-sheet'>\n            <NavItem>\n              <NavLink active={active === 'timesheets'} onClick={() => toggleTab('timesheets')}>\n                <Clock className='font-medium-3 me-50' />\n                <span className='fw-bold'>Timesheet</span>\n              </NavLink>\n            </NavItem>\n          </Can>\n        </Nav>\n        <Card>\n          <CardBody className='px-0'>\n            <Row className=''>\n              <Fragment>\n                <TabContent activeTab={active}>\n                  <TabPane tabId='tasknotes'>\n                    <Conversation tabId={active} selectedTaskWorkFlow={selectedTaskWorkFlow} />\n                  </TabPane>\n                  {/* <TabPane tabId='taskdocuments'>\n                    <Documents tabId={active} selectedTaskWorkFlow={selectedTaskWorkFlow} />\n                  </TabPane> */}\n                  <TabPane tabId='timesheets'>\n                    <TimeSheet tabId={active} selectedTaskWorkFlow={selectedTaskWorkFlow} />\n                  </TabPane>\n                </TabContent>\n              </Fragment>\n            </Row>\n          </CardBody>\n        </Card>\n      </UILoader>\n    </Fragment >\n  )\n}\n\nexport default UserInfoCard\n","// ** React Imports\nimport { useEffect, useState, Fragment } from 'react'\nimport { useParams, Link } from 'react-router-dom'\n\n// ** Store & Actions\nimport { getTaskWorkFlow } from '../store'\nimport { useSelector, useDispatch } from 'react-redux'\n\n// ** Reactstrap Imports\nimport { Row, Col, Alert } from 'reactstrap'\n\n// ** User View Components\nimport UserInfoCard from './UserInfoCard'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nimport { orgUserId } from '@src/helper/sassHelper'\nconst userId = orgUserId()\nconst TaskView = () => {\n  // ** Store Vars\n  const store = useSelector(state => state.taskworkflow)\n  const dispatch = useDispatch()\n\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  // ** Hooks\n  const { id } = useParams()\n\n  // ** Get suer on mount\n  useEffect(async () => {\n    if (id !== null) {\n      setBlock(true)\n      await dispatch(getTaskWorkFlow({id, userId}))\n    }\n    setBlock(false)\n\n  }, [dispatch, id])\n\n\n  return store.selectedTaskWorkFlow !== null && store.selectedTaskWorkFlow !== undefined ? (\n    <UILoader blocking={block} loader={<Loader />}>\n      <div className='app-user-view'>\n        <Row>\n          <Col xl='12' lg='12' >\n            <UserInfoCard selectedTaskWorkFlow={store.selectedTaskWorkFlow} />\n          </Col>\n        </Row>\n      </div>\n    </UILoader>\n  ) : (\n    <UILoader blocking={block} loader={<Loader />}>\n      {/* <Alert color='danger'>\n        <h4 className='alert-heading'>Task not found</h4>\n        <div className='alert-body'>\n          Task with id: {id} doesn't exist. Check list of all Tasks: <Link to='/task/list'>Tasks List</Link>\n        </div>\n      </Alert> */}\n    </UILoader>\n  )\n}\nexport default TaskView\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}