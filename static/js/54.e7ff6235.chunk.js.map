{"version":3,"sources":["views/apps/proposal/add/AddCard.js","views/apps/proposal/add/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","views/apps/proposal/helper/hepler.js"],"names":["activeOrgId","activeOrganizationid","activeOrg","activeOrganization","userId","orgUserId","AddCard","useState","block","setBlock","Loader","colourStyles","multiValue","styles","backgroundColor","clientOptions","setClientOptions","serviceOptions","setServiceOptions","taxGroupOptions","setTaxGroupOptions","stateOptions","setStateOptions","accountOptions","setAccountOptions","finalTotal","setFinalTotal","finalSubTotal","setFinalSubTotal","invoiceItems","setInvoiceItems","selectedClient","setSelectedClient","taxValues","setTaxValues","userOptions","setuserOptions","selEmployees","setSelEmployees","accDetails","setAccDetails","invoiceTaxes","setInvoiceTaxes","exemptionReasonOptions","setExemptionReasonOptions","navigate","useNavigate","dispatch","useDispatch","store","useSelector","state","proposal","schema","yup","shape","createdBy","default","contactId","required","uniqueIdentity","contactEmail","contactName","invoiceDate","paymentDue","placeOfSupplyId","subTotalAmount","totalAmount","totalTaxAmount","organizationId","isRcmApplicable","isgstregistered","dueAmount","billingAddressLine1","billingAddressLine2","billingAddressState","billingAddressCity","billingAddressZipCode","billingCurrencyId","currencyid","bankAccountBankName","bankAccountBranchName","bankAccountHolderName","bankAccountId","bankAccountIfscCode","bankAccountNumber","organizationAddressLine1","addressline1","organizationAddressLine2","addressline2","organizationCity","organizationcity","organizationState","statename","organizationZipCode","pinzipcode","organizationName","name","organizationImageUrl","organizationimageid","organizationStateCode","stateshortname","organizationGstin","gstin","note","status","calculateTaxes","paymentStatus","rows","of","serviceId","invoiceId","sacCode","price","exemptionReasonId","isTaxApplicable","actualPrice","taxGroupId","taxes","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","setValue","useFieldArray","fields","append","remove","getOrganizationUsers","axios","post","then","response","arr","data","organizationusers","catch","err","console","log","getClientData","id","getClient","res","payload","useEffect","clients","services","taxgroups","exemptionreasons","transactionaccounts","acc","find","obj","isPrimary","accountBusinessName","bankName","branchAddress","accountHolderName","ifscCode","accountNumber","states","organizationprefernces","invoicenote","replace","onSubmit","moment","valueOf","temp","addInvoice","InvoiceItems","forEach","key","addInvoiceItems","length","users","addInvoiceParticipant","addItem","taxPrice","description","ItemFinalTotalAmount","items","_formValues","finalsubTotalAmount","finalTaxAmount","parseFloat","output","map","a","parser","flat","reduce","item","undefined","existItem","taxName","taxAmount","push","Object","assign","JSON","stringify","calculateInvoiceTax","loadItemData","ind","service_price","tax_group_id","desFlg","priceFlg","sacFlg","taxFlg","itemFlg","eachObj","selectedService","saccode","sellingprice","taxgroupid","String","exemptionreasonid","calculateTaxAmount","invoice_item_taxes","taxGroups","taxApplicable","nontaxableflag","istaxapplicable","taxid","calculateTax","percentage","dataTemp","parseInt","toFixed","taxvaluefn","taxtype","stateid","taxType","type","taxvalues","getTaxValue","handleUserChange","e","tempArr","Array","isArray","x","keys","billingaddresscity","billingaddressline1","billingaddressstatesname","billingaddresszip","currenciessymbol","currenciescode","currenciesname","email","placeofsupplyid","blocking","loader","className","xl","md","sm","ErrorText","message","renderError","color","Math","floor","random","content","charAt","renderOrg","size","value","placeholder","disabled","render","field","onChange","date","dateStr","options","altInput","altFormat","dateFormat","ref","inputRef","classnames","classNamePrefix","c","val","getOptionLabel","option","getOptionValue","billingaddressline2","index","rules","invalid","onInput","lg","onClick","order","xs","for","outline","tag","Link","to","bankAccountfn","reviewer","isMulti","InvoiceAdd","UILoader","props","children","overlayColor","Tag","style","defaultProps","ComponentSpinner","amount","taxRateInPercentage","TaxType","calculatedTax","str","parse"],"mappings":"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","file":"static/js/54.e7ff6235.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus, Hash } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n// ** Reactstrap Imports\nimport { Row, Col, Card, Input, Label, Button, CardBody, CardText, InputGroup, InputGroupText, FormFeedback } from 'reactstrap'\nimport classnames from 'classnames'\n\nimport { addInvoice, addInvoiceItems, getClient, addInvoiceParticipant } from '../store/index'\nimport Avatar from '@components/avatar'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { activeOrganizationid, activeOrganization, orgUserId } from '@src/helper/sassHelper'\nimport { calculateTax, parser } from '../helper/hepler'\nimport { Link, useNavigate } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport moment from 'moment'\n\nconst activeOrgId = activeOrganizationid()\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\n\nconst AddCard = () => {\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const colourStyles = {\n    multiValue: (styles, { }) => {\n\n      return {\n        ...styles,\n        backgroundColor: '#7367f0'\n      }\n    }\n  }\n\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  const [taxGroupOptions, setTaxGroupOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [accountOptions, setAccountOptions] = useState([])\n  const [finalTotal, setFinalTotal] = useState(0.00)\n  const [finalSubTotal, setFinalSubTotal] = useState(0.00)\n  const [invoiceItems, setInvoiceItems] = useState([])\n  const [selectedClient, setSelectedClient] = useState({})\n  const [taxValues, setTaxValues] = useState([])\n  const [userOptions, setuserOptions] = useState([])\n  const [selEmployees, setSelEmployees] = useState([])\n  const [accDetails, setAccDetails] = useState([])\n  const [invoiceTaxes, setInvoiceTaxes] = useState([])\n  const [exemptionReasonOptions, setExemptionReasonOptions] = useState([])\n\n\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n\n  const store = useSelector(state => state.proposal)\n\n  const schema = yup.object().shape({\n    createdBy: yup.string().default(userId),\n    contactId: yup.string().required(\"Please select a Client\"),\n    uniqueIdentity: yup.string(),\n    contactEmail: yup.string(),\n    contactName: yup.string(),\n    invoiceDate: yup.string(),\n    paymentDue: yup.string(),\n    placeOfSupplyId: yup.string().required(\"Please select a Place Of Supply\"),\n    subTotalAmount: yup.string(),\n    totalAmount: yup.string(),\n    totalTaxAmount: yup.string(),\n    organizationId: yup.string().default(activeOrgId),\n    isRcmApplicable: yup.boolean().default(false),\n    isgstregistered : yup.boolean().default(activeOrg?.isgstregistered),\n    dueAmount: yup.string(),\n    billingAddressLine1: yup.string(),\n    billingAddressLine2: yup.string(),\n    billingAddressState: yup.string(),\n    billingAddressCity: yup.string(),\n    billingAddressZipCode: yup.string(),\n    billingCurrencyId: yup.string().default(activeOrg.currencyid),\n    bankAccountBankName: yup.string(),\n    bankAccountBranchName: yup.string(),\n    bankAccountHolderName: yup.string(),\n    bankAccountId: yup.string().required('Please Select Account'),\n    bankAccountIfscCode: yup.string(),\n    bankAccountNumber: yup.string(),\n    organizationAddressLine1: yup.string().default(activeOrg.addressline1),\n    organizationAddressLine2: yup.string().default(activeOrg.addressline2),\n    organizationCity: yup.string().default(activeOrg.organizationcity),\n    organizationState: yup.string().default(activeOrg.statename),\n    organizationZipCode: yup.string().default(activeOrg.pinzipcode),\n    organizationName: yup.string().default(activeOrg.name),\n    organizationImageUrl: yup.string().default(activeOrg.organizationimageid || ''),\n    organizationStateCode: yup.string().default(activeOrg.stateshortname),\n    organizationGstin: yup.string().default(activeOrg.gstin),\n    gstin: yup.string(),\n    note: yup.string().default(''),\n    status: yup.number().default(4),\n    calculateTaxes: yup.string(),\n    paymentStatus: yup.number().default(5),\n    rows: yup.array().of(\n      yup.object().shape({\n        serviceId: yup.string().required(\"Please Select Service Item\"),\n        invoiceId: yup.string(),\n        sacCode: yup.string(),\n        price: yup.string(),\n        organizationId: yup.string().default(activeOrgId),\n        exemptionReasonId: yup.string().default(''),\n        isTaxApplicable: yup.boolean().default(true),\n        actualPrice: yup.string().required(),\n        taxGroupId: yup.string().required(\"Pleace Select Tax\"),\n        subTotalAmount: yup.string().required(),\n        taxes: yup.string()\n      })\n    )\n  })\n\n  const { handleSubmit, formState: { errors }, control, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, append, remove } = useFieldArray({ control, name: 'rows' })\n\n  const getClients = () => {\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getServices = () => {\n    axios.post('/services/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setServiceOptions(arr.services)\n    })\n  }\n\n  const getTaxValue = (taxType) => {\n    const data = {\n      type: taxType\n    }\n    axios.post('/taxvalues/list', data).then(response => {\n      const arr = response.data\n      setTaxValues(arr.taxvalues)\n    })\n  }\n\n  const getExemptionReason = () => {\n    axios.post('/exemptionreasons/dropdown').then(response => {\n      const arr = response.data\n      setExemptionReasonOptions(arr.exemptionreasons)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getTaxGroups = () => {\n    axios.post('/taxgroups/dropdown').then(response => {\n      const arr = response.data\n      setTaxGroupOptions(arr.taxgroups)\n    })\n  }\n\n  const bankAccountfn = (id) => {\n    const acc = accountOptions.find((obj) => obj.id === id)\n    setAccDetails(acc)\n    setValue('bankAccountBankName', acc.bankName)\n    setValue('bankAccountBranchName', acc.branchAddress)\n    setValue('bankAccountHolderName', acc.accountHolderName)\n    setValue('bankAccountId', acc.id)\n    setValue('bankAccountIfscCode', acc.ifscCode)\n    setValue('bankAccountNumber', acc.accountNumber)\n  }\n\n\n  const getBankAccounts = () => {\n    axios.post('/transactionaccounts/dropdown').then(response => {\n      const arr = response.data\n      setAccountOptions(arr.transactionaccounts)\n      let acc = arr.transactionaccounts.find((obj) => obj.isPrimary)\n      if (!acc) {\n        acc = arr.transactionaccounts.find((obj) => obj.accountBusinessName === 'Cash')\n      }\n      setAccDetails(acc)\n      setValue('bankAccountBankName', acc.bankName)\n      setValue('bankAccountBranchName', acc.branchAddress)\n      setValue('bankAccountHolderName', acc.accountHolderName)\n      setValue('bankAccountId', acc.id)\n      setValue('bankAccountIfscCode', acc.ifscCode)\n      setValue('bankAccountNumber', acc.accountNumber)\n    })\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown').then(response => {\n      const arr = response.data.organizationusers\n      setuserOptions(arr)\n    }).catch((err) => {\n      console.log(err)\n    })\n  }\n\n  const getClientData = async (id) => {\n    const res = await dispatch(getClient(id))\n    setSelectedClient(res.payload)\n  }\n\n  const getDefaultNote = () => {\n    axios.post('/organizationprefernces/getinvoiceprops').then(response => {\n      setValue('note', response.data.organizationprefernces.invoicenote.replace(/(\\\\n)/g, \"\\n\"))\n    })\n  }\n\n  useEffect(() => {\n    // ** Get Clients\n    getClients()\n    getServices()\n    getTaxGroups()\n    getExemptionReason()\n    getBankAccounts()\n    getStates()\n    getOrganizationUsers()\n    getDefaultNote()\n\n  }, [])\n\n  const onSubmit = async data => {\n    data.invoiceDate = moment(data.invoiceDate).valueOf()\n    data.paymentDue = moment(data.paymentDue).valueOf()\n\n    setBlock(true)\n    const temp = data.rows\n    setInvoiceItems(temp)\n    delete data.rows\n    await dispatch(addInvoice(data))\n  }\n\n  const InvoiceItems = async (id) => {\n    invoiceItems.forEach((obj, key) => {\n      invoiceItems[key].invoiceId = id\n    })\n    await dispatch(addInvoiceItems(invoiceItems))\n\n    if (selEmployees.length > 0) {\n      const obj = { users: selEmployees, organizationId: activeOrgId, invoiceId: id }\n      await dispatch(addInvoiceParticipant(obj))\n    }\n\n    navigate(`/proposal/view/${store.invoiceId}`)\n  }\n\n  const addItem = (() => {\n    append({ invoiceId: 0, organizationId: activeOrgId, serviceId: '', exemptionReasonId: '', isTaxApplicable: true, sacCode: '', actualPrice: 0, taxGroupId: '', subTotalAmount: 0, taxPrice: 0, description: '' })\n  })\n\n  useEffect(() => {\n    addItem()\n  }, [])\n\n  useEffect(async () => {\n    if (store.invoiceId !== null && invoiceItems.length > 0) {\n      await InvoiceItems(store.invoiceId)\n    }\n  }, [store.invoiceId])\n\n  const calculateInvoiceTax = () => {\n\n    const inputArray = control._formValues.rows.map(a => {\n      if (a.taxes) {\n        return parser(a.taxes)\n      } else {\n        return []\n      }\n    })\n\n    let temp = []\n    temp = inputArray.flat()\n    let output = []\n    output = temp.reduce((acc, item) => {\n      if (item !== undefined) {\n        const existItem = acc.find((obj) => {\n          return item.taxName === obj.taxName\n        })\n        if (existItem) {\n          existItem.taxAmount = parseFloat(existItem.taxAmount) + parseFloat(item.taxAmount)\n        } else {\n          acc.push(Object.assign({}, item))\n        }\n      }\n      return acc\n    }, [])\n\n    setInvoiceTaxes(output)\n    setValue('calculateTaxes', JSON.stringify(output))\n\n  }\n\n  const ItemFinalTotalAmount = () => {\n\n    const items = control._formValues.rows\n    let finalTotal = 0\n    let finalsubTotalAmount = 0\n    let finalTaxAmount = 0\n    items.forEach(obj => {\n      finalTotal = parseFloat(obj.subTotalAmount) + parseFloat(finalTotal)\n      finalsubTotalAmount = parseFloat(obj.price) + parseFloat(finalsubTotalAmount)\n      finalTaxAmount = parseFloat(finalTaxAmount) + parseFloat(obj.taxPrice)\n    })\n\n    control._formValues.subTotalAmount = finalsubTotalAmount\n    control._formValues.totalAmount = finalTotal\n    control._formValues.dueAmount = finalTotal\n    control._formValues.totalTaxAmount = finalTaxAmount\n\n    setFinalTotal(finalTotal)\n    setFinalSubTotal(finalsubTotalAmount)\n    calculateInvoiceTax()\n  }\n\n  const removeItem = ((ind) => {\n    remove(ind)\n    ItemFinalTotalAmount()\n  })\n\n  const loadItemData = (ind, desFlg = false, priceFlg = false, sacFlg = false, taxFlg = false, itemFlg = false) => {\n    const eachObj = control._formValues.rows[ind] || {}\n\n    if (eachObj.serviceId === undefined || eachObj.serviceId === '') {\n      return false\n    }\n    let service_price, tax_group_id\n    const selectedService = serviceOptions.find((a) => a.id === eachObj.serviceId)\n    setValue(`rows[${ind}].serviceId`, eachObj.serviceId)\n    if (itemFlg) {\n      setValue(`rows[${ind}].sacCode`, selectedService.saccode)\n      service_price = selectedService.sellingprice || 0\n      tax_group_id = selectedService.taxgroupid\n      setValue(`rows[${ind}].actualPrice`, service_price)\n      setValue(`rows[${ind}].price`, String(selectedService.sellingprice) || 0)\n      setValue(`rows[${ind}].taxGroupId`, tax_group_id)\n      setValue(`rows[${ind}].description`, selectedService.description)\n      setValue(`rows[${ind}].exemptionReasonId`, selectedService.exemptionreasonid || '')\n    } else {\n      setValue(`rows[${ind}].sacCode`, sacFlg ? eachObj.sacCode : selectedService.saccode)\n      service_price = priceFlg ? eachObj.price : selectedService.sellingprice || 0\n      tax_group_id = taxFlg ? eachObj.taxGroupId : selectedService.taxgroupid\n      setValue(`rows[${ind}].price`, service_price)\n      setValue(`rows[${ind}].actualPrice`, String(selectedService.sellingprice) || 0)\n      setValue(`rows[${ind}].taxGroupId`, tax_group_id)\n      setValue(`rows[${ind}].description`, desFlg ? eachObj.description : selectedService.description)\n      setValue(`rows[${ind}].exemptionReasonId`, selectedService.exemptionreasonid || '')\n    }\n\n    let calculateTaxAmount = 0\n    const invoice_item_taxes = []\n\n    const taxGroups = taxGroupOptions.find((a) => a.id === tax_group_id)\n\n    let taxApplicable = taxGroups !== undefined ? !taxGroups.nontaxableflag : selectedService.istaxapplicable || false\n    taxApplicable = (taxApplicable && activeOrg?.isgstregistered)\n\n    setValue(`rows[${ind}].isTaxApplicable`, taxApplicable)\n\n    if (taxApplicable) {\n      if (taxGroups !== undefined) {\n        taxValues.forEach(obj => {\n          if (obj.taxid === tax_group_id) {\n            let temp = 0\n            temp = calculateTax(service_price, obj.percentage, 2)\n            calculateTaxAmount = parseFloat(calculateTaxAmount) + parseFloat(temp)\n            const dataTemp = {}\n            dataTemp[\"taxName\"] = `${obj.name} (${obj.percentage}%)`\n            dataTemp[\"taxId\"] = parseInt(obj.id)\n            dataTemp[\"taxNameValue\"] = obj.name\n            dataTemp[\"taxPercentage\"] = String(obj.percentage)\n            dataTemp[\"taxAmount\"] = String(temp)\n\n            invoice_item_taxes.push(dataTemp)\n          }\n        })\n      }\n    }\n\n    setValue(`rows[${ind}].subTotalAmount`, parseFloat(parseFloat(calculateTaxAmount || 0.00) + parseFloat(service_price || 0.00)).toFixed(2))\n    setValue(`rows[${ind}].taxPrice`, parseFloat(calculateTaxAmount).toFixed(2))\n    setValue(`rows[${ind}].taxes`, JSON.stringify(invoice_item_taxes))\n    setValue(`rows[${ind}].createdBy`, userId)\n\n    ItemFinalTotalAmount()\n\n  }\n\n\n  const taxvaluefn = () => {\n    let taxtype = 1\n    if (activeOrg.stateid === control._formValues.placeOfSupplyId) {\n      taxtype = 2\n    }\n\n    getTaxValue(taxtype)\n\n  }\n\n  useEffect(() => {\n    if (taxValues.length > 0) {\n      control._formValues.rows.forEach((obj, ind) => {\n        loadItemData(ind, false, false, false, false, false)\n      })\n    }\n  }, [taxValues])\n\n  const handleUserChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    setSelEmployees(tempArr)\n\n  }\n\n  useEffect(() => {\n    if (Object.keys(selectedClient).length > 0) {\n      setValue('billingAddressCity', selectedClient.billingaddresscity || '')\n      setValue('billingAddressLine1', selectedClient.billingaddressline1 || '')\n      setValue('billingAddressLine2', selectedClient.billingaddressline1 || '')\n      setValue('billingAddressState', selectedClient.billingaddressstatesname || '')\n      setValue('billingAddressZipCode', selectedClient.billingaddresszip || '')\n      setValue('billingCurrencyId', selectedClient.currencyid || activeOrg.currencyid)\n      setValue('billingCurrencySymbol', selectedClient.currenciessymbol || '')\n      setValue('billingCurrencyShortName', selectedClient.currenciescode || '')\n      setValue('billingCurrencyName', selectedClient.currenciesname || '')\n      setValue('contactEmail', selectedClient.email)\n      setValue('gstin', selectedClient.gstin)\n      setValue('contactName', selectedClient.name)\n      setValue('placeOfSupplyId', selectedClient.placeofsupplyid)\n      taxvaluefn()\n    }\n\n  }, [selectedClient])\n\n  const renderError = () => {\n    const keys = Object.keys(errors)\n    const ErrorText = []\n    if (Array.isArray(keys)) {\n      keys.forEach((key) => {\n        if (key !== 'rows') {\n          ErrorText.push(<FormFeedback key={key}>${errors[key]?.message}</FormFeedback>)\n        }\n      })\n    }\n    return ErrorText\n  }\n\n  const renderOrg = name => {\n    const stateNum = Math.floor(Math.random() * 6),\n      states = ['light-success', 'light-danger', 'light-warning', 'light-info', 'light-primary', 'light-secondary'],\n      color = states[stateNum]\n    return <Avatar color={color} className='me-50' content={name !== null ? name?.charAt(0) : ''} />\n\n  }\n\n  return (\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Row className='invoice-add'>\n          <Fragment>\n            <Col xl={10} md={8} sm={12}>\n\n              <Card className='invoice-preview-card'>\n\n                {/* Header */}\n                <CardBody className='invoice-padding pb-0'>\n                  {\n                    renderError()\n                  }\n                  <div className='d-flex justify-content-between flex-md-row flex-column invoice-spacing mt-0'>\n                    <div>\n                      <div className='logo-wrapper'>\n                        {renderOrg(activeOrg.name)}\n                      </div>\n                      <h3 className='text-primary invoice-logo'>{activeOrg.name}</h3>\n                      <p className='card-text mb-25'>{activeOrg.addressline1}</p>\n                      <p className='card-text mb-25'>{activeOrg.addressline2}</p>\n                      <p className='card-text mb-0'>{activeOrg.organizationcity} - {activeOrg.pinzipcode}</p>\n                      <p className='card-text mb-0'>{activeOrg.statename}</p>\n                    </div>\n                    <div className='invoice-number-date mt-md-0 mt-2'>\n                      <div className='d-flex align-items-center justify-content-md-end mb-1'>\n                        <h4 className='invoice-title'>Profoma Invoice</h4>\n                        <InputGroup className='input-group-merge invoice-edit-input-group disabled'>\n                          <InputGroupText>\n                            <Hash size={15} />\n                          </InputGroupText>\n                          <Input\n                            type='number'\n                            className='invoice-edit-input'\n                            value={3171}\n                            placeholder='53634'\n                            disabled\n                          />\n                        </InputGroup>\n                      </div>\n                      <div className='d-flex align-items-center justify-content-md-between mb-1'>\n                        <span className='title required'>Proposal Date</span>\n                        <Controller\n                          control={control}\n                          name={`invoiceDate`}\n                          id='invoiceDate'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true, altFormat: \"M j, Y\", dateFormat: \"M j, Y\" }}\n                              className='form-control invoice-edit-input date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                      <div className='d-flex align-items-center justify-content-md-between'>\n                        <span className='title required'>Due Date</span>\n                        <Controller\n                          control={control}\n                          name={`paymentDue`}\n                          id='paymentDue'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true, altFormat: \"M j, Y\", dateFormat: \"M j, Y\" }}\n                              className='form-control invoice-edit-input due-date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </CardBody>\n                {/* /Header */}\n\n                <hr className='invoice-spacing' />\n\n                {/* Address and Contact */}\n                <CardBody className='invoice-padding pt-0'>\n                  <Row className='row-bill-to invoice-spacing'>\n                    <Col className='col-bill-to ps-0' xl='6'>\n                      <h6 className='invoice-to-title required'>Proposal To</h6>\n                      <div className='invoice-customer'>\n                        <Controller\n                          control={control}\n                          name={`contactId`}\n                          id={`contactId`}\n                          render={({ field, ref }) => (\n                            <Select\n                              inputRef={ref}\n                              className={classnames('react-select', { 'is-invalid': errors['contactId'] })}\n                              {...field}\n                              classNamePrefix='select'\n                              options={clientOptions}\n                              value={clientOptions.find(c => { return c.id === field.value })}\n                              onChange={val => { field.onChange(val.id); getClientData(val.id) }}\n                              getOptionLabel={(option) => option.name}\n                              getOptionValue={(option) => option.id}\n                            />\n                          )}\n                        />\n                      </div>\n                      <Col className='pe-0 mt-xl-2' xl='4'>\n                        <table>\n                          <tbody>\n                            <tr>\n                              <td>{selectedClient.billingaddressline1}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddressline2}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddresscity} {selectedClient.billingaddresszip && `-`}  {selectedClient.billingaddresszip}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddressstatesname}</td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </Col>\n                    </Col>\n                    <Col className='col-bill-to ps-0' xl='2'></Col>\n                    <Col className='pe-0 mt-xl-0 mt-2' xl='4'>\n                      <h6 className='mb-2'>Payment Details</h6>\n                      <table>\n                        <tbody>\n                          <tr>\n                            <td className='pe-1'>Bank Name:</td>\n                            <td>\n                              {accDetails?.bankName && <span className='fw-bolder'>{accDetails?.bankName}</span>}\n                            </td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Account name:</td>\n                            <td>{accDetails?.accountHolderName && <span className='fw-bolder'>{accDetails?.accountHolderName}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Branch Name:</td>\n                            <td> {accDetails?.branchAddress && <span className='fw-bolder'>{accDetails?.branchAddress}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>IFSC Code:</td>\n                            <td>{accDetails?.ifscCode && <span className='fw-bolder'>{accDetails?.ifscCode} </span>}</td>\n                          </tr>\n                          {selectedClient.currenciescode &&\n                            <tr>\n                              <td className='pe-1'>Currency code:</td>\n                              <td>{selectedClient.currenciescode}</td>\n                            </tr>\n                          }\n                        </tbody>\n                      </table>\n                    </Col>\n                  </Row>\n                  {activeOrg?.isgstregistered &&\n                    <Row className='row-bill-to invoice-spacing'>\n                      <Col className='col-bill-to ps-0' xl='6'>\n                        <h6 className='invoice-to-title mt-2 required'>Place Of Supply</h6>\n                        <div className='invoice-customer'>\n                          <Controller\n                            control={control}\n                            name={`placeOfSupplyId`}\n                            id={`placeOfSupplyId`}\n                            render={({ field, ref }) => (\n                              <Select\n                                inputRef={ref}\n                                className={classnames('react-select', { 'is-invalid': errors['placeOfSupplyId'] })}\n                                {...field}\n                                classNamePrefix='select'\n                                options={stateOptions}\n                                value={stateOptions.find(c => { return c.id === field.value })}\n                                onChange={val => { field.onChange(val.id); taxvaluefn() }}\n                                getOptionLabel={(option) => option.name}\n                                getOptionValue={(option) => option.id}\n                              />\n                            )}\n                          />\n                        </div>\n                        {(selectedClient.gstin !== '' && selectedClient.gstin !== undefined) && <div className='mt-1'> GSTIN : {selectedClient.gstin}</div>}\n                      </Col>\n                      <Col className='col-bill-to ps-0' xl='2'></Col>\n                    </Row>\n                  }\n                </CardBody>\n                {/* /Address and Contact */}\n\n                {/* Product Details */}\n                <CardBody className='invoice-padding invoice-product-details'>\n                  {fields.map((item, index) => {\n                    return (\n                      <div key={item.id} className='repeater-wrapper'>\n                        <Row>\n                          <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                            <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                              <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-4 col-sm-12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Item</CardText>\n                                <Controller\n                                  control={control}\n                                  name={`rows[${index}].serviceId`}\n                                  rules={{ required: true }}\n                                  render={({ field, ref }) => (\n                                    <Select\n                                      {...field}\n                                      inputRef={ref}\n                                      className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.serviceId })}\n                                      classNamePrefix='select'\n                                      options={serviceOptions}\n                                      value={serviceOptions.find(c => c.id === field.value)}\n                                      onChange={val => { field.onChange(val.id); loadItemData(index, false, false, false, false, true) }}\n                                      getOptionLabel={(option) => option.name}\n                                      getOptionValue={(option) => option.id}\n                                    />\n                                  )}\n                                />\n                                {errors.rows?.[index]?.serviceId && <FormFeedback>{errors.rows?.[index]?.serviceId.message}</FormFeedback>}\n                                <Controller\n                                  id={`rows_${index}_description`}\n                                  name={`rows[${index}].description`}\n                                  control={control}\n                                  render={({ field }) => <Input className='mt-1' invalid={errors.rows?.[index]?.description && true} onInput={(val) => { field.onChange(val); loadItemData(index, true, false, false, false, false) }} {...field} />}\n                                />\n                              </Col>\n                              {activeOrg?.isgstregistered &&\n                                <Col className='my-lg-0 my-2 col-lg-2 col-sm-12'>\n                                  <CardText className='col-title mb-md-2 mb-0'>SAC Code</CardText>\n                                  <Controller\n                                    id={`rows_${index}_sacCode`}\n                                    name={`rows[${index}].sacCode`}\n                                    control={control}\n                                    render={({ field }) => <Input type='text' invalid={errors.rows?.[index]?.sacCode && true} onInput={(val) => { field.onChange(val); loadItemData(index, false, true, false, false, false) }} {...field} />}\n                                  />\n                                  {errors.rows?.[index]?.sacCode && <FormFeedback>{errors.rows?.[index]?.sacCode.message}</FormFeedback>}\n                                </Col>\n                              }\n                              <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                                <CardText className='col-title mb-md-2 mb-0'>Price</CardText>\n                                <Controller\n                                  id={`rows_${index}_price`}\n                                  name={`rows[${index}].price`}\n                                  control={control}\n                                  render={({ field }) => <Input type='number' id={`input_rows_${index}_price`} onInput={(val) => { field.onChange(val); loadItemData(index, false, true, false, false, false) }} {...field} invalid={errors.rows?.[index]?.price && true} />}\n                                />\n                                {errors.rows?.[index]?.price && <FormFeedback>{errors.rows?.[index]?.price.message}</FormFeedback>}\n                              </Col>\n\n                              {activeOrg?.isgstregistered &&\n                                <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                                  <CardText className='col-title mb-md-50 mb-0'>Tax Rate</CardText>\n                                  <Controller\n                                    control={control}\n                                    name={`rows[${index}].taxGroupId`}\n                                    rules={{ required: true }}\n                                    render={({ field, ref }) => (\n                                      <Select\n                                        {...field}\n                                        inputRef={ref}\n                                        className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.taxGroupId })}\n                                        classNamePrefix='select'\n                                        options={taxGroupOptions}\n                                        value={taxGroupOptions.find(c => c.id === field.value)}\n                                        onChange={(val) => { field.onChange(val.id); loadItemData(index, false, true, false, true, false) }}\n                                        getOptionLabel={(option) => option.name}\n                                        getOptionValue={(option) => option.id}\n                                      />\n                                    )}\n                                  />\n                                  {errors.rows?.[index]?.taxGroupId && <FormFeedback>{errors.rows?.[index]?.taxGroupId.message}</FormFeedback>}\n\n                                  {\n                                    !item.isTaxApplicable && <Controller\n                                      control={control}\n                                      name={`rows[${index}].exemptionReasonId`}\n                                      rules={{ required: true }}\n                                      render={({ field, ref }) => (\n                                        <Select\n                                          {...field}\n                                          inputRef={ref}\n                                          className={classnames('react-select mt-1', { 'is-invalid': errors.rows?.[index]?.taxGroupId })}\n                                          classNamePrefix='select'\n                                          options={exemptionReasonOptions}\n                                          value={exemptionReasonOptions.find(c => c.id === field.value)}\n                                          onChange={(val) => { field.onChange(val.id) }}\n                                          getOptionLabel={(option) => option.name}\n                                          getOptionValue={(option) => option.id}\n                                        />\n                                      )}\n                                    />\n                                  }\n\n                                </Col>\n                              }\n                              <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Amount</CardText>\n                                {control._formValues.rows[index].subTotalAmount}\n                              </Col>\n                            </Row>\n                            <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                              <X size={18} className='cursor-pointer' onClick={() => { removeItem(index) }} />\n                            </div>\n                          </Col>\n                        </Row>\n                      </div>\n                    )\n                  })}\n                  <Row className='mt-1'>\n                    <Col sm='12' className='px-0'>\n                      <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                        <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                      </Button>\n                    </Col>\n                  </Row>\n                </CardBody>\n\n                {/* /Product Details */}\n\n                {/* Invoice Total */}\n                <CardBody className='invoice-padding'>\n                  <Row className='invoice-sales-total-wrapper'>\n                    <Col className='mt-md-0 mt-3' md={{ size: '6', order: 1 }} xs={{ size: 12, order: 2 }}>\n\n                    </Col>\n                    <Col className='d-flex justify-content-end' md={{ size: '6', order: 2 }} xs={{ size: 12, order: 1 }}>\n                      <div className='invoice-total-wrapper'>\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>{ activeOrg?.isgstregistered && 'Pre Tax'}  Amount:</p>\n                          <p className='invoice-total-amount'>{finalSubTotal}</p>\n                        </div>\n                        {activeOrg?.isgstregistered && <div>\n                          {\n                            invoiceTaxes.map((obj, ind) => {\n                              return (<div key={ind} className='invoice-total-item'>\n                                <p className='invoice-total-title'>{obj?.taxName}</p>\n                                <p className='invoice-total-amount'>{obj?.taxAmount}</p>\n                              </div>)\n                            })\n                          }\n                        </div>\n                        }\n                        <hr className='my-50' />\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>Total Payable:</p>\n                          <p className='invoice-total-amount'>{finalTotal}</p>\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Total */}\n\n                <hr className='invoice-spacing mt-0' />\n\n                {/* Invoice Note */}\n                <CardBody className='invoice-padding py-0'>\n                  <Row>\n                    <Col>\n                      <div className='mb-2'>\n                        <Label for='note' className='form-label fw-bold'>\n                          Note:\n                        </Label>\n                        <Controller\n                          id='note'\n                          name='note'\n                          control={control}\n                          render={({ field }) => <Input type=\"textarea\" value={field.value} invalid={errors.note && true} {...field} />}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Note */}\n              </Card>\n\n            </Col>\n            <Col xl={2} md={4} sm={12}>\n              <Card className='invoice-action-wrapper'>\n                <CardBody>\n                  <Button color='primary' type='submit' block outline className='mb-75'>\n                    Save\n                  </Button>\n                  <Button color='warning' block outline tag={Link} to='/proposal/list'>\n                    Cancel\n                  </Button>\n                </CardBody>\n              </Card>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50 required'>Accept payments via</p>\n                  <Controller\n                    control={control}\n                    name={`bankAccountId`}\n                    rules={{ required: true }}\n                    render={({ field, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select mt-1', { 'is-invalid': errors.bankAccountId })}\n                        classNamePrefix='select'\n                        options={accountOptions}\n                        value={accountOptions.find(c => c.id === field.value)}\n                        onChange={(val) => { field.onChange(val.id); bankAccountfn(val.id) }}\n                        getOptionLabel={(option) => option.accountHolderName}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n                  />\n                </div>\n              </div>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50'>Select Employee</p>\n\n                  <Controller\n                    control={control}\n                    name=\"reviewer\"\n                    id=\"reviewer\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.reviewer })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={userOptions}\n                        isMulti={true}\n                        value={value} // set selected values\n                        onChange={handleUserChange}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                        styles={colourStyles}\n                      />\n                    )}\n\n                  />\n                </div>\n              </div>\n            </Col>\n          </Fragment >\n        </Row>\n      </form >\n    </UILoader>\n  )\n}\n\nexport default AddCard\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst InvoiceAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <AddCard />\n    </div>\n  )\n}\n\nexport default InvoiceAdd\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","export const calculateTax = (amount, taxRateInPercentage, TaxType) => {\n    let calculatedTax = 0\n    if (TaxType === 1) { //Inclusive\n        calculatedTax = parseFloat(amount) - (parseFloat(amount) * (100 / (100 + parseFloat(taxRateInPercentage))))\n        // calculatedTax = parseFloat(amount) - parseFloat(calculatedTax);\n\n    } else if (TaxType === 2) { //Exclusive\n        calculatedTax = (parseFloat(amount) * parseFloat(taxRateInPercentage)) / 100\n    }\n    return parseFloat(calculatedTax)\n}\n\nexport const parser = (str) => {\n\n    return JSON.parse(Array.isArray(str) ? JSON.stringify(str).replace(/\\\\/g, '') : str.replace(/\\\\/g, ''))\n\n}"],"sourceRoot":""}