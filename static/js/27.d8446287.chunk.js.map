{"version":3,"sources":["views/apps/invoice/add/AddCard.js","views/apps/invoice/add/AddCardINT.js","views/apps/invoice/add/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","views/apps/invoice/helper/hepler.js","helper/functionHelper.js"],"names":["activeOrgId","activeOrganizationid","activeOrg","activeOrganization","userId","orgUserId","AddCard","useState","block","setBlock","Loader","colourStyles","multiValue","styles","backgroundColor","search","useLocation","searchParams","URLSearchParams","clientOptions","setClientOptions","serviceOptions","setServiceOptions","taxGroupOptions","setTaxGroupOptions","stateOptions","setStateOptions","accountOptions","setAccountOptions","finalTotal","setFinalTotal","finalSubTotal","setFinalSubTotal","convertionRate","setConvertedConvertionRate","convertedAmount","setConvertedAmount","invoiceItems","setInvoiceItems","selectedClient","setSelectedClient","taxValues","setTaxValues","accDetails","setAccDetails","invoiceTaxes","setInvoiceTaxes","exemptionReasonOptions","setExemptionReasonOptions","userOptions","setuserOptions","selEmployees","setSelEmployees","clientId","setClientId","navigate","useNavigate","dispatch","useDispatch","store","useSelector","state","invoice","schema","yup","shape","createdBy","default","contactId","required","uniqueIdentity","contactEmail","contactName","invoiceDate","paymentDue","placeOfSupplyId","subTotalAmount","totalAmount","placeOfSupplyOthers","totalTaxAmount","organizationId","isRcmApplicable","isgstregistered","dueAmount","billingAddressLine1","billingAddressLine2","billingAddressState","billingAddressCity","billingAddressZipCode","billingCurrencyId","currencyid","bankAccountBankName","bankAccountBranchName","bankAccountHolderName","bankAccountId","billingAddressStateOthers","bankAccountIfscCode","bankAccountNumber","organizationAddressLine1","addressline1","organizationAddressLine2","addressline2","organizationCity","organizationcity","organizationState","statename","organizationStateOthers","stateothers","organizationZipCode","pinzipcode","convertionAmount","organizationName","name","organizationImageUrl","organizationimageid","organizationStateCode","stateshortname","organizationGstin","gstin","note","status","calculateTaxes","paymentStatus","rows","of","serviceId","invoiceId","sacCode","price","exemptionReasonId","isTaxApplicable","actualPrice","taxGroupId","taxes","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","setValue","useFieldArray","fields","append","remove","getOrganizationUsers","axios","post","then","response","arr","data","organizationusers","catch","err","console","log","addItem","billingaddresscountriesshorcode","taxPrice","description","getClientData","id","getClient","res","payload","useEffect","get","temp","clients","services","taxgroups","exemptionreasons","transactionaccounts","acc","find","obj","isPrimary","accountBusinessName","bankName","branchAddress","accountHolderName","ifscCode","accountNumber","states","organizationprefernces","invoicenote","replace","onSubmit","moment","valueOf","addInvoice","InvoiceItems","forEach","key","addInvoiceItems","length","users","addInvoiceParticipant","ItemFinalTotalAmount","items","_formValues","finalsubTotalAmount","finalTaxAmount","parseFloat","toFixed","map","a","parser","flat","output","reduce","item","undefined","existItem","taxName","taxAmount","push","Object","assign","JSON","stringify","calculateInvoiceTax","loadItemData","ind","service_price","tax_group_id","desFlg","priceFlg","sacFlg","taxFlg","itemFlg","eachObj","selectedService","saccode","sellingprice","taxgroupid","String","exemptionreasonid","calculateTaxAmount","invoice_item_taxes","taxGroups","taxApplicable","nontaxableflag","istaxapplicable","taxid","calculateTax","percentage","dataTemp","parseInt","taxvaluefn","taxtype","stateid","taxType","type","taxvalues","getTaxValue","keys","billingaddresscity","billingaddressline1","billingaddressline2","billingaddressstatesname","billingaddresszip","currenciessymbol","currenciescode","currenciesname","email","placeofsupplyid","billingaddressstateothers","placeofsupplyothers","currencyConvert","toUpperCase","currencycode","handleUserChange","e","tempArr","Array","isArray","x","blocking","loader","className","xl","md","sm","ErrorText","message","renderError","imageid","color","content","charAt","referrerPolicy","height","width","src","alt","size","value","placeholder","disabled","render","field","onChange","date","dateStr","options","altInput","ref","inputRef","classnames","classNamePrefix","c","val","getOptionLabel","option","getOptionValue","accountType","index","rules","invalid","onInput","lg","onClick","order","xs","billingaddresscountriesname","for","outline","tag","Link","to","bankAccountfn","reviewer","isMulti","TaxComponent","mainInd","refreshTax","itemAmount","parentaxCallback","addTaxItem","calTax","tax","taxamount","i","j","AddCardINT","setRefresTax","bankAccountType","organizationStateOther","country","countryshortname","subInd","props","main","subind","InvoiceAdd","UILoader","children","overlayColor","Tag","style","defaultProps","ComponentSpinner","amount","taxRateInPercentage","TaxType","calculatedTax","str","parse","base_currency","currencies"],"mappings":"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","file":"static/js/27.d8446287.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus, Hash } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n// ** Reactstrap Imports\nimport { currencyConvert } from '@src/helper/functionHelper.js'\nimport { Row, Col, Card, Input, Label, Button, CardBody, CardText, InputGroup, InputGroupText, FormFeedback } from 'reactstrap'\nimport classnames from 'classnames'\n\nimport { addInvoice, addInvoiceItems, getClient, addInvoiceParticipant } from '../store/index'\nimport Avatar from '@components/avatar'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { activeOrganizationid, activeOrganization, orgUserId } from '@src/helper/sassHelper'\nimport { calculateTax, parser } from '../helper/hepler'\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport moment from 'moment'\n\nconst activeOrgId = activeOrganizationid()\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\n\nconst AddCard = () => {\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const colourStyles = {\n    multiValue: (styles, { }) => {\n\n      return {\n        ...styles,\n        backgroundColor: '#7367f0'\n      }\n    }\n  }\n  const search = useLocation().search\n  const searchParams = new URLSearchParams(search)\n\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  const [taxGroupOptions, setTaxGroupOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [accountOptions, setAccountOptions] = useState([])\n  const [finalTotal, setFinalTotal] = useState(0.00)\n  const [finalSubTotal, setFinalSubTotal] = useState(0.00)\n  const [convertionRate, setConvertedConvertionRate] = useState(0.00)\n  const [convertedAmount, setConvertedAmount] = useState(0.00)\n\n  const [invoiceItems, setInvoiceItems] = useState([])\n  const [selectedClient, setSelectedClient] = useState({})\n  const [taxValues, setTaxValues] = useState([])\n  const [accDetails, setAccDetails] = useState([])\n  const [invoiceTaxes, setInvoiceTaxes] = useState([])\n  const [exemptionReasonOptions, setExemptionReasonOptions] = useState([])\n  const [userOptions, setuserOptions] = useState([])\n  const [selEmployees, setSelEmployees] = useState([])\n  const [clientId, setClientId] = useState(null)\n\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n  const accountTypeArr = ['', 'Saving', 'Current']\n  const store = useSelector(state => state.invoice)\n\n  const schema = yup.object().shape({\n    createdBy: yup.string().default(userId),\n    contactId: yup.string().required(\"Please select a Client\"),\n    uniqueIdentity: yup.string(),\n    contactEmail: yup.string(),\n    contactName: yup.string(),\n    invoiceDate: yup.string(),\n    paymentDue: yup.string(),\n    placeOfSupplyId: yup.string().required(\"Please select a Place Of Supply\"),\n    subTotalAmount: yup.string(),\n    totalAmount: yup.string(),\n    placeOfSupplyOthers: yup.string().default(''),\n    totalTaxAmount: yup.string(),\n    organizationId: yup.string().default(activeOrgId),\n    isRcmApplicable: yup.boolean().default(false),\n    isgstregistered: yup.boolean().default(true),\n    dueAmount: yup.string(),\n    billingAddressLine1: yup.string(),\n    billingAddressLine2: yup.string(),\n    billingAddressState: yup.string(),\n    billingAddressCity: yup.string(),\n    billingAddressZipCode: yup.string(),\n    billingCurrencyId: yup.string().default(activeOrg.currencyid),\n    bankAccountBankName: yup.string(),\n    bankAccountBranchName: yup.string(),\n    bankAccountHolderName: yup.string(),\n    bankAccountId: yup.string().required('Please Select Account'),\n    billingAddressStateOthers: yup.string().default(''),\n    bankAccountIfscCode: yup.string(),\n    bankAccountNumber: yup.string(),\n    organizationAddressLine1: yup.string().default(activeOrg.addressline1),\n    organizationAddressLine2: yup.string().default(activeOrg.addressline2),\n    organizationCity: yup.string().default(activeOrg.organizationcity),\n    organizationState: yup.string().default(activeOrg.statename),\n    organizationStateOthers: yup.string().default(activeOrg.stateothers ?? ''),\n    organizationZipCode: yup.string().default(activeOrg.pinzipcode),\n    convertionAmount: yup.string().default(0),\n    organizationName: yup.string().default(activeOrg.name),\n    organizationImageUrl: yup.string().default(activeOrg.organizationimageid || ''),\n    organizationStateCode: yup.string().default(activeOrg.stateshortname),\n    organizationGstin: yup.string().default(activeOrg.gstin),\n    gstin: yup.string(),\n    note: yup.string().default(''),\n    status: yup.number().default(4),\n    calculateTaxes: yup.string(),\n    paymentStatus: yup.number().default(5),\n    rows: yup.array().of(\n      yup.object().shape({\n        serviceId: yup.string().required(\"Please Select Service Item\"),\n        invoiceId: yup.string(),\n        sacCode: yup.string(),\n        price: yup.string(),\n        organizationId: yup.string().default(activeOrgId),\n        exemptionReasonId: yup.string().default(''),\n        isTaxApplicable: yup.boolean().default(true),\n        actualPrice: yup.string().required(),\n        taxGroupId: yup.string().required(\"Pleace Select Tax\"),\n        subTotalAmount: yup.string().required(1),\n        taxes: yup.string()\n      })\n    )\n  })\n\n  const { handleSubmit, formState: { errors }, control, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, append, remove } = useFieldArray({ control, name: 'rows' })\n\n  const getClients = () => {\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getServices = () => {\n    axios.post('/services/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setServiceOptions(arr.services)\n    })\n  }\n\n  const getTaxValue = (taxType) => {\n    const data = {\n      type: taxType\n    }\n    axios.post('/taxvalues/list', data).then(response => {\n      const arr = response.data\n      setTaxValues(arr.taxvalues)\n    })\n  }\n\n  const getExemptionReason = () => {\n    axios.post('/exemptionreasons/dropdown').then(response => {\n      const arr = response.data\n      setExemptionReasonOptions(arr.exemptionreasons)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getTaxGroups = () => {\n    axios.post('/taxgroups/dropdown').then(response => {\n      const arr = response.data\n      setTaxGroupOptions(arr.taxgroups)\n    })\n  }\n\n  const getBankAccounts = () => {\n    axios.post('/transactionaccounts/dropdown').then(response => {\n      const arr = response.data\n      setAccountOptions(arr.transactionaccounts)\n      let acc = arr.transactionaccounts.find((obj) => obj.isPrimary)\n      if (!acc) {\n        acc = arr.transactionaccounts.find((obj) => obj.accountBusinessName === 'Cash')\n      }\n      setAccDetails(acc)\n      setValue('bankAccountBankName', acc.bankName)\n      setValue('bankAccountBranchName', acc.branchAddress)\n      setValue('bankAccountHolderName', acc.accountHolderName)\n      setValue('bankAccountId', acc.id)\n      setValue('bankAccountIfscCode', acc.ifscCode)\n      setValue('bankAccountNumber', acc.accountNumber)\n    })\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown').then(response => {\n      const arr = response.data.organizationusers\n      setuserOptions(arr)\n    }).catch((err) => {\n      console.log(err)\n    })\n  }\n\n  const addItem = (() => {\n    append({ invoiceId: 0, organizationId: activeOrgId, serviceId: '', exemptionReasonId: 0, isTaxApplicable: (activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN'), sacCode: '', actualPrice: 0, taxGroupId: '', subTotalAmount: 0, taxPrice: 0, description: '' })\n  })\n\n  const getClientData = async (id) => {\n    const res = await dispatch(getClient(id))\n    setSelectedClient(res.payload)\n  }\n\n  useEffect(() => {\n\n    if (searchParams.get('clientId')) {\n      const temp = searchParams.get('clientId')\n      setClientId(temp)\n      setValue('contactId', clientId ?? temp)\n      if (!clientId) {\n        getClientData(clientId ?? temp)\n      }\n    }\n\n  }, [searchParams])\n\n  const getDefaultNote = () => {\n    axios.post('/organizationprefernces/getinvoiceprops').then(response => {\n      setValue('note', response.data.organizationprefernces.invoicenote.replace(/(\\\\n)/g, \"\\n\"))\n    })\n  }\n\n  useEffect(() => {\n    // ** Get Clients\n    getClients()\n    getServices()\n    getTaxGroups()\n    getExemptionReason()\n    getBankAccounts()\n    getStates()\n    getDefaultNote()\n    getOrganizationUsers()\n\n  }, [])\n\n  const onSubmit = async data => {\n    setBlock(true)\n    data.invoiceDate = moment(data.invoiceDate).valueOf()\n    data.paymentDue = moment(data.paymentDue).valueOf()\n\n    const temp = data.rows\n    setInvoiceItems(temp)\n    delete data.rows\n    await dispatch(addInvoice(data))\n  }\n\n  const InvoiceItems = async (id) => {\n    invoiceItems.forEach((obj, key) => {\n      invoiceItems[key].invoiceId = id\n    })\n    await dispatch(addInvoiceItems(invoiceItems))\n\n\n    if (selEmployees.length > 0) {\n      const obj = { users: selEmployees, organizationId: activeOrgId, invoiceId: id }\n      await dispatch(addInvoiceParticipant(obj))\n    }\n\n    navigate(`/proposal/view/${store.invoiceId}`)\n  }\n\n  useEffect(() => {\n    addItem()\n  }, [])\n\n  useEffect(async () => {\n    if (store.invoiceId !== null && invoiceItems.length > 0) {\n      await InvoiceItems(store.invoiceId)\n    }\n  }, [store.invoiceId])\n\n  const calculateInvoiceTax = () => {\n\n    const inputArray = control._formValues.rows.map(a => {\n      if (a.taxes) {\n        return parser(a.taxes)\n      } else {\n        return []\n      }\n    })\n\n    let temp = []\n    temp = inputArray.flat()\n    let output = []\n\n    if (activeOrg?.isgstregistered && (activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN')) {\n      output = temp.reduce((acc, item) => {\n        if (item !== undefined) {\n          const existItem = acc.find((obj) => {\n            return item.taxName === obj.taxName\n          })\n          if (existItem) {\n            existItem.taxAmount = parseFloat(existItem.taxAmount) + parseFloat(item.taxAmount)\n          } else {\n            acc.push(Object.assign({}, item))\n          }\n        }\n        return acc\n      }, [])\n    }\n\n\n    setInvoiceTaxes(output)\n    setValue('calculateTaxes', JSON.stringify(output))\n\n  }\n\n  const ItemFinalTotalAmount = () => {\n\n    const items = control._formValues.rows\n    let finalTotal = 0\n    let finalsubTotalAmount = 0\n    let finalTaxAmount = 0\n    items.forEach(obj => {\n      finalTotal = parseFloat(obj.subTotalAmount) + parseFloat(finalTotal)\n      finalsubTotalAmount = parseFloat(obj.price) + parseFloat(finalsubTotalAmount)\n      finalTaxAmount = parseFloat(finalTaxAmount) + parseFloat(obj.taxPrice)\n    })\n\n    control._formValues.subTotalAmount = finalsubTotalAmount\n    control._formValues.totalAmount = finalTotal\n    control._formValues.dueAmount = finalTotal\n    control._formValues.totalTaxAmount = finalTaxAmount\n\n    setFinalTotal(finalTotal)\n    setConvertedAmount(parseFloat(convertionRate * finalTotal).toFixed(2))\n\n    setFinalSubTotal(finalsubTotalAmount)\n\n    calculateInvoiceTax()\n  }\n\n  const removeItem = ((ind) => {\n    remove(ind)\n    ItemFinalTotalAmount()\n  })\n\n  const loadItemData = (ind, desFlg = false, priceFlg = false, sacFlg = false, taxFlg = false, itemFlg = false) => {\n    const eachObj = control._formValues.rows[ind]\n    if (eachObj.serviceId === undefined || eachObj.serviceId === '') {\n      return false\n    }\n    let service_price, tax_group_id\n    const selectedService = serviceOptions.find((a) => a.id === eachObj.serviceId)\n    setValue(`rows[${ind}].serviceId`, eachObj.serviceId)\n    if (itemFlg) {\n      setValue(`rows[${ind}].sacCode`, selectedService.saccode)\n      service_price = selectedService.sellingprice || 0\n      tax_group_id = selectedService.taxgroupid\n      setValue(`rows[${ind}].actualPrice`, service_price)\n      setValue(`rows[${ind}].price`, String(selectedService.sellingprice) || 0)\n      setValue(`rows[${ind}].taxGroupId`, tax_group_id)\n      setValue(`rows[${ind}].description`, selectedService.description)\n      setValue(`rows[${ind}].exemptionReasonId`, selectedService.exemptionreasonid || '')\n    } else {\n      setValue(`rows[${ind}].sacCode`, sacFlg ? eachObj.sacCode : selectedService.saccode)\n      service_price = priceFlg ? eachObj.price : selectedService.sellingprice || 0\n      tax_group_id = taxFlg ? eachObj.taxGroupId : selectedService.taxgroupid\n      setValue(`rows[${ind}].price`, service_price)\n      setValue(`rows[${ind}].actualPrice`, String(selectedService.sellingprice) || 0)\n      setValue(`rows[${ind}].taxGroupId`, tax_group_id)\n      setValue(`rows[${ind}].description`, desFlg ? eachObj.description : selectedService.description)\n      setValue(`rows[${ind}].exemptionReasonId`, selectedService.exemptionreasonid || '')\n    }\n\n    let calculateTaxAmount = 0\n    const invoice_item_taxes = []\n\n    const taxGroups = taxGroupOptions.find((a) => a.id === tax_group_id)\n\n    let taxApplicable = taxGroups !== undefined ? !taxGroups.nontaxableflag : selectedService.istaxapplicable || false\n    taxApplicable = (taxApplicable && (activeOrg?.isgstregistered && (activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN')))\n\n    setValue(`rows[${ind}].isTaxApplicable`, taxApplicable)\n\n    if (taxApplicable) {\n      if (taxGroups !== undefined) {\n        taxValues.forEach(obj => {\n          if (obj.taxid === tax_group_id) {\n            let temp = 0\n            temp = calculateTax(service_price, obj.percentage, 2)\n            calculateTaxAmount = parseFloat(calculateTaxAmount) + parseFloat(temp)\n            const dataTemp = {}\n            dataTemp[\"taxName\"] = `${obj.name} (${obj.percentage}%)`\n            dataTemp[\"taxId\"] = parseInt(obj.id)\n            dataTemp[\"taxNameValue\"] = obj.name\n            dataTemp[\"taxPercentage\"] = String(obj.percentage)\n            dataTemp[\"taxAmount\"] = String(temp)\n\n            invoice_item_taxes.push(dataTemp)\n          }\n        })\n      }\n    }\n\n    setValue(`rows[${ind}].subTotalAmount`, parseFloat(parseFloat(calculateTaxAmount || 0.00) + parseFloat(service_price || 0.00)).toFixed(2))\n    setValue(`rows[${ind}].taxPrice`, parseFloat(calculateTaxAmount).toFixed(2))\n    setValue(`rows[${ind}].taxes`, JSON.stringify(invoice_item_taxes))\n    setValue(`rows[${ind}].createdBy`, userId)\n\n    ItemFinalTotalAmount()\n\n  }\n\n  const taxvaluefn = () => {\n    let taxtype = 1\n    if (activeOrg.stateid === control._formValues.placeOfSupplyId) {\n      taxtype = 2\n    }\n\n    getTaxValue(taxtype)\n\n  }\n\n  useEffect(() => {\n    if (taxValues.length > 0) {\n      control._formValues.rows.forEach((obj, ind) => {\n        loadItemData(ind, false, false, false, false, false)\n      })\n    }\n  }, [taxValues])\n\n  const bankAccountfn = (id) => {\n    const acc = accountOptions.find((obj) => obj.id === id)\n    setAccDetails(acc)\n    setValue('bankAccountBankName', acc.bankName)\n    setValue('bankAccountBranchName', acc.branchAddress)\n    setValue('bankAccountHolderName', acc.accountHolderName)\n    setValue('bankAccountId', acc.id)\n    setValue('bankAccountIfscCode', acc.ifscCode)\n    setValue('bankAccountNumber', acc.accountNumber)\n  }\n\n  useEffect(async () => {\n    if (Object.keys(selectedClient).length > 0) {\n      setValue('billingAddressCity', selectedClient.billingaddresscity || '')\n      setValue('billingAddressLine1', selectedClient.billingaddressline1 || '')\n      setValue('billingAddressLine2', selectedClient.billingaddressline2 || '')\n      setValue('billingAddressState', selectedClient.billingaddressstatesname || '')\n      setValue('billingAddressZipCode', selectedClient.billingaddresszip || '')\n      setValue('billingCurrencyId', selectedClient.currencyid || activeOrg.currencyid)\n      setValue('billingCurrencySymbol', selectedClient.currenciessymbol || '')\n      setValue('billingCurrencyShortName', selectedClient.currenciescode || '')\n      setValue('billingCurrencyName', selectedClient.currenciesname || '')\n      setValue('billingCurrencyName', selectedClient.currenciesname || '')\n      setValue('contactEmail', selectedClient.email)\n      setValue('gstin', selectedClient.gstin)\n      setValue('isgstregistered', (activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN'))\n\n      setValue('contactName', selectedClient.name)\n      setValue('placeOfSupplyId', selectedClient.placeofsupplyid)\n      setValue('convertionAmount', '0')\n      remove()\n      addItem()\n      if (activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN') {\n        taxvaluefn()\n      } else {\n        setValue('billingAddressStateOthers', selectedClient.billingaddressstateothers ?? '')\n        setValue('placeOfSupplyOthers', selectedClient.placeofsupplyothers ?? '')\n      }\n      if (selectedClient.billingaddresscountriesshorcode !== 'IN') {\n        const temp = await currencyConvert(selectedClient.currenciescode.toUpperCase(), activeOrg.currencycode)\n        setConvertedConvertionRate(temp)\n        setValue('convertionAmount', temp)\n      }\n\n    }\n\n  }, [selectedClient])\n\n  const renderError = () => {\n    const keys = Object.keys(errors)\n    const ErrorText = []\n    if (Array.isArray(keys)) {\n      keys.forEach((key) => {\n        if (key !== 'rows') {\n          ErrorText.push(<FormFeedback key={key}>${errors[key]?.message}</FormFeedback>)\n        }\n      })\n    }\n    return ErrorText\n  }\n\n  const handleUserChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    setSelEmployees(tempArr)\n\n  }\n\n  return (\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Row className='invoice-add'>\n          <Fragment>\n            <Col xl={10} md={8} sm={12}>\n\n              <Card className='invoice-preview-card'>\n\n                {/* Header */}\n                <CardBody className='invoice-padding pb-0'>\n                  {\n                    renderError()\n                  }\n                  <div className='d-flex justify-content-between flex-md-row flex-column invoice-spacing mt-0'>\n                    <div>\n                      <div className='logo-wrapper'>\n                        {activeOrg.imageid === null ? <Avatar color={'primary'} className='me-50' content={activeOrg.name !== null ? activeOrg.name?.charAt(0) : ''} /> : <img referrerPolicy=\"no-referrer\" className='rounded me-50' height={75} width={75} src={`https://drive.google.com/thumbnail?id=${activeOrg.imageid}&authuser=0`} alt=\"Organisation Logo\" />}\n                      </div>\n                      <h3 className='text-primary invoice-logo'>{activeOrg.name}</h3>\n                      <p className='card-text mb-25'>{activeOrg.addressline1}</p>\n                      <p className='card-text mb-25'>{activeOrg.addressline2}</p>\n                      <p className='card-text mb-0'>{activeOrg.organizationcity} - {activeOrg.pinzipcode}</p>\n                      <p className='card-text mb-0'>{activeOrg.statename}</p>\n                    </div>\n                    <div className='invoice-number-date mt-md-0 mt-2'>\n                      <div className='d-flex align-items-center justify-content-md-end mb-1'>\n                        <h4 className='invoice-title'>Profoma Invoice</h4>\n                        <InputGroup className='input-group-merge invoice-edit-input-group disabled'>\n                          <InputGroupText>\n                            <Hash size={15} />\n                          </InputGroupText>\n                          <Input\n                            type='number'\n                            className='invoice-edit-input'\n                            value={3171}\n                            placeholder='53634'\n                            disabled\n                          />\n                        </InputGroup>\n                      </div>\n                      <div className='d-flex align-items-center justify-content-md-between mb-1'>\n                        <span className='title required'>Profoma Invoice Date</span>\n                        <Controller\n                          control={control}\n                          name={`invoiceDate`}\n                          id='invoiceDate'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true }}\n                              className='form-control invoice-edit-input date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                      <div className='d-flex align-items-center justify-content-md-between'>\n                        <span className='title required'>Due Date</span>\n                        <Controller\n                          control={control}\n                          name={`paymentDue`}\n                          id='paymentDue'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true }}\n                              className='form-control invoice-edit-input due-date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </CardBody>\n                {/* /Header */}\n\n                <hr className='invoice-spacing' />\n\n                {/* Address and Contact */}\n                <CardBody className='invoice-padding pt-0'>\n                  <Row className='row-bill-to invoice-spacing'>\n                    <Col className='col-bill-to ps-0' xl='6'>\n                      <h6 className='invoice-to-title required'>Profoma Invoice To</h6>\n                      <div className='invoice-customer'>\n                        <Controller\n                          control={control}\n                          name={`contactId`}\n                          id={`contactId`}\n                          render={({ field, ref }) => (\n                            <Select\n                              inputRef={ref}\n                              className={classnames('react-select', { 'is-invalid': errors['contactId'] })}\n                              {...field}\n                              classNamePrefix='select'\n                              options={clientOptions}\n                              value={clientOptions.find(c => { return c.id === field.value })}\n                              onChange={val => { field.onChange(val.id); getClientData(val.id) }}\n                              getOptionLabel={(option) => option.name}\n                              getOptionValue={(option) => option.id}\n                            />\n                          )}\n                        />\n                      </div>\n                      <Col className='pe-0 mt-xl-2' xl='4'>\n                        <table>\n                          <tbody>\n                            <tr>\n                              <td>{selectedClient.billingaddressline1}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddressline2}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddresscity} {selectedClient.billingaddresszip && `-`}  {selectedClient.billingaddresszip}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddressstatesname ?? selectedClient.billingaddressstateothers}</td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </Col>\n                    </Col>\n                    <Col className='col-bill-to ps-0' xl='2'></Col>\n                    <Col className='pe-0 mt-xl-0 mt-2' xl='4'>\n                      <h6 className='mb-2'>Payment Details:</h6>\n                      <table>\n                        <tbody>\n                          <tr>\n                            <td className='pe-1'>Bank Name:</td>\n                            <td>\n                              {accDetails.bankName && <span className='fw-bolder'>{accDetails.bankName}</span>}\n                            </td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Account name:</td>\n                            <td>{accDetails.accountHolderName && <span className='fw-bolder'>{accDetails.accountHolderName}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Branch Name:</td>\n                            <td> {accDetails.branchAddress && <span className='fw-bolder'>{accDetails.branchAddress}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>IFSC Code:</td>\n                            <td>{accDetails.ifscCode && <span className='fw-bolder'>{accDetails.ifscCode} </span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Account Type:</td>\n                            <td>{accDetails.accountType && <span className='fw-bolder'>{accountTypeArr[accDetails.accountType]} </span>}</td>\n                          </tr>\n\n                        </tbody>\n                      </table>\n                    </Col>\n                  </Row>\n                  {(activeOrg?.isgstregistered) &&\n                    <Row className='row-bill-to invoice-spacing'>\n                      <Col className='col-bill-to ps-0' xl='6'>\n                        <h6 className='invoice-to-title mt-2 required'>Place Of Supply</h6>\n                        <div className='invoice-customer'>\n\n                          {(activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN') &&\n                            <Controller\n                              control={control}\n                              name={`placeOfSupplyId`}\n                              id={`placeOfSupplyId`}\n                              render={({ field, ref }) => (\n                                <Select\n                                  inputRef={ref}\n                                  className={classnames('react-select', { 'is-invalid': errors['placeOfSupplyId'] })}\n                                  {...field}\n                                  classNamePrefix='select'\n                                  options={stateOptions}\n                                  value={stateOptions.find(c => { return c.id === field.value })}\n                                  onChange={val => { field.onChange(val.id); taxvaluefn() }}\n                                  getOptionLabel={(option) => option.name}\n                                  getOptionValue={(option) => option.id}\n                                />\n                              )}\n                            />\n                          }\n                          {(activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode !== 'IN') &&\n                            selectedClient?.placeofsupplyothers\n                          }\n                        </div>\n                        {((activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN')) && <div className='mt-1'> GSTIN : {selectedClient.gstin}</div>}\n                      </Col>\n                      <Col className='col-bill-to ps-0' xl='2'></Col>\n                      <Col className='pe-0 mt-xl-0 mt-2' xl='4'>\n                        <table>\n                          <tbody>\n                            <tr>\n                              <td className='invoice-to-title mt-2 '>Currency Code:</td>\n                              <td>\n                                {selectedClient.currenciescode}\n                              </td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </Col>\n                    </Row>\n                  }\n                </CardBody>\n                {/* /Address and Contact */}\n\n                {/* Product Details */}\n                <CardBody className='invoice-padding invoice-product-details'>\n                  {fields.map((item, index) => {\n                    return (\n                      <div key={item.id} className='repeater-wrapper'>\n                        <Row>\n                          <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                            <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                              <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-4 col-sm-12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Item</CardText>\n                                <Controller\n                                  control={control}\n                                  name={`rows[${index}].serviceId`}\n                                  rules={{ required: true }}\n                                  render={({ field, ref }) => (\n                                    <Select\n                                      {...field}\n                                      inputRef={ref}\n                                      className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.serviceId })}\n                                      classNamePrefix='select'\n                                      options={serviceOptions}\n                                      value={serviceOptions.find(c => c.id === field.value)}\n                                      onChange={val => { field.onChange(val.id); loadItemData(index, false, false, false, false, true) }}\n                                      getOptionLabel={(option) => option.name}\n                                      getOptionValue={(option) => option.id}\n                                    />\n                                  )}\n                                />\n                                {errors.rows?.[index]?.serviceId && <FormFeedback>{errors.rows?.[index]?.serviceId.message}</FormFeedback>}\n                                <Controller\n                                  id={`rows_${index}_description`}\n                                  name={`rows[${index}].description`}\n                                  control={control}\n                                  render={({ field }) => <Input className='mt-1' invalid={errors.rows?.[index]?.description && true} onInput={(val) => { field.onChange(val); loadItemData(index, true, false, false, false, false) }} {...field} />}\n                                />\n                              </Col>\n                              {(item.isTaxApplicable) &&\n                                <Col className='my-lg-0 my-2 col-lg-2 col-sm-12'>\n                                  <CardText className='col-title mb-md-2 mb-0'>SAC Code</CardText>\n                                  <Controller\n                                    id={`rows_${index}_sacCode`}\n                                    name={`rows[${index}].sacCode`}\n                                    control={control}\n                                    render={({ field }) => <Input type='text' invalid={errors.rows?.[index]?.sacCode && true} onInput={(val) => { field.onChange(val); loadItemData(index, false, true, true, false, false) }} {...field} />}\n                                  />\n                                  {errors.rows?.[index]?.sacCode && <FormFeedback>{errors.rows?.[index]?.sacCode.message}</FormFeedback>}\n                                </Col>\n                              }\n                              <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                                <CardText className='col-title mb-md-2 mb-0'>Price</CardText>\n                                <Controller\n                                  id={`rows_${index}_price`}\n                                  name={`rows[${index}].price`}\n                                  control={control}\n                                  render={({ field }) => <Input type='number' id={`input_rows_${index}_price`} onInput={(val) => { field.onChange(val); loadItemData(index, false, true, false, false, false) }} {...field} invalid={errors.rows?.[index]?.price && true} />}\n                                />\n                                {errors.rows?.[index]?.price && <FormFeedback>{errors.rows?.[index]?.price.message}</FormFeedback>}\n                              </Col>\n                              {(item.isTaxApplicable) &&\n                                <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                                  <CardText className='col-title mb-md-50 mb-0'>Tax Rate</CardText>\n                                  <Controller\n                                    control={control}\n                                    name={`rows[${index}].taxGroupId`}\n                                    rules={{ required: true }}\n                                    render={({ field, ref }) => (\n                                      <Select\n                                        {...field}\n                                        inputRef={ref}\n                                        className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.taxGroupId })}\n                                        classNamePrefix='select'\n                                        options={taxGroupOptions}\n                                        value={taxGroupOptions.find(c => c.id === field.value)}\n                                        onChange={(val) => { field.onChange(val.id); loadItemData(index, false, true, false, true, false) }}\n                                        getOptionLabel={(option) => option.name}\n                                        getOptionValue={(option) => option.id}\n                                      />\n                                    )}\n                                  />\n                                  {errors.rows?.[index]?.taxGroupId && <FormFeedback>{errors.rows?.[index]?.taxGroupId.message}</FormFeedback>}\n\n                                  {\n                                    !item.isTaxApplicable && <Controller\n                                      control={control}\n                                      name={`rows[${index}].exemptionReasonId`}\n                                      rules={{ required: true }}\n                                      render={({ field, ref }) => (\n                                        <Select\n                                          {...field}\n                                          inputRef={ref}\n                                          className={classnames('react-select mt-1', { 'is-invalid': errors.rows?.[index]?.taxGroupId })}\n                                          classNamePrefix='select'\n                                          options={exemptionReasonOptions}\n                                          value={exemptionReasonOptions.find(c => c.id === field.value)}\n                                          onChange={(val) => { field.onChange(val.id) }}\n                                          getOptionLabel={(option) => option.name}\n                                          getOptionValue={(option) => option.id}\n                                        />\n                                      )}\n                                    />\n                                  }\n\n                                </Col>\n                              }\n                              <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Amount</CardText>\n                                {control._formValues.rows[index].subTotalAmount} {selectedClient?.currenciessymbol}\n                              </Col>\n                            </Row>\n                            <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                              <X size={18} className='cursor-pointer' onClick={() => { removeItem(index) }} />\n                            </div>\n                          </Col>\n                        </Row>\n                      </div>\n                    )\n                  })}\n                  <Row className='mt-1'>\n                    <Col sm='12' className='px-0'>\n                      <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                        <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                      </Button>\n                    </Col>\n                  </Row>\n                </CardBody>\n\n                {/* /Product Details */}\n\n                {/* Invoice Total */}\n                <CardBody className='invoice-padding'>\n                  <Row className='invoice-sales-total-wrapper'>\n                    <Col className='mt-md-0 mt-3' md={{ size: '6', order: 1 }} xs={{ size: 12, order: 2 }}>\n                      {selectedClient.billingaddresscountriesname !== 'IN' &&\n\n                        <p>Amount in {activeOrg.currencycode} : {convertedAmount} </p>\n                      }\n                    </Col>\n                    <Col className='d-flex justify-content-end' md={{ size: '6', order: 2 }} xs={{ size: 12, order: 1 }}>\n                      <div className='invoice-total-wrapper'>\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>\n                            {(activeOrg?.isgstregistered && (activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN')) && 'Pre Tax'}  Amount:</p>\n                          <p className='invoice-total-amount'>{finalSubTotal} {selectedClient?.currenciessymbol}</p>\n                        </div>\n                        {(activeOrg?.isgstregistered && (activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN')) && <div>\n                          {\n                            invoiceTaxes.map((obj, ind) => {\n                              return (<div key={ind} className='invoice-total-item'>\n                                <p className='invoice-total-title'>{obj?.taxName}</p>\n                                <p className='invoice-total-amount'>{obj?.taxAmount} {selectedClient?.currenciessymbol}</p>\n                              </div>)\n                            })\n                          }\n                        </div>\n                        }\n                        <hr className='my-50' />\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>Total Payable:</p>\n                          <p className='invoice-total-amount'>{finalTotal} {selectedClient?.currenciessymbol}</p>\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Total */}\n\n                <hr className='invoice-spacing mt-0' />\n\n                {/* Invoice Note */}\n                <CardBody className='invoice-padding py-0'>\n                  <Row>\n                    <Col>\n                      <div className='mb-2'>\n                        <Label for='note' className='form-label fw-bold'>\n                          Note:\n                        </Label>\n                        <Controller\n                          id='note'\n                          name='note'\n                          control={control}\n                          render={({ field }) => <Input type=\"textarea\" value={field.value} invalid={errors.note && true} {...field} />}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Note */}\n              </Card>\n\n            </Col>\n            <Col xl={2} md={4} sm={12}>\n              <Card className='invoice-action-wrapper'>\n                <CardBody>\n                  <Button color='primary' type='submit' block outline className='mb-75'>\n                    Save\n                  </Button>\n                  <Button color='warning' block outline tag={Link} to='/invoice/list'>\n                    Cancel\n                  </Button>\n                </CardBody>\n              </Card>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50 required'>Accept payments via</p>\n                  <Controller\n                    control={control}\n                    name={`bankAccountId`}\n                    rules={{ required: true }}\n                    render={({ field, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select mt-1', { 'is-invalid': errors.bankAccountId })}\n                        classNamePrefix='select'\n                        options={accountOptions}\n                        value={accountOptions.find(c => c.id === field.value)}\n                        onChange={(val) => { field.onChange(val.id); bankAccountfn(val.id) }}\n                        getOptionLabel={(option) => option.accountHolderName}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n                  />\n                </div>\n              </div>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50'>Select Employee</p>\n\n                  <Controller\n                    control={control}\n                    name=\"reviewer\"\n                    id=\"reviewer\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.reviewer })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={userOptions}\n                        isMulti={true}\n                        value={value} // set selected values\n                        onChange={handleUserChange}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                        styles={colourStyles}\n                      />\n                    )}\n\n                  />\n                </div>\n              </div>\n            </Col>\n          </Fragment >\n        </Row>\n      </form >\n    </UILoader>\n\n  )\n}\n\nexport default AddCard\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus, Hash, Trash2, PlusCircle } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n// ** Reactstrap Imports\nimport { Row, Col, Card, Input, Label, Button, CardBody, CardText, InputGroup, InputGroupText, FormFeedback } from 'reactstrap'\nimport classnames from 'classnames'\n\nimport { addInvoice, addInvoiceItems, getClient, addInvoiceParticipant } from '../store/index'\nimport Avatar from '@components/avatar'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { activeOrganizationid, activeOrganization, orgUserId } from '@src/helper/sassHelper'\nimport { calculateTax } from '../helper/hepler'\nimport { Link, useNavigate } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport moment from 'moment'\n\nconst activeOrgId = activeOrganizationid()\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\n\nconst TaxComponent = ({ mainInd, refreshTax, taxGroupOptions, itemAmount, parentaxCallback, control }) => {\n\n  const { fields, append, remove } = useFieldArray({ control, name: `rows[${mainInd}].taxes` })\n\n  const addTaxItem = () => {\n    append({ taxGroupId: '', taxAmount: 0, taxName: '' })\n  }\n\n  const removeItem = (i) => {\n    remove(i)\n  }\n\n  useEffect(() => {\n    if (control._formValues.rows[mainInd]?.taxes.length === 0) {\n      addTaxItem()\n    }\n  }, [])\n\n  const calTax = (id, ind) => {\n    const tax = taxGroupOptions.find((obj) => obj.id === id)\n    const taxamount = calculateTax(itemAmount, tax.percentage, 2)\n    parentaxCallback({ taxAmount: taxamount, taxName: tax.name, taxGroupId: tax.id }, mainInd, ind)\n\n  }\n  useEffect(() => {\n    if (refreshTax) {\n      control._formValues.rows[mainInd].taxes.forEach((tax, i) => {\n        if (tax.taxGroupId !== '') {\n          calTax(tax.taxGroupId, i)\n        }\n      })\n    }\n  }, [refreshTax])\n  return (\n\n    fields.map((item, j) => {\n      return (\n\n        <Row className='d-flex align-items-center justify-content-between pe-lg-0 pe-1 py-50' md={12} key={item.id}>\n          <Col md={6}></Col>\n          <Col md={1} className='d-flex justify-content-end'>\n            {j === fields.length - 1 &&\n              <PlusCircle size={'16'} className='text-primary' onClick={() => addTaxItem()} />\n            }\n          </Col>\n          <Col className='my-lg-0 mt-2' lg='3' sm='12'>\n            <Controller\n              control={control}\n              name={`taxes[${j}].taxGroupId`}\n              rules={{ required: true }}\n              render={({ field, ref }) => (\n                <Select\n                  {...field}\n                  inputRef={ref}\n                  className={classnames('react-select')}\n                  classNamePrefix='select'\n                  options={taxGroupOptions}\n                  placeholder='Select Tax Rate'\n                  value={taxGroupOptions.find(c => c.id === field.value)}\n                  onChange={(val) => { field.onChange(val.id); calTax(val.id, j) }}\n                  getOptionLabel={(option) => option.name}\n                  getOptionValue={(option) => option.id}\n                />\n              )}\n            />\n\n          </Col>\n          <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n            {control._formValues.rows[mainInd].taxes[j].taxAmount}\n          </Col>\n          <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n            {control._formValues.rows[mainInd].taxes.length > 1 &&\n              <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                <Trash2 size={16} onClick={() => removeItem(j)} />\n              </div>\n            }\n          </Col>\n        </Row>\n      )\n    })\n  )\n}\n\n\nconst AddCardINT = () => {\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const colourStyles = {\n    multiValue: (styles, { }) => {\n\n      return {\n        ...styles,\n        backgroundColor: '#7367f0'\n      }\n    }\n  }\n  const accountTypeArr = ['', 'Saving', 'Checking']\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  const [taxGroupOptions, setTaxGroupOptions] = useState([])\n  const [accountOptions, setAccountOptions] = useState([])\n  const [finalTotal, setFinalTotal] = useState(0.00)\n  const [finalSubTotal, setFinalSubTotal] = useState(0.00)\n  const [refreshTax, setRefresTax] = useState(false)\n  const [invoiceItems, setInvoiceItems] = useState([])\n  const [selectedClient, setSelectedClient] = useState({})\n  const [accDetails, setAccDetails] = useState([])\n  const [invoiceTaxes, setInvoiceTaxes] = useState([])\n  const [userOptions, setuserOptions] = useState([])\n  const [selEmployees, setSelEmployees] = useState([])\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n\n  const store = useSelector(state => state.invoice)\n  const getClients = () => {\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getServices = () => {\n    axios.post('/services/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setServiceOptions(arr.services)\n    })\n  }\n\n  const getTaxGroups = () => {\n    axios.post('/taxgroups/dropdown', { country: activeOrg.countryshortname }).then(response => {\n      const arr = response.data\n      setTaxGroupOptions(arr.taxgroups)\n    })\n  }\n\n  const getBankAccounts = () => {\n    axios.post('/transactionaccounts/dropdown').then(response => {\n      const arr = response.data\n      setAccountOptions(arr.transactionaccounts)\n    })\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown').then(response => {\n      const arr = response.data.organizationusers\n      setuserOptions(arr)\n    }).catch((err) => {\n      console.log(err)\n    })\n  }\n\n\n  const getClientData = async (id) => {\n    const res = await dispatch(getClient(id))\n    setSelectedClient(res.payload)\n  }\n\n  const schema = yup.object().shape({\n    createdBy: yup.string().default(userId),\n    contactId: yup.string().required(\"Please select a Client\"),\n    uniqueIdentity: yup.string(),\n    contactEmail: yup.string(),\n    contactName: yup.string(),\n    invoiceDate: yup.string(),\n    paymentDue: yup.string(),\n    placeOfSupplyOthers: yup.string().default(activeOrg.stateothers).required(\"Please select a Place Of Supply\"),\n    subTotalAmount: yup.string(),\n    totalAmount: yup.string(),\n    totalTaxAmount: yup.string(),\n    organizationId: yup.string().default(activeOrgId),\n    isRcmApplicable: yup.boolean().default(false),\n    dueAmount: yup.string(),\n    billingAddressLine1: yup.string(),\n    billingAddressLine2: yup.string(),\n    billingAddressState: yup.string(),\n    billingAddressCity: yup.string(),\n    billingAddressZipCode: yup.string(),\n    billingCurrencyId: yup.string().default(activeOrg.currencyid),\n    bankAccountBankName: yup.string(),\n    bankAccountType: yup.string(),\n    bankAccountHolderName: yup.string(),\n    bankAccountId: yup.string().required('Please Select Account'),\n    bankAccountNumber: yup.string(),\n    organizationAddressLine1: yup.string().default(activeOrg.addressline1),\n    organizationAddressLine2: yup.string().default(activeOrg.addressline2),\n    organizationCity: yup.string().default(activeOrg.organizationcity),\n    organizationStateOther: yup.string().default(activeOrg.stateothers || ''),\n    organizationZipCode: yup.string().default(activeOrg.pinzipcode),\n    organizationName: yup.string().default(activeOrg.name),\n    organizationImageUrl: yup.string().default(activeOrg.organizationimageid || ''),\n    organizationStateCode: yup.string().default(activeOrg.stateothers),\n    organizationGstin: yup.string().default(activeOrg.gstin),\n    gstin: yup.string(),\n    note: yup.string().default(''),\n    status: yup.number().default(4),\n    calculateTaxes: yup.string(),\n    paymentStatus: yup.number().default(5),\n    rows: yup.array().of(\n      yup.object().shape({\n        serviceId: yup.string().required(\"Please Select Service Item\"),\n        invoiceId: yup.string(),\n        price: yup.string(),\n        organizationId: yup.string().default(activeOrgId),\n        isTaxApplicable: yup.boolean().default(true),\n        actualPrice: yup.string().required(),\n        subTotalAmount: yup.string().required(1),\n        taxes: yup.array().of(\n          yup.object().shape({\n            taxGroupId: yup.string().required(\"Pleace Select Tax\"),\n            taxAmount: yup.string().required(1),\n            taxName: yup.string()\n          })\n        )\n      })\n    )\n  })\n\n  const { handleSubmit, formState: { errors }, control, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, append, remove } = useFieldArray({ control, name: 'rows' })\n\n  const getDefaultNote = () => {\n    axios.post('/organizationprefernces/getinvoiceprops').then(response => {\n      setValue('note', response.data.organizationprefernces?.invoicenote.replace(/(\\\\n)/g, \"\\n\"))\n    })\n  }\n\n  useEffect(() => {\n    // ** Get Clients\n    getClients()\n    getServices()\n    getTaxGroups()\n    getBankAccounts()\n    getDefaultNote()\n    getOrganizationUsers()\n\n  }, [])\n\n  const onSubmit = async data => {\n    setBlock(true)\n    data.invoiceDate = moment(data.invoiceDate).valueOf()\n    data.paymentDue = moment(data.paymentDue).valueOf()\n\n    const temp = data.rows\n    setInvoiceItems(temp)\n    delete data.rows\n    await dispatch(addInvoice(data))\n  }\n\n  const InvoiceItems = async (id) => {\n    invoiceItems.forEach((obj, key) => {\n      invoiceItems[key].invoiceId = id\n    })\n    await dispatch(addInvoiceItems(invoiceItems))\n\n\n    if (selEmployees.length > 0) {\n      const obj = { users: selEmployees, organizationId: activeOrgId, invoiceId: id }\n      await dispatch(addInvoiceParticipant(obj))\n    }\n\n    navigate(`/proposal/view/${store.invoiceId}`)\n  }\n\n  const addItem = (() => {\n    append({ invoiceId: 0, organizationId: activeOrgId, serviceId: '', exemptionReasonId: '', isTaxApplicable: true, sacCode: '', actualPrice: 0, taxGroupId: '', subTotalAmount: 0, taxPrice: 0, description: '', taxes: [{ taxGroupId: '', taxAmount: 0, taxName: '' }] })\n  })\n\n\n  useEffect(() => {\n    addItem()\n  }, [])\n\n  useEffect(async () => {\n    if (store.invoiceId !== null && invoiceItems.length > 0) {\n      await InvoiceItems(store.invoiceId)\n    }\n  }, [store.invoiceId])\n\n  const calculateInvoiceTax = () => {\n\n    const inputArray = control._formValues.rows.map(a => {\n      if (a.taxes) {\n        return a.taxes\n      } else {\n        return []\n      }\n    })\n\n    let temp = []\n    temp = inputArray.flat()\n    let output = []\n    output = temp.reduce((acc, item) => {\n      if (item !== undefined) {\n        const existItem = acc.find((obj) => {\n          return item.taxName === obj.taxName\n        })\n        if (existItem) {\n          existItem.taxAmount = parseFloat(existItem.taxAmount) + parseFloat(item.taxAmount)\n        } else {\n          acc.push(Object.assign({}, item))\n        }\n      }\n      return acc\n    }, [])\n\n    setInvoiceTaxes(output)\n    setValue('calculateTaxes', JSON.stringify(output))\n\n  }\n\n  const ItemFinalTotalAmount = () => {\n\n    const items = control._formValues.rows\n    let finalTotal = 0\n    let finalsubTotalAmount = 0\n    let finalTaxAmount = 0\n    items.forEach(obj => {\n      finalTotal = parseFloat(obj.subTotalAmount) + parseFloat(finalTotal)\n      finalsubTotalAmount = parseFloat(obj.price) + parseFloat(finalsubTotalAmount)\n      finalTaxAmount = parseFloat(finalTaxAmount) + parseFloat(obj.taxPrice)\n    })\n\n    control._formValues.subTotalAmount = finalsubTotalAmount\n    control._formValues.totalAmount = finalTotal\n    control._formValues.dueAmount = finalTotal\n    control._formValues.totalTaxAmount = finalTaxAmount\n\n    setFinalTotal(finalTotal)\n    setFinalSubTotal(finalsubTotalAmount)\n\n    calculateInvoiceTax()\n  }\n\n  const removeItem = ((ind) => {\n    remove(ind)\n    ItemFinalTotalAmount()\n  })\n\n  const loadItemData = (ind, desFlg = false, priceFlg = false, sacFlg = false, taxFlg = false, itemFlg = false, taxes = {}, subInd = 0) => {\n    const eachObj = control._formValues.rows[ind]\n    if (eachObj.serviceId === undefined || eachObj.serviceId === '') {\n      return false\n    }\n    let service_price, tax_group_id\n    const selectedService = serviceOptions.find((a) => a.id === eachObj.serviceId)\n    setValue(`rows[${ind}].serviceId`, eachObj.serviceId)\n    if (itemFlg) {\n      setValue(`rows[${ind}].sacCode`, selectedService.saccode)\n      service_price = selectedService.sellingprice || 0\n      tax_group_id = selectedService.taxgroupid\n      setValue(`rows[${ind}].actualPrice`, service_price)\n      setValue(`rows[${ind}].price`, String(selectedService.sellingprice) || 0)\n      setValue(`rows[${ind}].taxGroupId`, tax_group_id)\n      setValue(`rows[${ind}].description`, selectedService.description)\n\n    } else {\n      setValue(`rows[${ind}].sacCode`, sacFlg ? eachObj.sacCode : selectedService.saccode)\n      service_price = priceFlg ? eachObj.price : selectedService.sellingprice || 0\n      tax_group_id = taxFlg ? eachObj.taxGroupId : selectedService.taxgroupid\n      setValue(`rows[${ind}].price`, service_price)\n      setValue(`rows[${ind}].actualPrice`, String(selectedService.sellingprice) || 0)\n      setValue(`rows[${ind}].taxGroupId`, tax_group_id)\n      setValue(`rows[${ind}].description`, desFlg ? eachObj.description : selectedService.description)\n\n    }\n\n    let calculateTaxAmount = 0\n\n    if (Object.keys(taxes).length > 0 && taxFlg) {\n\n      control._formValues.rows[ind].taxes[subInd] = taxes\n      const temp = control._formValues.rows[ind].taxes\n\n      setValue(`rows[${ind}].taxes`, temp)\n    }\n    control._formValues.rows[ind].taxes.forEach((obj) => {\n      calculateTaxAmount += obj.taxAmount\n    })\n\n    setValue(`rows[${ind}].isTaxApplicable`, true)\n    setValue(`rows[${ind}].subTotalAmount`, parseFloat(parseFloat(calculateTaxAmount || 0.00) + parseFloat(service_price || 0.00)).toFixed(2))\n    setValue(`rows[${ind}].taxPrice`, parseFloat(calculateTaxAmount).toFixed(2))\n    setValue(`rows[${ind}].createdBy`, userId)\n\n    ItemFinalTotalAmount()\n\n  }\n\n  const parentaxCallback = (props, main, subind) => {\n    if (props) {\n      setRefresTax(false)\n      loadItemData(main, true, true, true, true, false, props, subind)\n    }\n  }\n\n  const bankAccountfn = (id) => {\n    const acc = accountOptions.find((obj) => obj.id === id)\n    setAccDetails(acc)\n    setValue('bankAccountBankName', acc.bankName)\n    setValue('bankAccountType', acc.accountType)\n    setValue('bankAccountHolderName', acc.accountHolderName)\n    setValue('bankAccountId', acc.id)\n    setValue('bankAccountNumber', acc.accountNumber)\n  }\n\n  useEffect(() => {\n    if (Object.keys(selectedClient).length > 0) {\n      setValue('billingAddressCity', selectedClient.billingaddresscity || '')\n      setValue('billingAddressLine1', selectedClient.billingaddressline1 || '')\n      setValue('billingAddressLine2', selectedClient.billingaddressline2 || '')\n      setValue('billingAddressState', selectedClient.billingaddressstateothers || '')\n      setValue('billingAddressZipCode', selectedClient.billingaddresszip || '')\n      setValue('billingCurrencyId', selectedClient.currencyid || activeOrg.currencyid)\n      setValue('billingCurrencySymbol', selectedClient.currenciessymbol || '')\n      setValue('billingCurrencyShortName', selectedClient.currenciescode || '')\n      setValue('billingCurrencyName', selectedClient.currenciesname || '')\n      setValue('contactEmail', selectedClient.email)\n      setValue('gstin', selectedClient.gstin)\n      setValue('contactName', selectedClient.name)\n      setValue('placeOfSupplyOthers', selectedClient.placeofsupplyothers)\n    }\n\n  }, [selectedClient])\n\n  const renderError = () => {\n    const keys = Object.keys(errors)\n    const ErrorText = []\n    if (Array.isArray(keys)) {\n      keys.forEach((key) => {\n        if (key !== 'rows') {\n          ErrorText.push(<FormFeedback key={key}>${errors[key]?.message}</FormFeedback>)\n        }\n      })\n    }\n    return ErrorText\n  }\n\n  const handleUserChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    setSelEmployees(tempArr)\n\n  }\n\n  return (\n    <UILoader blocking={block} loader={< Loader />} >\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Row className='invoice-add'>\n          <Fragment>\n            <Col xl={10} md={8} sm={12}>\n\n              <Card className='invoice-preview-card'>\n\n                {/* Header */}\n                <CardBody className='invoice-padding pb-0'>\n                  {\n                    renderError()\n                  }\n                  <div className='d-flex justify-content-between flex-md-row flex-column invoice-spacing mt-0'>\n                    <div>\n                      <div className='logo-wrapper'>\n                      {activeOrg.imageid === null ? <Avatar color={'primary'} className='me-50' content={activeOrg.name !== null ? activeOrg.name?.charAt(0) : ''} /> : <img referrerPolicy=\"no-referrer\" className='rounded me-50' height={75} width={75} src={`https://drive.google.com/thumbnail?id=${activeOrg.imageid}&authuser=0`} alt=\"Organisation Logo\" />}\n                      </div>\n                      <h3 className='text-primary invoice-logo'>{activeOrg.name}</h3>\n                      <p className='card-text mb-25'>{activeOrg.addressline1}</p>\n                      <p className='card-text mb-25'>{activeOrg.addressline2}</p>\n                      <p className='card-text mb-0'>{activeOrg.organizationcity} - {activeOrg.pinzipcode}</p>\n                      <p className='card-text mb-0'>{activeOrg.statename}</p>\n                    </div>\n                    <div className='invoice-number-date mt-md-0 mt-2'>\n                      <div className='d-flex align-items-center justify-content-md-end mb-1'>\n                        <h4 className='invoice-title'>Profoma Invoice</h4>\n                        <InputGroup className='input-group-merge invoice-edit-input-group disabled'>\n                          <InputGroupText>\n                            <Hash size={15} />\n                          </InputGroupText>\n                          <Input\n                            type='number'\n                            className='invoice-edit-input'\n                            value={3171}\n                            placeholder='53634'\n                            disabled\n                          />\n                        </InputGroup>\n                      </div>\n                      <div className='d-flex align-items-center mb-1'>\n                        <span className='title required'>Profoma Invoice Date</span>\n                        <Controller\n                          control={control}\n                          name={`invoiceDate`}\n                          id='invoiceDate'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true }}\n                              className='form-control invoice-edit-input date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                      <div className='d-flex align-items-center'>\n                        <span className='title required'>Due Date</span>\n                        <Controller\n                          control={control}\n                          name={`paymentDue`}\n                          id='paymentDue'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true }}\n                              className='form-control invoice-edit-input due-date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </CardBody>\n                {/* /Header */}\n\n                <hr className='invoice-spacing' />\n\n                {/* Address and Contact */}\n                <CardBody className='invoice-padding pt-0'>\n                  <Row className='row-bill-to invoice-spacing'>\n                    <Col className='col-bill-to ps-0' xl='6'>\n                      <h6 className='invoice-to-title required'>Profoma Invoice To</h6>\n                      <div className='invoice-customer'>\n                        <Controller\n                          control={control}\n                          name={`contactId`}\n                          id={`contactId`}\n                          render={({ field, ref }) => (\n                            <Select\n                              inputRef={ref}\n                              className={classnames('react-select', { 'is-invalid': errors['contactId'] })}\n                              {...field}\n                              classNamePrefix='select'\n                              options={clientOptions}\n                              value={clientOptions.find(c => { return c.id === field.value })}\n                              onChange={val => { field.onChange(val.id); getClientData(val.id) }}\n                              getOptionLabel={(option) => option.name}\n                              getOptionValue={(option) => option.id}\n                            />\n                          )}\n                        />\n                      </div>\n                      <Col className='pe-0 mt-xl-2' xl='4'>\n                        <table>\n                          <tbody>\n                            <tr>\n                              <td>{selectedClient.billingaddressline1}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddressline2}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddresscity} {selectedClient.billingaddresszip && `-`}  {selectedClient.billingaddresszip}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddressstateothers}</td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </Col>\n                    </Col>\n                    <Col className='col-bill-to ps-0' xl='2'></Col>\n                    <Col className='pe-0 mt-xl-0 mt-2' xl='4'>\n                      <h6 className='mb-2'>Payment Details:</h6>\n                      <table>\n                        <tbody>\n                          <tr>\n                            <td className='pe-1'>Bank Name:</td>\n                            <td>\n                              {accDetails.bankName && <span className='fw-bolder'>{accDetails.bankName}</span>}\n                            </td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Account name:</td>\n                            <td>{accDetails.accountHolderName && <span className='fw-bolder'>{accDetails.accountHolderName}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Branch Name:</td>\n                            <td> {accDetails.branchAddress && <span className='fw-bolder'>{accDetails.branchAddress}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Account Type:</td>\n                            <td>{accDetails.accountType && <span className='fw-bolder'>{accountTypeArr[accDetails.accountType]} </span>}</td>\n                          </tr>\n                          {selectedClient.currenciescode &&\n                            <tr>\n                              <td className='pe-1'>Currency code:</td>\n                              <td>{selectedClient.currenciescode}</td>\n                            </tr>\n                          }\n                        </tbody>\n                      </table>\n                    </Col>\n                  </Row>\n                  <Row className='row-bill-to invoice-spacing'>\n                    <Col className='col-bill-to ps-0' xl='6'>\n                      <h6 className='invoice-to-title mt-2 required'>Place Of Supply</h6>\n                      <Col className='invoice-customer' lg={12} >\n                        <Controller\n                          control={control}\n                          name={`placeOfSupplyOthers`}\n                          id={`placeOfSupplyOthers`}\n                          render={({ field }) => (\n                            <Input className='form-control col-12' {...field} />\n                          )}\n                        />\n                      </Col>\n                      {(selectedClient.gstin !== '' && selectedClient.gstin !== undefined) && <div className='mt-1'> GSTIN : {selectedClient.gstin}</div>}\n                    </Col>\n                    <Col className='col-bill-to ps-0' xl='2'></Col>\n                  </Row>\n                </CardBody>\n                {/* /Address and Contact */}\n\n                {/* Product Details */}\n                <CardBody className='invoice-padding invoice-product-details'>\n                  {fields.map((item, index) => {\n                    return (\n                      <div key={item.id} className='repeater-wrapper'>\n                        <Row className='product-details-border'>\n                          <Row className='d-lg-flex position-relative w-100 pe-lg-0 pe-1 py-50' md={12}>\n                            <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2' md={3} sm={12}>\n                              <CardText className='col-title mb-md-50 mb-0'>Item</CardText>\n                              <Controller\n                                control={control}\n                                name={`rows[${index}].serviceId`}\n                                rules={{ required: true }}\n                                render={({ field, ref }) => (\n                                  <Select\n                                    {...field}\n                                    inputRef={ref}\n                                    className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.serviceId })}\n                                    classNamePrefix='select'\n                                    options={serviceOptions}\n                                    value={serviceOptions.find(c => c.id === field.value)}\n                                    onChange={val => { field.onChange(val.id); setRefresTax(true); loadItemData(index, false, false, false, false, true) }}\n                                    getOptionLabel={(option) => option.name}\n                                    getOptionValue={(option) => option.id}\n                                  />\n                                )}\n                              />\n                              {errors.rows?.[index]?.serviceId && <FormFeedback>{errors.rows?.[index]?.serviceId.message}</FormFeedback>}\n\n                            </Col>\n                            <Col lg={4}>\n                              <Controller\n                                id={`rows_${index}_description`}\n                                name={`rows[${index}].description`}\n                                control={control}\n                                render={({ field }) => <Input placeholder='Description' invalid={errors.rows?.[index]?.description && true} onInput={(val) => { field.onChange(val); loadItemData(index, true, false, false, false, false) }} {...field} />}\n                              />\n                            </Col>\n                            <Col className='my-lg-0 my-2' lg='3' sm='12'>\n                              <CardText className='col-title mb-md-2 mb-0'>Price</CardText>\n                              <Controller\n                                id={`rows_${index}_price`}\n                                name={`rows[${index}].price`}\n                                control={control}\n                                render={({ field }) => <Input type='number' id={`input_rows_${index}_price`} onInput={(val) => { field.onChange(val); loadItemData(index, false, true, false, false, false); setRefresTax(true) }} {...field} invalid={errors.rows?.[index]?.price && true} />}\n                              />\n                              {errors.rows?.[index]?.price && <FormFeedback>{errors.rows?.[index]?.price.message}</FormFeedback>}\n                            </Col>\n                            <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                              <CardText className='col-title mb-md-50 mb-0'>Amount</CardText>\n                              {control._formValues.rows[index].subTotalAmount}\n                            </Col>\n                            <Col md={1}>\n                              <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                                <Trash2 size={18} className='cursor-pointer' onClick={() => { removeItem(index) }} />\n                              </div>\n                            </Col>\n                          </Row>\n                          <TaxComponent parentaxCallback={parentaxCallback} refreshTax={refreshTax} taxGroupOptions={taxGroupOptions} mainInd={index} itemAmount={control._formValues.rows[index].price} errors={errors} control={control} />\n                        </Row>\n                      </div>\n                    )\n                  })}\n                  <Row className='mt-1'>\n                    <Col sm='12' className='px-0'>\n                      <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                        <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                      </Button>\n                    </Col>\n                  </Row>\n                </CardBody>\n\n                {/* /Product Details */}\n\n                {/* Invoice Total */}\n                <CardBody className='invoice-padding'>\n                  <Row className='invoice-sales-total-wrapper'>\n                    <Col className='mt-md-0 mt-3' md={{ size: '6', order: 1 }} xs={{ size: 12, order: 2 }}>\n\n                    </Col>\n                    <Col className='d-flex justify-content-end' md={{ size: '6', order: 2 }} xs={{ size: 12, order: 1 }}>\n                      <div className='invoice-total-wrapper'>\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>Pre Tax Amount:</p>\n                          <p className='invoice-total-amount'>{finalSubTotal}</p>\n                        </div>\n                        <div>\n                          {\n                            invoiceTaxes.map((obj, ind) => {\n                              return (<div key={ind} className='invoice-total-item'>\n                                <p className='invoice-total-title'>{obj?.taxName}</p>\n                                <p className='invoice-total-amount'>{obj?.taxAmount}</p>\n                              </div>)\n                            })\n                          }\n                        </div>\n                        <hr className='my-50' />\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>Total Payable:</p>\n                          <p className='invoice-total-amount'>{finalTotal}</p>\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Total */}\n\n                <hr className='invoice-spacing mt-0' />\n\n                {/* Invoice Note */}\n                <CardBody className='invoice-padding py-0'>\n                  <Row>\n                    <Col>\n                      <div className='mb-2'>\n                        <Label for='note' className='form-label fw-bold'>\n                          Note:\n                        </Label>\n                        <Controller\n                          id='note'\n                          name='note'\n                          control={control}\n                          render={({ field }) => <Input type=\"textarea\" value={field.value} invalid={errors.note && true} {...field} />}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Note */}\n              </Card>\n\n            </Col>\n            <Col xl={2} md={4} sm={12}>\n              <Card className='invoice-action-wrapper'>\n                <CardBody>\n                  <Button color='primary' type='submit' block outline className='mb-75'>\n                    Save\n                  </Button>\n                  <Button color='warning' block outline tag={Link} to='/invoice/list'>\n                    Cancel\n                  </Button>\n                </CardBody>\n              </Card>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50 required'>Accept payments via</p>\n                  <Controller\n                    control={control}\n                    name={`bankAccountId`}\n                    rules={{ required: true }}\n                    render={({ field, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select mt-1', { 'is-invalid': errors.bankAccountId })}\n                        classNamePrefix='select'\n                        options={accountOptions}\n                        value={accountOptions.find(c => c.id === field.value)}\n                        onChange={(val) => { field.onChange(val.id); bankAccountfn(val.id) }}\n                        getOptionLabel={(option) => option.accountHolderName}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n                  />\n                </div>\n              </div>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50'>Select Employee</p>\n\n                  <Controller\n                    control={control}\n                    name=\"reviewer\"\n                    id=\"reviewer\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.reviewer })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={userOptions}\n                        isMulti={true}\n                        value={value} // set selected values\n                        onChange={handleUserChange}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                        styles={colourStyles}\n                      />\n                    )}\n\n                  />\n                </div>\n              </div>\n            </Col>\n          </Fragment >\n        </Row>\n      </form >\n    </UILoader >\n\n  )\n}\n\nexport default AddCardINT\n","// ** Invoice Add Components\nimport AddCard from './AddCard'\nimport AddCardINT from './AddCardINT'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { activeOrganization } from '@src/helper/sassHelper'\nconst activeOrg = activeOrganization()\n\nconst InvoiceAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      {activeOrg.countryshortname === 'IN' ? <AddCard /> : <AddCardINT />}\n    </div>\n  )\n}\n\nexport default InvoiceAdd\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","export const calculateTax = (amount, taxRateInPercentage, TaxType) => {\n    let calculatedTax = 0\n    if (TaxType === 1) { //Inclusive\n        calculatedTax = parseFloat(amount) - (parseFloat(amount) * (100 / (100 + parseFloat(taxRateInPercentage))))\n        // calculatedTax = parseFloat(amount) - parseFloat(calculatedTax);\n\n    } else if (TaxType === 2) { //Exclusive\n        calculatedTax = (parseFloat(amount) * parseFloat(taxRateInPercentage)) / 100\n    }\n    return parseFloat(calculatedTax)\n}\n\nexport const parser = (str) => {\n\n    return JSON.parse(Array.isArray(str) ? JSON.stringify(str).replace(/\\\\/g, '') : str.replace(/\\\\/g, ''))\n\n}","import axios from '@src/configs/axios/axiosConfig'\n\nexport const indianFormattedPrice = (val) => {\n\n  const value = String(val)\n\n  let removedValue = ''\n  let finalVal = ''\n  if (value.includes('.')) {\n    removedValue = value.slice(value.indexOf('.'))\n    finalVal = value.replace(removedValue, '')\n    finalVal = finalVal.toString()\n  } else {\n    finalVal = value.toString()\n  }\n  let lastThree = finalVal.substring(finalVal.length - 3)\n  const otherNumbers = finalVal.substring(0, finalVal.length - 3)\n  if (otherNumbers !== '') lastThree = `,${lastThree}`\n  const res = otherNumbers.replace(/\\B(?=(\\d{2})+(?!\\d))/g, \",\") + lastThree\n  return res + (removedValue === '' ? '.00' : removedValue)\n}\n\nexport const currencyConvert = async (base_currency, currencies) => {\n\n  const res = await axios.get(\n    `https://api.freecurrencyapi.com/v1/latest?apikey=fca_live_C8lWFFJJ2Q2soCa9lcN99U1dc8yl7A4gUoXNyjhj&base_currency=${base_currency}&currencies=${currencies}`)\n\n\n  return res?.data?.data[currencies]\n}"],"sourceRoot":""}