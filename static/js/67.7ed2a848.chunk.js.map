{"version":3,"sources":["views/pages/account-settings/Invoice/GeneralSetting.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","views/pages/account-settings/Invoice/store/index.js"],"names":["activeOrgId","activeOrganizationid","activeOrg","activeOrganization","userId","orgUserId","reminderOptions","id","name","GeneralSettings","dispatch","useDispatch","useState","block","setBlock","startingNo","setStartingNo","prefix","setPrefix","signatureFlag","setSignatureFlag","signatureId","setSignatureId","Loader","schema","yup","shape","organizationId","default","invoiceNote","required","invoiceReminderInterval","nullable","desiredProfitLimit","criticalLimit","updatedBy","createdBy","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","reset","onSubmit","data","addOrgPreference","toast","success","position","useEffect","getData","response","undefined","res","payload","invoicenote","replace","parseInt","invoicereminderinterval","desiredprofitlimit","criticallimit","signatureimageid","invoicestartingno","invoiceprefix","signatureflag","blocking","loader","className","style","fontWeight","type","value","onChange","e","test","target","val","String","padStart","readOnly","defaultChecked","checked","referrerPolicy","src","tag","Label","size","color","reader","FileReader","files","readAsDataURL","file","formData","FormData","append","axios","post","then","attachment_id","catch","err","console","log","uploadFiles","hidden","accept","onClick","updateSignature","lg","Form","fieldLabel","fieldName","reqflag","md","classnames","for","render","field","invalid","message","getRow","options","ref","inputRef","classNamePrefix","find","c","getOptionLabel","option","getOptionValue","getSelectRow","xs","outline","UILoader","props","children","overlayColor","Tag","backgroundColor","defaultProps","ComponentSpinner","createAsyncThunk","organizationprefernces","createSlice","initialState","accounts","total","params","allData","reducers","extraReducers","builder","addCase","fulfilled","state","action"],"mappings":"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","file":"static/js/67.7ed2a848.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\nimport Select from 'react-select'\n// ** Reactstrap Imports\nimport {\n  Row,\n  Col,\n  Card,\n  Form,\n  Label,\n  Input,\n  Button,\n  CardBody,\n  FormFeedback,\n  CardText,\n  CardHeader\n} from 'reactstrap'\nimport * as yup from \"yup\"\nimport { getData, addOrgPreference } from './store/index'\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport axios from '@src/configs/axios/axiosConfig'\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { useForm, Controller } from 'react-hook-form'\nimport { activeOrganizationid, activeOrganization, orgUserId } from '@src/helper/sassHelper'\nimport { useDispatch } from 'react-redux'\nimport toast from 'react-hot-toast'\nconst activeOrgId = activeOrganizationid()\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nimport { Check } from 'react-feather'\n\nconst reminderOptions = [{ id: 1, name: 'Every Days' }, { id: 2, name: 'Every 2 Days' }, { id: 3, name: 'Every 3 Days' }, { id: 4, name: 'Every 4 Days' }, { id: 5, name: 'Every 5 Days' }, { id: 6, name: 'Every 6 Days' }, { id: 7, name: 'Never' }]\n\nconst GeneralSettings = () => {\n\n  const dispatch = useDispatch()\n  const [block, setBlock] = useState(false)\n  const [startingNo, setStartingNo] = useState('00001')\n  const [prefix, setPrefix] = useState('INV')\n  const [signatureFlag, setSignatureFlag] = useState(false)\n  const [signatureId, setSignatureId] = useState(null)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const schema = yup.object().shape({\n    organizationId: yup.string().default(activeOrgId),\n    invoiceNote: yup.string().required('Please Enter Invoice Note'),\n    invoiceReminderInterval: yup.string().nullable(),\n    desiredProfitLimit: yup.string().default(''),\n    criticalLimit: yup.string().default(''),\n    updatedBy: yup.string().default(userId),\n    createdBy: yup.string().default(userId)\n  })\n\n  const { handleSubmit, formState: { errors }, control, reset } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const onSubmit = async data => {\n    setBlock(true)\n    await dispatch(addOrgPreference(data))\n    setBlock(false)\n    toast.success('General Setting Updated Succesfully', { position: 'bottom-right' })\n  }\n\n  useEffect(async () => {\n\n    const response = await dispatch(getData(activeOrgId))\n    const res = response.payload.data\n    if (res !== undefined) {\n      reset({\n        organizationId: activeOrgId,\n        invoiceNote: res.invoicenote.replace(/(\\\\n)/g, \"\\n\"),\n        invoiceReminderInterval: parseInt(res.invoicereminderinterval),\n        desiredProfitLimit: res.desiredprofitlimit,\n        criticalLimit: res.criticallimit,\n        updatedBy: userId,\n        createdBy: userId\n      })\n    }\n\n    setSignatureId(activeOrg.signatureimageid)\n    setStartingNo(activeOrg?.invoicestartingno ?? '00001')\n    setPrefix(activeOrg?.invoiceprefix ?? 'INV')\n    setSignatureFlag(activeOrg?.signatureflag ?? false)\n\n  }, [])\n\n  const getRow = (fieldLabel, fieldName, reqflag = true) => {\n    return (\n      <Col md={10} className='d-flex mt-2'>\n        <Label md='3' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col md='7' >\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input type={fieldName === 'invoiceNote' ? 'textarea' : 'text'} invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Col>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false) => {\n    return (\n\n      <Col md={10} className='d-flex mt-2'>\n        <Label md='3' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName} >\n          {fieldLabel}\n        </Label>\n        <Col md='7'>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                classNamePrefix='select'\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                onChange={val => { return field.onChange(val.id) }}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Col>\n\n    )\n  }\n\n  const uploadFiles = (file) => {\n\n    const formData = new FormData()\n    formData.append(`files[0]`, file)\n    formData.append('organizationId', activeOrgId)\n    formData.append('createdBy', userId)\n\n    setBlock(true)\n    axios.post('/google/signatureupload', formData).then((res) => {\n      setBlock(false)\n      toast.success('Signature Uploaded Successfully')\n      setSignatureId(res.data.attachment_id)\n    }).catch((err) => { console.log(err) })\n  }\n\n  const onChange = e => {\n    const reader = new FileReader(),\n      files = e.target.files\n    reader.readAsDataURL(files[0])\n\n    uploadFiles(e.target.files[0])\n\n  }\n\n  const setPrefixValue = (e) => {\n    const re = /(^$)|(^[a-zA-Z]+$)/\n    if (re.test(e.target.value)) {\n      setPrefix(e.target.value)\n    }\n  }\n\n  const setStartingNoValue = (e) => {\n    const re = /(^$)|(^[0-9]+$)/\n    const val = String(parseInt(e.target.value === '' ? 0 : e.target.value))\n    if (re.test(val)) {\n      setStartingNo(val.padStart(5, '0'))\n    }\n  }\n\n  const updateSignature = () => {\n    setBlock(true)\n    const data = {\n      signatureFlag,\n      prefix,\n      startingNo\n    }\n    axios.post('/organizations/updateinvoicesetting', data).then(() => {\n      setBlock(false)\n      toast.success('Invoice setting done Successfully')\n\n    }).catch((err) => { console.log(err) })\n  }\n\n  return (\n    <Fragment>\n      <UILoader blocking={block} loader={<Loader />}>\n        <Card>\n          <CardBody className='py-1'>\n            <Row className='col-lg-7 col-sm-12'>\n              <h4 style={{ fontWeight: '900' }}>Invoice No</h4>\n              <p>Your invoice numbers are set on auto-generate mode to save your time. </p>\n              <Row className='col-12'>\n                <Col>\n                  <CardText>Prefix</CardText>\n                  <Input type='text' value={prefix} onChange={setPrefixValue} />\n                </Col>\n                <Col>\n                  <CardText>Next Number</CardText>\n                  <Input type='text' value={startingNo} onChange={setStartingNoValue} />\n                </Col>\n              </Row>\n              <Row className='col-12 mt-1'>\n                <Col>\n                  <CardText>Invoice starting number</CardText>\n                  <Input type='text' value={`${prefix}- ${startingNo}`} readOnly />\n                </Col>\n              </Row>\n            </Row>\n\n            <Row className='col-lg-6 col-sm-12 mt-2'>\n              <h4 style={{ fontWeight: '900' }}>Signature</h4>\n\n              <div className='d-flex my-1 align-items-center'>Add signature in the invoice.\n                <div className='form-switch form-check-primary ms-1'>\n                  {signatureFlag ? <Input type='switch' id='switch-priamry' defaultChecked onChange={(e) => { setSignatureFlag(e.target.checked) }} /> : <Input type='switch' id='switch-priamry' onChange={(e) => { setSignatureFlag(e.target.checked) }} />}\n                </div>\n                {(signatureId && signatureFlag) && <img className='img-fluid width-15-per ms-2' referrerPolicy=\"no-referrer\" src={`https://drive.google.com/thumbnail?id=${signatureId}&authuser=0`} />}\n              </div>\n\n              <Row className='col-12'>\n                <Col>\n                  <Button tag={Label} className='mb-75 me-75' size='sm' color='primary'>\n                    Upload Signature\n                    <Input type='file' onChange={onChange} hidden accept='image/*' />\n                  </Button>\n                </Col>\n              </Row>\n            </Row>\n            <Col className='pb-1'>\n              <Button color='primary' size='sm' className='mt-2' onClick={() => { updateSignature() }}> <Check size={16} /> Submit</Button>\n            </Col>\n          </CardBody>\n        </Card>\n        <Card>\n          <h4 className='m-2'>Invoice Notes:</h4>\n          <CardBody>\n            <Row className=''>\n              <Col lg='12'>\n                <Row tag={Form} className='gx-2 gy-1' onSubmit={handleSubmit(onSubmit)}>\n\n                  <Row>\n                    {getRow('Default invoiceNote', 'invoiceNote', false)}\n\n                    {getSelectRow('Set automatic Reminder', 'invoiceReminderInterval', reminderOptions, false)}\n\n                  </Row>\n\n                  <Col className='mt-2 pt-1' xs={12}>\n                    <Button type='submit' className='me-1' color='primary'>\n                      Submit\n                    </Button>\n                    <Button color='secondary' outline>\n                      Cancel\n                    </Button>\n                  </Col>\n\n                </Row>\n              </Col>\n            </Row>\n          </CardBody>\n        </Card>\n      </UILoader>\n    </Fragment>\n  )\n}\n\nexport default GeneralSettings\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","// ** Redux Imports\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\n// ** Axios Imports\nimport axios from '@src/configs/axios/axiosConfig'\n\nexport const getData = createAsyncThunk('appInvoiceSetting/getData', async organizationId => {\n  const response = await axios.post(`/organizationprefernces/get`, { organizationId })\n  return {\n    data: response.data.organizationprefernces\n  }\n})\nexport const addOrgPreference = createAsyncThunk('appInvoiceSetting/addOrgPreference', async (data, { }) => {\n\n  await axios.post(`/organizationprefernces/createandupdate`, data)\n  return ''\n\n})\n\nexport const appInvoiceAccountSlice = createSlice({\n  name: 'appInvoiceSetting',\n  initialState: {\n    accounts: [],\n    total: 1,\n    params: {},\n    allData: []\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(getData.fulfilled, (state, action) => {\n        state.accounts = action.payload.data\n        state.params = action.payload.params\n      })\n\n  }\n})\n\nexport default appInvoiceAccountSlice.reducer\n"],"sourceRoot":""}