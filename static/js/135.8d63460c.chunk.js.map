{"version":3,"sources":["views/pages/account-settings/RolesAndDesignation/Designation.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","Designation","MySwal","withReactContent","Swal","useState","data","setData","selected","setSelected","formModal","setFormModal","dispatch","useDispatch","store","useSelector","state","designation","block","setBlock","Loader","schema","yup","shape","organizationId","default","name","required","updatedBy","createdBy","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","reset","resetForm","id","onSubmit","updateDesignation","addDesignation","getData","useEffect","className","color","size","onClick","lg","map","card","index","classnames","status","noofusers","I","a","isdefault","openEditModal","outline","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","then","result","value","deleteDesignation","dismiss","DismissReason","cancel","isOpen","toggle","blocking","loader","Object","keys","key","message","tag","Form","fieldLabel","fieldName","reqflag","md","sm","for","render","field","invalid","getRow","xs","type","UILoader","props","children","overlayColor","Tag","style","backgroundColor","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/135.8d63460c.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\nimport { Can } from '@src/utility/context/Can.js'\n// ** Reactstrap Imports\nimport {\n  Row,\n  Col,\n  Card,\n  Form,\n  Badge,\n  Label,\n  Input,\n  Button,\n  CardBody,\n  FormFeedback,\n  Table,\n  Modal,\n  ModalHeader,\n  ModalBody\n} from 'reactstrap'\nimport { useForm, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\nimport { getData, addDesignation, updateDesignation, deleteDesignation } from './store/designation'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Edit, Eye, Trash, Plus } from 'react-feather'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nconst Designation = ({ }) => {\n  const MySwal = withReactContent(Swal)\n  const [data, setData] = useState([])\n  const [selected, setSelected] = useState(null)\n  const [formModal, setFormModal] = useState(false)\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.designation)\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const schema = yup.object().shape({\n    organizationId: yup.string().default(activeOrgId),\n    name: yup.string().required('Please Enter Designation'),\n    updatedBy: yup.string().default(userId),\n    createdBy: yup.string().default(userId)\n  })\n\n  const { handleSubmit, formState: { errors }, control, reset } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const deletefn = (id) => {\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteDesignation(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'Designation has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        await dispatch(getData())\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  const resetForm = async () => {\n    reset({\n      organizationId: activeOrgId,\n      id: null,\n      name: ''\n    })\n    setFormModal(false)\n    setSelected(null)\n  }\n\n  const onSubmit = async data => {\n    setBlock(true)\n    if (selected !== null) {\n      await dispatch(updateDesignation(data))\n      resetForm()\n      setSelected(null)\n    } else {\n      await dispatch(addDesignation(data))\n      resetForm()\n    }\n    await dispatch(getData())\n    setBlock(false)\n  }\n\n  const getRow = (fieldLabel, fieldName, reqflag = true) => {\n    return (\n      <Col md={12}>\n        <Label sm='12' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Col>\n    )\n  }\n\n  useEffect(async () => {\n    await dispatch(getData())\n  }, [])\n\n  const openEditModal = card => {\n    setSelected(card)\n    setFormModal(true)\n    reset({\n      organizationId: activeOrgId,\n      id: card.id,\n      name: card.name\n    })\n  }\n\n  useEffect(() => {\n    setData(store.data)\n  }, [store.data])\n\n  return (\n    <Fragment>\n      <Card>\n        <CardBody className='py-25'>\n          <Row className='gx-4'>\n            <Row className='mb-50'>\n              <Col>\n                <Button color='primary' size='sm' onClick={() => { setFormModal(true) }}> <Plus size={15} />Add</Button>\n              </Col>\n            </Row>\n            <Col lg='12' className='mt-2 mt-lg-0'>\n              <Table className='table table-bordered table-hover'>\n                <thead>\n                  <tr>\n                    <th>Name</th>\n                    <th>Status</th>\n                    <th>No of Users</th>\n                    <th>Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {data.map((card, index) => {\n                    return (\n                      <tr\n                        key={index}\n                        className={classnames('cardMaster rounded border p-2')}\n                      >\n\n                        <td className='mb-0'>{card.name}</td>\n                        <td>\n                          {card.status === 1 ? (\n                            <Badge color='light-success' className='ms-50'>\n                              Active\n                            </Badge>\n                          ) : (\n                            <Badge color='light-danger' className='ms-50'>\n                              InActive\n                            </Badge>\n                          )}\n                        </td>\n                        <td>\n                          {card.noofusers}\n                        </td>\n                        <td>\n                        <Can I={'write'} a={'designation'}>\n                          <div className='d-flex'>\n                            <Eye size={15} className='me-75' />\n                            {!card.isdefault &&\n                              <div className='d-flex order-sm-0 order-1 mt-1 mt-sm-0'>\n                                <Edit size={15} className='me-75' onClick={() => openEditModal(card)}>\n                                </Edit>\n                                <Trash size={15} outline onClick={() => { deletefn(card.id) }}></Trash>\n                              </div>\n                            }\n                          </div>\n                          </Can>\n                        </td>\n                      </tr>\n                    )\n                  })}\n                </tbody>\n              </Table>\n            </Col>\n\n            <Modal\n              isOpen={formModal}\n              toggle={() => setFormModal(!formModal)}\n              className='modal-dialog-centered modal-lg'\n            >\n              <UILoader blocking={block} loader={<Loader />}>\n                <ModalHeader className='bg-transparent' toggle={() => setFormModal(!formModal)}>\n                  Designation\n                </ModalHeader>\n                <ModalBody>\n                  {\n                    Object.keys(errors).map((key) => {\n\n                      return <FormFeedback key={key}>${errors[key]?.message}</FormFeedback>\n\n                    })\n                  }\n                  <Row tag={Form} className='gx-2 gy-1' onSubmit={handleSubmit(onSubmit)}>\n\n                    {getRow('Designation', 'name')}\n\n                    <Col className='mt-2 pt-1' xs={12}>\n                      <Button type='submit' className='me-1' color='primary'>\n                        Submit\n                      </Button>\n                      <Button type='button' color='warning' onClick={resetForm}>\n                        Cancel\n                      </Button>\n                    </Col>\n\n                  </Row>\n                </ModalBody>\n              </UILoader>\n            </Modal>\n          </Row>\n        </CardBody>\n      </Card>\n\n    </Fragment>\n  )\n}\n\nexport default Designation\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}