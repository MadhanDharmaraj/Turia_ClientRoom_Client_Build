{"version":3,"sources":["views/apps/calendar/Calendar.js","views/apps/calendar/SidebarLeft.js","views/apps/calendar/index.js","assets/images/svg/repeat.svg","assets/images/pages/calendar-illustration.png"],"names":["colorCodes","fontColorCodes","repeatsvg","require","default","userId","orgUserId","Calendar","props","navigate","useNavigate","navigateEvent","path","calendarRef","useRef","store","isRtl","dispatch","calendarApi","setCalendarApi","blankEvent","toggleSidebar","selectEvent","updateEvent","dateChange","useEffect","current","getApi","useState","window","innerWidth","width","setWidth","handleWindowSizeChange","addEventListener","removeEventListener","calendarOptions","events","length","plugins","interactionPlugin","dayGridPlugin","timeGridPlugin","listPlugin","initialView","headerToolbar","start","end","editable","displayEventTime","eventDisplay","eventResizableFromStart","dragScroll","dayMaxEvents","navLinks","eventContent","arg","backgroundColor","event","extendedProps","eventtype","taskstatus","borderColor","italicEl","document","createElement","innerHTML","view","type","recurringflag","title","domNodes","eventClick","clickedEvent","id","customButtons","customprev","text","click","calref","prev","getDate","customnext","next","sidebarToggle","className","dateClick","info","ev","date","eventDrop","droppedEvent","remove","toast","error","success","eventResize","resizedEvent","ref","direction","memo","filters","label","color","SidebarLeft","filterLable","useDispatch","onChange","e","target","checked","selectAll","handleChange","defaultChecked","selectedCalendars","for","map","filter","classnames","includes","val","src","illustration","alt","calendarsColor","Reminders","Holidays","Tasks","CalendarComponent","useSelector","state","calendar","filterLableName","setFilterLableName","useRTL","loadEvents","Date","obj","startdate","moment","startOf","valueOf","enddate","endOf","fetchEvents","undefined","indexOf","ind","arr","splice","parseInt"],"mappings":"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","file":"static/js/86.bc340e07.chunk.js","sourcesContent":["// ** React Import\nimport { useEffect, useRef, memo, Fragment, useState } from 'react'\nimport { ReactDOM } from 'react-dom'\n// ** Full Calendar & it's Plugins\nimport FullCalendar from '@fullcalendar/react'\nimport listPlugin from '@fullcalendar/list'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\n\n// ** Third Party Components\nimport toast from 'react-hot-toast'\nimport { ChevronLeft, ChevronRight, Menu, Repeat } from 'react-feather'\nimport { Button, Card, CardBody } from 'reactstrap'\nimport { useNavigate } from 'react-router-dom'\n\nconst colorCodes = ['', ['', '#7367f01f', '#28c76f1f', '#28c76f1f', '#00cfe81f', '#ff9f431f', '#ea54551f', '#5e318d1f'], '#c13ab41f', '#e366de1f', '#67bda61f']\nconst fontColorCodes = ['', ['', '#7367f0', '#28c76f', '#28c76f', '#00cfe8', '#ff9f43', '#ea5455', '#5e318d'], '#c13ab4', '#e366de', '#67bda6']\nimport { orgUserId } from '@src/helper/sassHelper'\nconst repeatsvg = require('@src/assets/images/svg/repeat.svg').default\nconst userId = orgUserId()\nconst Calendar = props => {\n\n  const navigate = useNavigate()\n\n  const navigateEvent = (path) => {\n    navigate(path)\n  }\n  const renderEventContent = (arg) => {\n\n    arg.backgroundColor = arg.event.extendedProps.eventtype !== '1' ? colorCodes[arg.event.extendedProps.eventtype] : colorCodes[arg.event.extendedProps.eventtype][arg.event.extendedProps.taskstatus]\n    arg.borderColor = arg.event.extendedProps.eventtype !== '1' ? colorCodes[arg.event.extendedProps.eventtype] : colorCodes[arg.event.extendedProps.eventtype][arg.event.extendedProps.taskstatus]\n\n    const italicEl = document.createElement('div')\n    italicEl.innerHTML = `\n        <span class='d-flex ${arg.view.type === 'listMonth' ? '' : 'text-white'\n      } ' style='color: ${arg.event.extendedProps.eventtype !== '1' ? fontColorCodes[arg.event.extendedProps.eventtype] : fontColorCodes[arg.event.extendedProps.eventtype][arg.event.extendedProps.taskstatus]} !important'>          \n        ${arg.event.extendedProps.recurringflag ? `<img class=\"image-repeat width-10-per\" src=\"${repeatsvg}\" />` : ''} \n          <p class='mb-0 ms-25 text-truncate'>${arg.event.title}<p>\n        </span>`\n\n    const arrayOfDomNodes = [italicEl]\n    return { domNodes: arrayOfDomNodes }\n  }\n\n  // ** Refs\n  const calendarRef = useRef(null)\n\n  // ** Props\n  const {\n    store,\n    isRtl,\n    dispatch,\n    //calendarsColor,\n    calendarApi,\n    setCalendarApi,\n    //    handleAddEventSidebar,\n    blankEvent,\n    toggleSidebar,\n    selectEvent,\n    updateEvent,\n    dateChange\n  } = props\n\n  // ** UseEffect checks for CalendarAPI Update\n  useEffect(() => {\n    if (calendarApi === null) {\n      setCalendarApi(calendarRef.current.getApi())\n    }\n  }, [calendarApi])\n  const [width, setWidth] = useState(window.innerWidth)\n  const handleWindowSizeChange = () => {\n    setWidth(window.innerWidth)\n  }\n  useEffect(() => {\n    window.addEventListener('resize', handleWindowSizeChange)\n    return () => {\n      window.removeEventListener('resize', handleWindowSizeChange)\n    }\n  }, [])\n  // ** calendarOptions(Props)\n  const calendarOptions = {\n    events: store.events.length ? store.events : [],\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin, listPlugin],\n    initialView: width >= 768 ? 'dayGridMonth' : 'listMonth',\n    headerToolbar: {\n      start: 'customprev, title, customnext',\n      end: width >= 768 ? 'dayGridMonth,listMonth' : ''\n    },\n    /*\n      Enable dragging and resizing event\n      ? Docs: https://fullcalendar.io/docs/editable\n    */\n    editable: true,\n    displayEventTime: false,\n    eventDisplay: 'block',\n    /*\n      Enable resizing event from start\n      ? Docs: https://fullcalendar.io/docs/eventResizableFromStart\n    */\n    eventResizableFromStart: true,\n\n    /*\n      Automatically scroll the scroll-containers during event drag-and-drop and date selecting\n      ? Docs: https://fullcalendar.io/docs/dragScroll\n    */\n    dragScroll: true,\n\n    /*\n      Max number of events within a given day\n      ? Docs: https://fullcalendar.io/docs/dayMaxEvents\n    */\n    dayMaxEvents: 2,\n\n    /*\n      Determines if day names and week names are clickable\n      ? Docs: https://fullcalendar.io/docs/navLinks\n    */\n    navLinks: true,\n\n    // eventClassNames({ event: calendarEvent }) {\n    //   // eslint-disable-next-line no-underscore-dangle\n    //   const colorName = calendarsColor[calendarEvent._def.extendedProps.extendedprops.calendar]\n\n    //   return [\n    //     // Background Color\n    //     `bg-light-${colorName}`\n    //   ]\n    // },\n    eventContent: renderEventContent,\n    eventClick({ event: clickedEvent }) {\n      if (clickedEvent.extendedProps.eventtype === '5') {\n        navigateEvent(`/compliance/view/${clickedEvent.id}`)\n      } else if (clickedEvent.extendedProps.eventtype === '1') {\n        navigateEvent(`/task/view/${clickedEvent.id}`)\n      } else if (clickedEvent.extendedProps.eventtype === '4') {\n        navigateEvent(`/profile/view/${userId}?tabId=profileholidays`)\n      } else if (clickedEvent.extendedProps.eventtype === '3') {\n        navigateEvent(`/todo`)\n      }\n\n      // * Only grab required field otherwise it goes in infinity loop\n      // ! Always grab all fields rendered by form (even if it get `undefined`) otherwise due to Vue3/Composition API you might get: \"object is not extensible\"\n      // event.value = grabEventDataFromEventApi(clickedEvent)\n\n      // eslint-disable-next-line no-use-before-define\n      // isAddNewEventSidebarActive.value = true\n    },\n    customButtons: {\n      customprev: {\n        text: <ChevronLeft />,\n        click: () => {\n          const calref = calendarRef.current.getApi()\n          calref.prev()\n          dateChange(calref.getDate())\n        }\n      },\n      customnext: {\n        text: <ChevronRight />,\n        click: () => {\n          const calref = calendarRef.current.getApi()\n          calref.next()\n          dateChange(calref.getDate())\n        }\n      },\n      sidebarToggle: {\n        text: <Menu className='d-xl-none d-block' />,\n        click() {\n          toggleSidebar(true)\n        }\n      }\n    },\n\n    dateClick(info) {\n      const ev = blankEvent ?? {}\n      ev.start = info.date\n      ev.end = info.date\n      dispatch(selectEvent(ev))\n      //handleAddEventSidebar()\n    },\n\n    /*\n      Handle event drop (Also include dragged event)\n      ? Docs: https://fullcalendar.io/docs/eventDrop\n      ? We can use `eventDragStop` but it doesn't return updated event so we have to use `eventDrop` which returns updated event\n    */\n    eventDrop({ event: droppedEvent }) {\n      if (droppedEvent.extendedProps.eventtype === '2') {\n        droppedEvent.remove()\n        toast.error(`Recurring Task can't set date in Calendar. Please Update in Service tab.`)\n      } else {\n        toast.success('Event Updated')\n      }\n      dispatch(updateEvent(droppedEvent))\n\n    },\n\n    /*\n      Handle event resize\n      ? Docs: https://fullcalendar.io/docs/eventResize\n    */\n    eventResize({ event: resizedEvent }) {\n      dispatch(updateEvent(resizedEvent))\n      toast.success('Event Updated')\n    },\n\n    ref: calendarRef,\n\n    // Get direction from app state (store)\n    direction: isRtl ? 'rtl' : 'ltr'\n  }\n\n  return (\n    <Card className='shadow-none border-0 mb-0 rounded-0'>\n      <CardBody className='pb-0'>\n        <FullCalendar {...calendarOptions} />{' '}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default memo(Calendar)\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Custom Components\nimport classnames from 'classnames'\nimport { useDispatch } from 'react-redux'\n// ** Reactstrap Imports\nimport { CardBody, Button, Input, Label } from 'reactstrap'\nimport { selectAll } from './store/index'\n// ** illustration import\nimport illustration from '@src/assets/images/pages/calendar-illustration.png'\n\n// ** Filters Checkbox Array\nconst filters = [  \n  { label: 'Tasks', color: 'primary', className: 'form-check-primary mb-1' },\n  { label: 'Recurring Tasks', color: 'color-code2', className: 'form-check-color-code1 mb-1' },\n  { label: 'To Do', color: 'color-code2', className: 'form-check-color-code2 mb-1' },\n  { label: 'Holidays', color: 'color-code3', className: 'form-check-color-code3 mb-1' }\n]\n  \nconst SidebarLeft = props => {\n  // ** Props\n  const { store, filterLable } = props\n  const dispatch = useDispatch()\n  const handleFilter = (val) => {\n    filterLable(val)\n  }\n\n  const handleChange = (e) => {\n    if (e.target.checked) {\n      dispatch(selectAll(['To Do', 'Holidays', 'Recurring Task', 'Tasks']))\n    } else {\n      dispatch(selectAll([]))\n    }\n  }\n\n  return (\n    <Fragment>\n      <div className='sidebar-wrapper'>\n        <CardBody>\n          <h5 className='section-label mb-1'>\n            <span className='align-middle'>Filter</span>\n          </h5>\n          <div className='form-check mb-1'>\n            <Input\n              id='view-all'\n              type='checkbox'\n              label='View All'\n              onChange={(e) => { handleChange(e) }}\n              className='select-all'\n              defaultChecked={store.selectedCalendars.length === filters.length}\n            />\n            <Label className='form-check-label' for='view-all'>\n              View All\n            </Label>\n          </div>\n          <div className='calendar-events-filter'>\n            {filters.length &&\n              filters.map(filter => {\n                return (\n                  <div\n                    key={`${filter.label}-key`}\n                    className={classnames('form-check', {\n                      [filter.className]: filter.className\n                    })}\n                  >\n                    <Input\n                      type='checkbox'\n                      key={filter.label}\n                      color={filter.color}\n                      label={filter.label}\n                      className='input-filter'\n                      id={`${filter.label}-event`}\n                      defaultChecked={store.selectedCalendars.includes(filter.label)}\n                      onChange={() => { handleFilter(filter.label) }}\n                    />\n                    <Label className='form-check-label' for={`${filter.label}-event`}>\n                      {filter.label}\n                    </Label>\n                  </div>\n                )\n              })}\n          </div>\n        </CardBody>\n      </div>\n      <div className='mt-auto'>\n        <img className='img-fluid' src={illustration} alt='illustration' />\n      </div>\n    </Fragment>\n  )\n}\n\nexport default SidebarLeft\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { Row, Col } from 'reactstrap'\n\n// ** Calendar App Component Imports\nimport Calendar from './Calendar'\nimport SidebarLeft from './SidebarLeft'\n\n// ** Custom Hooks\nimport { useRTL } from '@hooks/useRTL'\n\n// ** Store & Actions\nimport { useSelector, useDispatch } from 'react-redux'\nimport { fetchEvents, selectEvent, updateEvent } from './store'\n\n// ** Styles\nimport '@styles/react/apps/app-calendar.scss'\nimport moment from 'moment'\nimport { orgUserId } from '@src/helper/sassHelper'\nconst userId = orgUserId()\n\n// ** CalendarColors\nconst calendarsColor = {\n  Reminders: 'primary',\n  Holidays: 'success',\n  'Compliance Alerts': 'danger',\n  Tasks: 'warning'\n}\n\nconst CalendarComponent = () => {\n  // ** Variables\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.calendar)\n\n  // ** states\n  const [calendarApi, setCalendarApi] = useState(null)\n  const [filterLableName, setFilterLableName] = useState(store.selectedCalendars)\n  // ** Hooks\n  const [isRtl] = useRTL()\n\n  const loadEvents = (val = new Date()) => {\n    const obj = {\n      userId,\n      filter: filterLableName.length === 0 ? store.selectedCalendars : filterLableName,\n      startdate: moment(val).startOf('month').startOf('d').valueOf(),\n      enddate: moment(val).endOf('month').endOf('d').valueOf()\n    }\n    dispatch(fetchEvents(obj))\n  }\n\n  useEffect(() => {\n    loadEvents(calendarApi ? calendarApi.getDate() : undefined)\n  }, [filterLableName])\n\n  const dateChange = (val) => {\n    loadEvents(val)\n  }\n\n  const filterLable = (val) => {\n    if (filterLableName.indexOf(val) === -1) {\n      setFilterLableName([...filterLableName, val])\n    } else {\n      const ind = filterLableName.indexOf(val)\n      const arr = [...filterLableName]\n      arr.splice(parseInt(ind), 1)\n      setFilterLableName([...arr])\n    }\n  }\n\n  return (\n    <Fragment>\n      <div className='app-calendar overflow-hidden border'>\n        <Row className='g-0'>\n          <Col\n            id='app-calendar-sidebar'\n            className={classnames('col app-calendar-sidebar flex-grow-0 overflow-hidden d-flex flex-column')}\n          >\n            <SidebarLeft\n              store={store}\n              dispatch={dispatch}              \n              filterLable={filterLable}\n            />\n          </Col>\n          <Col className='position-relative'>\n            <Calendar\n              isRtl={isRtl}\n              store={store}\n              dispatch={dispatch}\n              calendarApi={calendarApi}\n              selectEvent={selectEvent}\n              updateEvent={updateEvent}\n              dateChange={dateChange}\n              calendarsColor={calendarsColor}\n              setCalendarApi={setCalendarApi}              \n            />\n          </Col>          \n        </Row>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default CalendarComponent\n","export default __webpack_public_path__ + \"static/media/repeat.56237a69.svg\";","export default __webpack_public_path__ + \"static/media/calendar-illustration.42be42ce.png\";"],"sourceRoot":""}