{"version":3,"sources":["views/apps/recurring-task/view/UserInfoCard.js","views/apps/recurring-task/view/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["ViewCard","selectedTask","id","useParams","getRow","col","val","md","readOnly","className","value","quarterlyDatesLst","label","lg","sm","size","for","clientname","servicename","priority","assignee","map","obj","k","color","name","reviewer","recurringid","parseInt","moment","nextrecurringstartdate","format","nextrecurringenddate","quarterlydates","JSON","parse","startDate","endDate","outline","tag","Link","to","type","TaskView","store","useSelector","state","recurring_task","dispatch","useDispatch","useState","block","setBlock","Loader","useEffect","getTask","undefined","blocking","loader","xl","xs","order","UserInfoCard","UILoader","props","children","overlayColor","Tag","classnames","style","backgroundColor","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/46.91108a05.chunk.js","sourcesContent":["// ** React Imports\nimport { Link, useParams } from 'react-router-dom'\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, CardText, FormFeedback, Input, CardHeader, Badge } from 'reactstrap'\n\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport moment from 'moment'\n\n\nconst ViewCard = ({ selectedTask }) => {\n  // ** States\n\n  const { id } = useParams()\n  const priorityOptions = ['', 'Low', 'Medium', 'High']\n  const durationOptions = ['', 'Monthly', 'Yearly', 'Quarterly', 'Daily']\n  // ** Custom Options Component\n  const getRow = (col, val = '') => {\n\n    return (\n      <Col md={col}>\n        <Input\n          readOnly\n          className='bg-white'\n          value={val}\n        />\n      </Col>\n    )\n  }\n\n  const quarterlyDatesLst = [\n    {\n      label: \"Quarter (Apr - Jun)\"\n    }, {\n      label: \"Quarter (Jul - Sep)\"\n    }, {\n      label: \"Quarter (Oct - Dec)\"\n    }, {\n      label: \"Quarter (Jan - Mar)\"\n    }\n  ]\n\n  return (\n\n    <Card lg={12}>\n      <CardHeader>View Recurring Task</CardHeader>\n      {/* Header */}\n      <CardBody className='pb-2 px-2'>\n        <Row>\n          <div className='col-lg-6 col-sm-12'>\n            <Row className='mb-1'>\n              <Label sm='3' size='lg' className='form-label' for='clientId'>\n                Client\n              </Label>\n              {getRow(9, selectedTask.clientname)}\n            </Row>\n\n            <Row className='mb-1'>\n              <Label sm='3' size='lg' className='form-label' for='serviceId'>\n                Service\n              </Label>\n              {getRow(9, selectedTask.servicename)}\n            </Row>\n            <Row className='mb-1'>\n              <Label sm='3' size='lg' className='form-label' for='priority'>\n                Priority\n              </Label>\n              {getRow(9, priorityOptions[selectedTask.priority])}\n            </Row>\n          </div>\n          <div className='col-lg-6 col-sm-12'>\n\n            <Row className='mb-1'>\n              <Label sm='3' size='lg' className='form-label' for='assignee'>\n                Assignee\n              </Label>\n              <Col lg={9}>\n                {selectedTask.assignee.map((obj, k) => {\n                  return (<Col key={k} className='border rounded p-50'><Badge color='primary'> {obj.name}</Badge></Col>)\n                })\n                }\n              </Col>\n            </Row>\n\n            <Row className='mb-1'>\n              <Label sm='3' size='lg' className='form-label' for='reviewer'>\n                Reviewer\n              </Label>\n              <Col lg={9}>\n                {selectedTask.reviewer.map((obj, k) => {\n                  return (<Col key={k} className='border rounded p-50'><Badge color='primary'> {obj.name}</Badge></Col>)\n                })\n                }\n              </Col>\n            </Row>\n\n            <Row className='mb-1'>\n              <Label sm='3' size='lg' className='form-label' for='duration'>\n                Duration\n              </Label>\n              {getRow(9, durationOptions[selectedTask.recurringid])}\n            </Row>\n\n            {parseInt(selectedTask.recurringid) !== 3 &&\n              <div>\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label' for='startDate'>\n                    Start Date\n                  </Label>\n                  {getRow(9, moment(selectedTask.nextrecurringstartdate, 'x').format('MMM DD, Y'))}\n                </Row>\n\n                <Row className='mb-1'>\n                  <Label sm='3' size='lg' className='form-label' for='endDate'>\n                    End Date\n                  </Label>\n                  {getRow(9, moment(selectedTask.nextrecurringenddate, 'x').format('MMM DD, Y'))}\n                </Row>\n              </div>\n            }\n\n            {(parseInt(selectedTask.recurringid) === 3 && selectedTask.quarterlydates !== null) &&\n\n              selectedTask.quarterlydates.map((obj, k) => {\n                return (\n\n                  <div key={k}>\n                    <Row className='mb-1'>\n                      <Row>\n                        <Label sm='12' size='lg' className='form-label' for='startDate'>\n                          {quarterlyDatesLst[k]['label']}\n                        </Label>\n                      </Row>\n                      <Row>\n                        {getRow(6, moment(JSON.parse(obj).startDate, 'x').format('MMM DD, Y'))}\n                        {getRow(6, moment(JSON.parse(obj).endDate, 'x').format('MMM DD, Y'))}\n                      </Row>\n                    </Row>\n                  </div>\n\n                )\n              })\n            }\n\n          </div>\n        </Row>\n      </CardBody>\n      <Card>\n        <CardBody>\n          <div className='modal-footer border-0'>\n            <Button className='add-new-user' outline color='warning' tag={Link} to='/recurring-task/list'>\n              Cancel\n            </Button>\n            <Button color='primary' type=\"button\" tag={Link} to={`/recurring-task/edit/${id}`} >\n              Edit\n            </Button>\n          </div>\n        </CardBody>\n      </Card>\n    </Card>\n\n  )\n}\n\nexport default ViewCard\n\n","// ** React Imports\nimport { useEffect, useState, Fragment } from 'react'\nimport { useParams, Link } from 'react-router-dom'\n\n// ** Store & Actions\nimport { getTask } from '../store'\nimport { useSelector, useDispatch } from 'react-redux'\n\n// ** Reactstrap Imports\nimport { Row, Col, Alert } from 'reactstrap'\n\n// ** User View Components\nimport UserInfoCard from './UserInfoCard'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst TaskView = () => {\n  // ** Store Vars\n  const store = useSelector(state => state.recurring_task)\n  const dispatch = useDispatch()\n\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  // ** Hooks\n  const { id } = useParams()\n\n  // ** Get suer on mount\n  useEffect(async () => {\n    if (id !== null) {\n      setBlock(true)\n      await dispatch(getTask(id))\n      setBlock(false)\n    }\n  }, [dispatch])\n\n\n  return store.selectedTask !== null && store.selectedTask !== undefined ? (\n    <UILoader blocking={block} loader={<Loader />}>\n      <div className='app-user-view'>\n        <Row>\n          <Col xl='12' lg='12' xs={{ order: 1 }} md={{ order: 0, size: 5 }}>\n            <UserInfoCard selectedTask={store.selectedTask} />\n          </Col>\n        </Row>\n      </div>\n    </UILoader>\n  ) : (\n    <UILoader blocking={block} loader={<Loader />}>\n      <Alert color='danger'>\n        <h4 className='alert-heading'>Task not found</h4>\n        <div className='alert-body'>\n          Task with id: {id} doesn't exist. Check list of all Tasks: <Link to='/recurring-task/list'>Tasks List</Link>\n        </div>\n      </Alert>\n    </UILoader>\n  )\n}\nexport default TaskView\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}