{"version":3,"sources":["views/apps/invoice/clone/EditCard.js","views/apps/invoice/clone/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","views/apps/invoice/helper/hepler.js","helper/functionHelper.js"],"names":["activeOrgId","activeOrganizationid","activeOrg","activeOrganization","userId","orgUserId","AddCard","data","useState","block","setBlock","Loader","colourStyles","multiValue","styles","backgroundColor","id","useParams","MySwal","withReactContent","Swal","clientOptions","setClientOptions","serviceOptions","setServiceOptions","taxGroupOptions","setTaxGroupOptions","stateOptions","setStateOptions","accountOptions","setAccountOptions","finalTotal","setFinalTotal","finalSubTotal","setFinalSubTotal","convertionRate","setConvertedConvertionRate","convertedAmount","setConvertedAmount","invoiceItems","setInvoiceItems","invoiceTaxes","setInvoiceTaxes","userOptions","setuserOptions","selectedClient","setSelectedClient","taxValues","setTaxValues","accDetails","setAccDetails","exemptionReasonOptions","setExemptionReasonOptions","selEmployees","setSelEmployees","participants","setParticipants","navigate","useNavigate","dispatch","useDispatch","schema","yup","shape","createdBy","default","contactId","required","uniqueIdentity","contactEmail","contactName","invoiceDate","paymentDue","placeOfSupplyId","subTotalAmount","totalAmount","placeOfSupplyOthers","totalTaxAmount","organizationId","isRcmApplicable","isgstregistered","dueAmount","billingAddressLine1","billingAddressLine2","billingAddressState","billingAddressCity","billingAddressZipCode","billingCurrencyId","currencyid","bankAccountBankName","bankAccountBranchName","bankAccountHolderName","bankAccountId","billingAddressStateOthers","bankAccountIfscCode","bankAccountNumber","organizationAddressLine1","addressline1","organizationAddressLine2","addressline2","organizationCity","organizationcity","organizationState","statename","organizationStateOthers","stateothers","organizationZipCode","pinzipcode","convertionAmount","organizationName","name","organizationImageUrl","organizationimageid","organizationStateCode","stateshortname","organizationGstin","gstin","note","status","calculateTaxes","paymentStatus","rows","of","serviceId","invoiceId","sacCode","price","exemptionReasonId","isTaxApplicable","actualPrice","taxGroupId","taxes","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","setValue","reset","useFieldArray","keyName","fields","append","remove","store","useSelector","state","invoice","getOrganizationUsers","axios","post","then","response","arr","organizationusers","catch","err","console","log","deletefun","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","result","value","deleteInvoiceItem","dismiss","DismissReason","cancel","useEffect","clients","services","taxgroups","states","transactionaccounts","acc","find","obj","isPrimary","accountBusinessName","bankName","branchAddress","accountHolderName","ifscCode","accountNumber","exemptionreasons","res","temp","taskinvoiceparticipants","map","addItem","taxPrice","description","getClientData","getClient","payload","onSubmit","moment","startOf","valueOf","addInvoice","InvoiceItems","forEach","key","updatedBy","addInvoiceItems","length","ind","findIndex","push","users","deletedUser","addInvoiceParticipant","ItemFinalTotalAmount","items","_formValues","finalsubTotalAmount","finalTaxAmount","parseFloat","toFixed","output","a","parser","flat","reduce","item","undefined","existItem","taxName","taxAmount","String","Object","assign","JSON","stringify","calculateInvoiceTax","removeItem","tempid","flg","loadItemData","service_price","tax_group_id","desFlg","priceFlg","sacFlg","taxFlg","itemFlg","eachObj","selectedService","saccode","sellingprice","taxgroupid","exemptionreasonid","calculateTaxAmount","invoice_item_taxes","taxGroups","taxApplicable","nontaxableflag","istaxapplicable","billingaddresscountriesshorcode","taxid","calculateTax","percentage","dataTemp","parseInt","taxvaluefn","taxtype","stateid","taxType","taxdata","type","taxvalues","getTaxValue","bankAccountfn","keys","billingaddresscity","billingaddressline1","billingaddressline2","billingaddressstatesname","billingaddresszip","currenciessymbol","currenciescode","currenciesname","email","placeofsupplyid","billingaddressstateothers","placeofsupplyothers","currencyConvert","toUpperCase","currencycode","getInvoiceItemList","getInvoiceItems","contactid","uniqueno","contactemail","contactname","invoicedate","format","paymentdue","subtotalamount","totalamount","totaltaxamount","isrcmapplicable","dueamount","billingaddressstate","billingaddresszipcode","billingcurrencyid","bankaccountbankname","bankaccountbranchname","bankaccountholdername","bankaccountid","bankaccountifsccode","bankaccountnumber","organizationaddressline1","organizationaddressline2","organizationstate","organizationzipcode","organizationname","organizationimageurl","organizationstatecode","organizationgstin","handleUserChange","e","tempArr","Array","isArray","x","blocking","loader","className","xl","md","sm","ErrorText","message","renderError","imageid","Avatar","color","content","charAt","referrerPolicy","height","width","src","alt","size","placeholder","disabled","render","field","onChange","date","dateStr","options","altInput","ref","inputRef","classnames","classNamePrefix","c","val","getOptionLabel","option","getOptionValue","accountType","accountTypeArr","index","rules","invalid","onInput","lg","onClick","order","xs","billingaddresscountriesname","for","outline","tag","Link","to","reviewer","isMulti","InvoiceEdit","setData","getInvoice","taskinvoices","EditCard","UILoader","props","children","overlayColor","Tag","style","defaultProps","ComponentSpinner","amount","taxRateInPercentage","TaxType","calculatedTax","str","parse","replace","base_currency","currencies","get"],"mappings":"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","file":"static/js/28.5dc16a43.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus, Hash } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n// ** Reactstrap Imports\nimport { Row, Col, Card, Input, Label, Button, CardBody, CardText, InputGroup, InputGroupText, FormFeedback } from 'reactstrap'\nimport classnames from 'classnames'\n\nimport { addInvoice, addInvoiceItems, getClient, getInvoiceItems, deleteInvoiceItem, addInvoiceParticipant } from '../store/index'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { currencyConvert } from '@src/helper/functionHelper.js'\nimport { activeOrganizationid, activeOrganization, orgUserId } from '@src/helper/sassHelper'\nimport { calculateTax, parser } from '../helper/hepler'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport moment from 'moment'\n\nconst activeOrgId = activeOrganizationid()\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\n\nconst AddCard = ({ data }) => {\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const colourStyles = {\n    multiValue: (styles, { }) => {\n\n      return {\n        ...styles,\n        backgroundColor: '#7367f0'\n      }\n    }\n  }\n  const { id } = useParams()\n  const MySwal = withReactContent(Swal)\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  const [taxGroupOptions, setTaxGroupOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [accountOptions, setAccountOptions] = useState([])\n  const [finalTotal, setFinalTotal] = useState(0)\n  const [finalSubTotal, setFinalSubTotal] = useState(0)\n  const [convertionRate, setConvertedConvertionRate] = useState(0.00)\n  const [convertedAmount, setConvertedAmount] = useState(0.00)\n\n  const [invoiceItems, setInvoiceItems] = useState([])\n  const [invoiceTaxes, setInvoiceTaxes] = useState([])\n  const [userOptions, setuserOptions] = useState([])\n  const [selectedClient, setSelectedClient] = useState({})\n  const [taxValues, setTaxValues] = useState([])\n  const [accDetails, setAccDetails] = useState([])\n  const [exemptionReasonOptions, setExemptionReasonOptions] = useState([])\n  const [selEmployees, setSelEmployees] = useState([])\n  const [participants, setParticipants] = useState([])\n\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n\n  const schema = yup.object().shape({\n    createdBy: yup.string().default(userId),\n    contactId: yup.string().required(\"Please select a Client\"),\n    uniqueIdentity: yup.string(),\n    contactEmail: yup.string(),\n    contactName: yup.string(),\n    invoiceDate: yup.string(),\n    paymentDue: yup.string(),\n    placeOfSupplyId: yup.string().required(\"Please select a Place Of Supply\"),\n    subTotalAmount: yup.string(),\n    totalAmount: yup.string(),\n    placeOfSupplyOthers: yup.string().default(''),\n    totalTaxAmount: yup.string(),\n    organizationId: yup.string().default(activeOrgId),\n    isRcmApplicable: yup.boolean().default(false),\n    isgstregistered: yup.boolean().default(true),\n    dueAmount: yup.string(),\n    billingAddressLine1: yup.string(),\n    billingAddressLine2: yup.string(),\n    billingAddressState: yup.string(),\n    billingAddressCity: yup.string(),\n    billingAddressZipCode: yup.string(),\n    billingCurrencyId: yup.string().default(activeOrg.currencyid),\n    bankAccountBankName: yup.string(),\n    bankAccountBranchName: yup.string(),\n    bankAccountHolderName: yup.string(),\n    bankAccountId: yup.string().required('Please Select Account'),\n    billingAddressStateOthers: yup.string().default(''),\n    bankAccountIfscCode: yup.string(),\n    bankAccountNumber: yup.string(),\n    organizationAddressLine1: yup.string().default(activeOrg.addressline1),\n    organizationAddressLine2: yup.string().default(activeOrg.addressline2),\n    organizationCity: yup.string().default(activeOrg.organizationcity),\n    organizationState: yup.string().default(activeOrg.statename),\n    organizationStateOthers: yup.string().default(activeOrg.stateothers ?? ''),\n    organizationZipCode: yup.string().default(activeOrg.pinzipcode),\n    convertionAmount: yup.string().default(0),\n    organizationName: yup.string().default(activeOrg.name),\n    organizationImageUrl: yup.string().default(activeOrg.organizationimageid || ''),\n    organizationStateCode: yup.string().default(activeOrg.stateshortname),\n    organizationGstin: yup.string().default(activeOrg.gstin),\n    gstin: yup.string(),\n    note: yup.string().default(''),\n    status: yup.number().default(4),\n    calculateTaxes: yup.string(),\n    paymentStatus: yup.number().default(5),\n    rows: yup.array().of(\n      yup.object().shape({\n        serviceId: yup.string().required(\"Please Select Service Item\"),\n        invoiceId: yup.string(),\n        sacCode: yup.string(),\n        price: yup.string(),\n        organizationId: yup.string().default(activeOrgId),\n        exemptionReasonId: yup.string().default(''),\n        isTaxApplicable: yup.boolean().default(true),\n        actualPrice: yup.string().required(),\n        taxGroupId: yup.string().required(\"Pleace Select Tax\"),\n        subTotalAmount: yup.string().required(1),\n        taxes: yup.string()\n      })\n    )\n  })\n\n  const { handleSubmit, formState: { errors }, control, setValue, reset } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, append, remove } = useFieldArray({ control, name: 'rows', keyName: 'rowid' })\n\n  const store = useSelector(state => state.invoice)\n  const getClients = () => {\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getServices = () => {\n    axios.post('/services/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setServiceOptions(arr.services)\n    })\n  }\n\n  const getTaxValue = (taxType) => {\n    const taxdata = {\n      type: taxType\n    }\n    axios.post('/taxvalues/list', taxdata).then(response => {\n      const arr = response.data\n      setTaxValues(arr.taxvalues)\n    })\n  }\n\n  const getExemptionReason = () => {\n    axios.post('/exemptionreasons/dropdown').then(response => {\n      const arr = response.data\n      setExemptionReasonOptions(arr.exemptionreasons)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getTaxGroups = () => {\n    axios.post('/taxgroups/dropdown').then(response => {\n      const arr = response.data\n      setTaxGroupOptions(arr.taxgroups)\n    })\n  }\n\n\n  const getBankAccounts = () => {\n    axios.post('/transactionaccounts/dropdown').then(response => {\n      const arr = response.data\n      setAccountOptions(arr.transactionaccounts)\n      let acc = arr.transactionaccounts.find((obj) => obj.isPrimary)\n      if (!acc) {\n        acc = arr.transactionaccounts.find((obj) => obj.accountBusinessName === 'Cash')\n      }\n      setAccDetails(acc)\n      setValue('bankAccountBankName', acc.bankName)\n      setValue('bankAccountBranchName', acc.branchAddress)\n      setValue('bankAccountHolderName', acc.accountHolderName)\n      setValue('bankAccountId', acc.id)\n      setValue('bankAccountIfscCode', acc.ifscCode)\n      setValue('bankAccountNumber', acc.accountNumber)\n    })\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown').then(response => {\n      const arr = response.data.organizationusers\n      setuserOptions(arr)\n    }).catch((err) => {\n      console.log(err)\n    })\n  }\n\n  const getParticipants = () => {\n\n    axios.post('/taskinvoices/getparticipants', { invoiceId: id })\n      .then((res) => {\n        const temp = res.data.taskinvoiceparticipants.map((obj) => obj.id)\n        setSelEmployees(temp)\n        setParticipants(res.data.taskinvoiceparticipants)\n      })\n      .catch((err) => { console.log(err) })\n\n  }\n\n  const deletefun = (id) => {\n\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteInvoiceItem(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'Conatct has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  useEffect(() => {\n    // ** Get Clients\n    getClients()\n    getServices()\n    getTaxGroups()\n    getStates()\n    getBankAccounts()\n    getExemptionReason()\n    getOrganizationUsers()\n    getParticipants()\n\n  }, [])\n\n  const addItem = (() => {\n    append({ invoiceId: 0, organizationId: activeOrgId, serviceId: '', exemptionReasonId: 0, isTaxApplicable: true, sacCode: '', actualPrice: 0, taxGroupId: '', subTotalAmount: 0, taxPrice: 0, description: '' })\n  })\n\n  const getClientData = async (id) => {\n    const res = await dispatch(getClient(id))\n    setSelectedClient(res.payload)\n    remove()\n    if (res.payload.gstin !== '') {\n      append({ invoiceId: 0, organizationId: activeOrgId, serviceId: '', exemptionReasonId: 0, isTaxApplicable: true, sacCode: '', actualPrice: 0, taxGroupId: '', subTotalAmount: 0, taxPrice: 0, description: '' })\n    } else {\n      append({ invoiceId: 0, organizationId: activeOrgId, serviceId: '', exemptionReasonId: 0, isTaxApplicable: false, sacCode: '', actualPrice: 0, taxGroupId: '', subTotalAmount: 0, taxPrice: 0, description: '' })\n    }\n  }\n\n  const onSubmit = async data => {\n\n    data.invoiceDate = moment(data.invoiceDate).startOf('D').valueOf()\n    data.paymentDue = moment(data.paymentDue).startOf('D').valueOf()\n\n    setBlock(true)\n    const temp = data.rows\n    setInvoiceItems(temp)\n    delete data.rows\n    await dispatch(addInvoice(data))\n\n  }\n\n  const InvoiceItems = async (id) => {\n    invoiceItems.forEach((obj, key) => {\n      invoiceItems[key].invoiceId = id\n      invoiceItems[key].updatedBy = userId\n    })\n    await dispatch(addInvoiceItems(invoiceItems))\n\n    if (selEmployees.length > 0) {\n      const temp = []\n      selEmployees.forEach((id) => {\n        const ind = participants.findIndex(obj => obj.id === id)\n        if (ind !== -1) {\n          temp.push(participants[ind].id)\n        }\n      })\n      const obj = { users: selEmployees, organizationId: activeOrgId, invoiceId: id, deletedUser: temp }\n      await dispatch(addInvoiceParticipant(obj))\n    }\n\n    navigate(`/proposal/view/${store.invoiceId}`)\n  }\n\n  useEffect(async () => {\n    if (store.invoiceId !== null && invoiceItems.length > 0) {\n      await InvoiceItems(store.invoiceId)\n    }\n  }, [store.invoiceId, invoiceItems])\n\n  useEffect(() => {\n    addItem()\n  }, [])\n\n  const calculateInvoiceTax = () => {\n\n    const inputArray = control._formValues.rows.map(a => {\n      if (a.taxes) {\n        return parser(a.taxes)\n      } else {\n        return []\n      }\n    })\n\n    let temp = []\n    temp = inputArray.flat()\n    let output = []\n    output = temp.reduce((acc, item) => {\n      if (item !== undefined) {\n        const existItem = acc.find((obj) => {\n          return item.taxName === obj.taxName\n        })\n        if (existItem) {\n          existItem.taxAmount = parseFloat(existItem.taxAmount) + parseFloat(item.taxAmount)\n          existItem.taxAmount = String(existItem.taxAmount)\n        } else {\n          acc.push(Object.assign({}, item))\n        }\n      }\n      return acc\n    }, [])\n\n    setInvoiceTaxes(output)\n    setValue('calculateTaxes', JSON.stringify(output))\n\n  }\n\n  const ItemFinalTotalAmount = () => {\n\n    const items = control._formValues.rows\n    let finalTotal = 0\n    let finalsubTotalAmount = 0\n    let finalTaxAmount = 0\n    items.forEach(obj => {\n      finalTotal = parseFloat(obj.subTotalAmount) + parseFloat(finalTotal)\n      finalsubTotalAmount = parseFloat(obj.price) + parseFloat(finalsubTotalAmount)\n      finalTaxAmount = parseFloat(finalTaxAmount) + parseFloat(obj.taxPrice)\n    })\n\n    control._formValues.subTotalAmount = finalsubTotalAmount\n    control._formValues.totalAmount = finalTotal\n    control._formValues.dueAmount = finalTotal\n    control._formValues.totalTaxAmount = finalTaxAmount\n\n    setFinalTotal(finalTotal)\n    setConvertedAmount(parseFloat(convertionRate * finalTotal).toFixed(2))\n\n    setFinalSubTotal(finalsubTotalAmount)\n    calculateInvoiceTax()\n  }\n\n  const removeItem = async (ind) => {\n    const tempid = control._formValues.rows[ind].id\n    let flg\n    if (tempid !== undefined) {\n      flg = await deletefun(tempid)\n    }\n    if (flg) {\n      remove(ind)\n    }\n    ItemFinalTotalAmount()\n  }\n\n  const loadItemData = (ind, desFlg = false, priceFlg = false, sacFlg = false, taxFlg = false, itemFlg = false) => {\n    const eachObj = control._formValues.rows[ind]\n    if (eachObj.serviceId === undefined || eachObj.serviceId === '') {\n      return false\n    }\n    if (serviceOptions.length === 0) {\n      return false\n    }\n    let service_price, tax_group_id\n    const selectedService = serviceOptions.find((a) => a.id === eachObj.serviceId)\n    setValue(`rows[${ind}].serviceId`, eachObj.serviceId)\n    if (itemFlg) {\n      setValue(`rows[${ind}].sacCode`, selectedService.saccode || '')\n      service_price = selectedService.sellingprice || 0\n      tax_group_id = selectedService.taxgroupid\n      setValue(`rows[${ind}].actualPrice`, service_price)\n      setValue(`rows[${ind}].price`, String(selectedService.sellingprice) || 0)\n      setValue(`rows[${ind}].taxGroupId`, tax_group_id)\n      setValue(`rows[${ind}].description`, selectedService.description)\n      setValue(`rows[${ind}].exemptionReasonId`, selectedService.exemptionreasonid || '')\n    } else {\n      setValue(`rows[${ind}].sacCode`, sacFlg ? eachObj.sacCode : selectedService.saccode)\n      service_price = priceFlg ? eachObj.price : selectedService.sellingprice || 0\n      tax_group_id = taxFlg ? eachObj.taxGroupId : selectedService.taxgroupid\n      setValue(`rows[${ind}].price`, service_price)\n      setValue(`rows[${ind}].actualPrice`, String(selectedService.sellingprice) || 0)\n      setValue(`rows[${ind}].taxGroupId`, tax_group_id)\n      setValue(`rows[${ind}].description`, desFlg ? eachObj.description : selectedService.description)\n      setValue(`rows[${ind}].exemptionReasonId`, selectedService.exemptionreasonid || '')\n    }\n\n    let calculateTaxAmount = 0\n    const invoice_item_taxes = []\n\n    const taxGroups = taxGroupOptions.find((a) => a.id === tax_group_id)\n\n    let taxApplicable = taxGroups !== undefined ? !taxGroups.nontaxableflag : selectedService.istaxapplicable || false\n    taxApplicable = (taxApplicable && (activeOrg?.isgstregistered && (activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN')))\n\n    setValue(`rows[${ind}].isTaxApplicable`, taxApplicable)\n\n    if (taxApplicable) {\n      if (taxGroups !== undefined) {\n        taxValues.forEach(obj => {\n          if (obj.taxid === tax_group_id) {\n            let temp = 0\n            temp = calculateTax(service_price, obj.percentage, 2)\n            calculateTaxAmount = parseFloat(calculateTaxAmount) + parseFloat(temp)\n            const dataTemp = {}\n            dataTemp[\"taxName\"] = `${obj.name} (${obj.percentage}%)`\n            dataTemp[\"taxId\"] = parseInt(obj.id)\n            dataTemp[\"taxNameValue\"] = obj.name\n            dataTemp[\"taxPercentage\"] = String(obj.percentage)\n            dataTemp[\"taxAmount\"] = String(temp)\n\n            invoice_item_taxes.push(dataTemp)\n          }\n        })\n      }\n    }\n\n    setValue(`rows[${ind}].subTotalAmount`, parseFloat(parseFloat(calculateTaxAmount || 0.00) + parseFloat(service_price || 0.00)).toFixed(2))\n    setValue(`rows[${ind}].taxPrice`, parseFloat(calculateTaxAmount).toFixed(2))\n    setValue(`rows[${ind}].taxes`, JSON.stringify(invoice_item_taxes))\n    setValue(`rows[${ind}].updatedBy`, userId)\n\n    ItemFinalTotalAmount()\n\n  }\n\n  const taxvaluefn = () => {\n    let taxtype = 1\n    if (activeOrg.stateid === control._formValues.placeOfSupplyId) {\n      taxtype = 2\n    }\n\n    getTaxValue(taxtype)\n  }\n\n  useEffect(() => {\n    if (taxValues.length > 0) {\n      if (typeof control._formValues.rows === 'object') {\n        control._formValues.rows.forEach((obj, ind) => {\n          loadItemData(ind, true, true, true, true, false)\n        })\n      }\n    }\n  }, [taxValues])\n\n  const bankAccountfn = (id) => {\n    const acc = accountOptions.find((obj) => obj.id === id)\n    if (acc !== undefined) {\n      setAccDetails(acc)\n      setValue('bankAccountBankName', acc.bankName)\n      setValue('bankAccountBranchName', acc.branchAddress)\n      setValue('bankAccountHolderName', acc.accountHolderName)\n      setValue('bankAccountIfscCode', acc.ifscCode)\n      setValue('bankAccountNumber', acc.accountNumber)\n    }\n  }\n\n  useEffect(() => {\n    if (accountOptions.length > 0) {\n      bankAccountfn(control._formValues.bankAccountId)\n    }\n  }, [accountOptions])\n\n  useEffect(async() => {\n    if (Object.keys(selectedClient).length > 0) {\n      setValue('billingAddressCity', selectedClient.billingaddresscity || '')\n      setValue('billingAddressLine1', selectedClient.billingaddressline1 || '')\n      setValue('billingAddressLine2', selectedClient.billingaddressline2 || '')\n      setValue('billingAddressState', selectedClient.billingaddressstatesname || '')\n      setValue('billingAddressZipCode', selectedClient.billingaddresszip || '')\n      setValue('billingCurrencyId', selectedClient.currencyid || activeOrg.currencyid)\n      setValue('billingCurrencySymbol', selectedClient.currenciessymbol || '')\n      setValue('billingCurrencyShortName', selectedClient.currenciescode || '')\n      setValue('billingCurrencyName', selectedClient.currenciesname || '')\n      setValue('contactEmail', selectedClient.email || '')\n      setValue('gstin', selectedClient.gstin || '')\n      setValue('contactName', selectedClient.name || '')\n      setValue('placeOfSupplyId', selectedClient.placeofsupplyid || '')\n      setValue('convertionAmount', 0)\n      remove()\n      addItem()\n      if (activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN') {\n        taxvaluefn()\n      } else {\n        setValue('billingAddressStateOthers', selectedClient.billingaddressstateothers ?? '')\n        setValue('placeOfSupplyOthers', selectedClient.placeofsupplyothers ?? '')\n      }\n      if (selectedClient.billingaddresscountriesshorcode !== 'IN') {\n        const temp = await currencyConvert(selectedClient.currenciescode.toUpperCase(), activeOrg.currencycode)\n        setConvertedConvertionRate(temp)\n        setValue('convertionAmount', temp)\n      }\n    }\n\n  }, [selectedClient])\n\n  const renderError = () => {\n    const keys = Object.keys(errors)\n    const ErrorText = []\n    if (Array.isArray(keys)) {\n      keys.forEach((key) => {\n        if (key !== 'rows') {\n          ErrorText.push(<FormFeedback key={key}>${errors[key]?.message}</FormFeedback>)\n        }\n      })\n    }\n    return ErrorText\n  }\n\n  const getInvoiceItemList = async (id) => {\n    if (id !== undefined) {\n      const res = await dispatch(getInvoiceItems(id))\n      setValue('rows', res.payload)\n    }\n  }\n\n  useEffect(async () => {\n    if (Object.keys(data).length > 0) {\n      const invoice = data\n      reset({\n        contactId: invoice.contactid,\n        uniqueIdentity: invoice.uniqueno,\n        contactEmail: invoice.contactemail,\n        contactName: invoice.contactname,\n        invoiceDate: moment(invoice.invoicedate, 'x').format(\"MMM DD, YYYY\"),\n        paymentDue: moment(invoice.paymentdue, 'x').format(\"MMM DD, YYYY\"),\n        placeOfSupplyId: invoice.placeofsupplyid,\n        subTotalAmount: invoice.subtotalamount,\n        totalAmount: invoice.totalamount,\n        totalTaxAmount: invoice.totaltaxamount,\n        isRcmApplicable: invoice.isrcmapplicable,\n        dueAmount: invoice.dueamount,\n        billingAddressLine1: invoice.billingaddressline1 || '',\n        billingAddressLine2: invoice.billingaddressline2 || '',\n        billingAddressState: invoice.billingaddressstate || '',\n        billingAddressCity: invoice.billingaddresscity || '',\n        billingAddressZipCode: invoice.billingaddresszipcode || '',\n        billingCurrencyId: invoice.billingcurrencyid || '',\n        bankAccountBankName: invoice.bankaccountbankname,\n        bankAccountBranchName: invoice.bankaccountbranchname,\n        bankAccountHolderName: invoice.bankaccountholdername,\n        bankAccountId: invoice.bankaccountid,\n        bankAccountIfscCode: invoice.bankaccountifsccode,\n        bankAccountNumber: invoice.bankaccountnumber,\n        organizationAddressLine1: invoice.organizationaddressline1 === '' ? activeOrg.addressline1 : invoice.organizationaddressline1,\n        organizationAddressLine2: invoice.organizationaddressline2 === '' ? activeOrg.addressline2 : invoice.organizationaddressline2,\n        organizationCity: invoice.organizationcity === '' ? activeOrg.organizationcity : invoice.organizationcity,\n        organizationState: invoice.organizationstate === '' ? activeOrg.statename : invoice.organizationstate,\n        organizationZipCode: invoice.organizationzipcode === '' ? activeOrg.pinzipcode : invoice.organizationzipcode,\n        organizationName: invoice.organizationname === '' ? activeOrg.name : invoice.organizationname,\n        organizationImageUrl: invoice.organizationimageurl === null ? activeOrg.organizationimageid : invoice.organizationimageurl,\n        organizationStateCode: invoice.organizationstatecode || '',\n        organizationGstin: invoice.organizationgstin === '' ? activeOrg.gstin : invoice.gstin,\n        gstin: invoice.gstin,\n        note: invoice.note\n\n      })\n      await getClientData(invoice.contactid)\n      await getInvoiceItemList(invoice.id)\n    }\n  }, [data])\n\n  const handleUserChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    setSelEmployees(tempArr)\n\n  }\n\n\n  return (\n\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Row className='invoice-add'>\n          <Fragment>\n            <Col xl={10} md={8} sm={12}>\n\n              <Card className='invoice-preview-card'>\n\n                {/* Header */}\n                <CardBody className='invoice-padding pb-0'>\n                  {\n                    renderError()\n                  }\n                  <div className='d-flex justify-content-between flex-md-row flex-column invoice-spacing mt-0'>\n                    <div>\n                      <div className='logo-wrapper'>\n                        {activeOrg.imageid === null ? <Avatar color={'primary'} className='me-50' content={activeOrg.name !== null ? activeOrg.name?.charAt(0) : ''} /> : <img referrerPolicy=\"no-referrer\" className='rounded me-50' height={75} width={75} src={`https://drive.google.com/thumbnail?id=${activeOrg.imageid}&authuser=0`} alt=\"Organisation Logo\" />}\n                      </div>\n                      <h3 className='text-primary invoice-logo'>{activeOrg.name}</h3>\n                      <p className='card-text mb-25'>{activeOrg.addressline1}</p>\n                      <p className='card-text mb-25'>{activeOrg.addressline2}</p>\n                      <p className='card-text mb-0'>{activeOrg.organizationcity} - {activeOrg.pinzipcode}</p>\n                      <p className='card-text mb-0'>{activeOrg.statename}</p>\n                    </div>\n                    <div className='invoice-number-date mt-md-0 mt-2'>\n                      <div className='d-flex align-items-center justify-content-md-end mb-1'>\n                        <h4 className='invoice-title'>Profoma Invoice</h4>\n                        <InputGroup className='input-group-merge invoice-edit-input-group disabled'>\n                          <InputGroupText>\n                            <Hash size={15} />\n                          </InputGroupText>\n                          <Input\n                            type='number'\n                            className='invoice-edit-input'\n                            value={3171}\n                            placeholder='53634'\n                            disabled\n                          />\n                        </InputGroup>\n                      </div>\n                      <div className='d-flex align-items-center justify-content-md-between mb-1'>\n                        <span className='title required'>Profoma Invoice Date</span>\n                        <Controller\n                          control={control}\n                          name={`invoiceDate`}\n                          id='invoiceDate'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true }}\n                              className='form-control invoice-edit-input date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                      <div className='d-flex align-items-center justify-content-md-between'>\n                        <span className='title required'>Due Date</span>\n                        <Controller\n                          control={control}\n                          name={`paymentDue`}\n                          id='paymentDue'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true }}\n                              className='form-control invoice-edit-input due-date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </CardBody>\n                {/* /Header */}\n\n                <hr className='invoice-spacing' />\n\n                {/* Address and Contact */}\n                <CardBody className='invoice-padding pt-0'>\n                  <Row className='row-bill-to invoice-spacing'>\n                    <Col className='col-bill-to ps-0' xl='6'>\n                      <h6 className='invoice-to-title required'>Profoma Invoice To</h6>\n                      <div className='invoice-customer'>\n                        <Controller\n                          control={control}\n                          name={`contactId`}\n                          id={`contactId`}\n                          render={({ field, ref }) => (\n                            <Select\n                              inputRef={ref}\n                              className={classnames('react-select', { 'is-invalid': errors['contactId'] })}\n                              {...field}\n                              classNamePrefix='select'\n                              options={clientOptions}\n                              value={clientOptions.find(c => { return c.id === field.value })}\n                              onChange={val => { field.onChange(val.id); getClientData(val.id) }}\n                              getOptionLabel={(option) => option.name}\n                              getOptionValue={(option) => option.id}\n                            />\n                          )}\n                        />\n                      </div>\n                      <Col className='pe-0 mt-xl-2' xl='4'>\n                        <table>\n                          <tbody>\n                            <tr>\n                              <td>{selectedClient.billingaddressline1}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddressline2}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddresscity} {selectedClient.billingaddresszip && `-`}  {selectedClient.billingaddresszip}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddressstatesname ?? selectedClient.billingaddressstateothers}</td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </Col>\n                    </Col>\n                    <Col className='col-bill-to ps-0' xl='2'></Col>\n                    <Col className='pe-0 mt-xl-0 mt-2' xl='4'>\n                      <h6 className='mb-2'>Payment Details:</h6>\n                      <table>\n                        <tbody>\n                          <tr>\n                            <td className='pe-1'>Bank Name:</td>\n                            <td>\n                              {accDetails.bankName && <span className='fw-bolder'>{accDetails.bankName}</span>}\n                            </td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Account name:</td>\n                            <td>{accDetails.accountHolderName && <span className='fw-bolder'>{accDetails.accountHolderName}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Branch Name:</td>\n                            <td> {accDetails.branchAddress && <span className='fw-bolder'>{accDetails.branchAddress}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>IFSC Code:</td>\n                            <td>{accDetails.ifscCode && <span className='fw-bolder'>{accDetails.ifscCode} </span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Account Type:</td>\n                            <td>{accDetails.accountType && <span className='fw-bolder'>{accountTypeArr[accDetails.accountType]} </span>}</td>\n                          </tr>\n\n                        </tbody>\n                      </table>\n                    </Col>\n                  </Row>\n                  {(activeOrg?.isgstregistered) &&\n                    <Row className='row-bill-to invoice-spacing'>\n                      <Col className='col-bill-to ps-0' xl='6'>\n                        <h6 className='invoice-to-title mt-2 required'>Place Of Supply</h6>\n                        <div className='invoice-customer'>\n\n                          {(activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN') &&\n                            <Controller\n                              control={control}\n                              name={`placeOfSupplyId`}\n                              id={`placeOfSupplyId`}\n                              render={({ field, ref }) => (\n                                <Select\n                                  inputRef={ref}\n                                  className={classnames('react-select', { 'is-invalid': errors['placeOfSupplyId'] })}\n                                  {...field}\n                                  classNamePrefix='select'\n                                  options={stateOptions}\n                                  value={stateOptions.find(c => { return c.id === field.value })}\n                                  onChange={val => { field.onChange(val.id); taxvaluefn() }}\n                                  getOptionLabel={(option) => option.name}\n                                  getOptionValue={(option) => option.id}\n                                />\n                              )}\n                            />\n                          }\n                          {(activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode !== 'IN') &&\n                            selectedClient?.placeofsupplyothers\n                          }\n                        </div>\n                        {((activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN')) && <div className='mt-1'> GSTIN : {selectedClient.gstin}</div>}\n                      </Col>\n                      <Col className='col-bill-to ps-0' xl='2'></Col>\n                      <Col className='pe-0 mt-xl-0 mt-2' xl='4'>\n                        <table>\n                          <tbody>\n                            <tr>\n                              <td className='invoice-to-title mt-2 '>Currency Code:</td>\n                              <td>\n                                {selectedClient.currenciescode}\n                              </td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </Col>\n                    </Row>\n                  }\n                </CardBody>\n                {/* /Address and Contact */}\n\n                {/* Product Details */}\n                <CardBody className='invoice-padding invoice-product-details'>\n                  {fields.map((item, index) => {\n                    return (\n                      <div key={item.id} className='repeater-wrapper'>\n                        <Row>\n                          <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                            <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                              <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-4 col-sm-12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Item</CardText>\n                                <Controller\n                                  control={control}\n                                  name={`rows[${index}].serviceId`}\n                                  rules={{ required: true }}\n                                  render={({ field, ref }) => (\n                                    <Select\n                                      {...field}\n                                      inputRef={ref}\n                                      className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.serviceId })}\n                                      classNamePrefix='select'\n                                      options={serviceOptions}\n                                      value={serviceOptions.find(c => c.id === field.value)}\n                                      onChange={val => { field.onChange(val.id); loadItemData(index, false, false, false, false, true) }}\n                                      getOptionLabel={(option) => option.name}\n                                      getOptionValue={(option) => option.id}\n                                    />\n                                  )}\n                                />\n                                {errors.rows?.[index]?.serviceId && <FormFeedback>{errors.rows?.[index]?.serviceId.message}</FormFeedback>}\n                                <Controller\n                                  id={`rows_${index}_description`}\n                                  name={`rows[${index}].description`}\n                                  control={control}\n                                  render={({ field }) => <Input className='mt-1' invalid={errors.rows?.[index]?.description && true} onInput={(val) => { field.onChange(val); loadItemData(index, true, false, false, false, false) }} {...field} />}\n                                />\n                              </Col>\n                              {(item.isTaxApplicable) &&\n                                <Col className='my-lg-0 my-2 col-lg-2 col-sm-12'>\n                                  <CardText className='col-title mb-md-2 mb-0'>SAC Code</CardText>\n                                  <Controller\n                                    id={`rows_${index}_sacCode`}\n                                    name={`rows[${index}].sacCode`}\n                                    control={control}\n                                    render={({ field }) => <Input type='text' invalid={errors.rows?.[index]?.sacCode && true} onInput={(val) => { field.onChange(val); loadItemData(index, false, true, true, false, false) }} {...field} />}\n                                  />\n                                  {errors.rows?.[index]?.sacCode && <FormFeedback>{errors.rows?.[index]?.sacCode.message}</FormFeedback>}\n                                </Col>\n                              }\n                              <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                                <CardText className='col-title mb-md-2 mb-0'>Price</CardText>\n                                <Controller\n                                  id={`rows_${index}_price`}\n                                  name={`rows[${index}].price`}\n                                  control={control}\n                                  render={({ field }) => <Input type='number' id={`input_rows_${index}_price`} onInput={(val) => { field.onChange(val); loadItemData(index, false, true, false, false, false) }} {...field} invalid={errors.rows?.[index]?.price && true} />}\n                                />\n                                {errors.rows?.[index]?.price && <FormFeedback>{errors.rows?.[index]?.price.message}</FormFeedback>}\n                              </Col>\n                              {(item.isTaxApplicable) &&\n                                <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                                  <CardText className='col-title mb-md-50 mb-0'>Tax Rate</CardText>\n                                  <Controller\n                                    control={control}\n                                    name={`rows[${index}].taxGroupId`}\n                                    rules={{ required: true }}\n                                    render={({ field, ref }) => (\n                                      <Select\n                                        {...field}\n                                        inputRef={ref}\n                                        className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.taxGroupId })}\n                                        classNamePrefix='select'\n                                        options={taxGroupOptions}\n                                        value={taxGroupOptions.find(c => c.id === field.value)}\n                                        onChange={(val) => { field.onChange(val.id); loadItemData(index, false, true, false, true, false) }}\n                                        getOptionLabel={(option) => option.name}\n                                        getOptionValue={(option) => option.id}\n                                      />\n                                    )}\n                                  />\n                                  {errors.rows?.[index]?.taxGroupId && <FormFeedback>{errors.rows?.[index]?.taxGroupId.message}</FormFeedback>}\n\n                                  {\n                                    !item.isTaxApplicable && <Controller\n                                      control={control}\n                                      name={`rows[${index}].exemptionReasonId`}\n                                      rules={{ required: true }}\n                                      render={({ field, ref }) => (\n                                        <Select\n                                          {...field}\n                                          inputRef={ref}\n                                          className={classnames('react-select mt-1', { 'is-invalid': errors.rows?.[index]?.taxGroupId })}\n                                          classNamePrefix='select'\n                                          options={exemptionReasonOptions}\n                                          value={exemptionReasonOptions.find(c => c.id === field.value)}\n                                          onChange={(val) => { field.onChange(val.id) }}\n                                          getOptionLabel={(option) => option.name}\n                                          getOptionValue={(option) => option.id}\n                                        />\n                                      )}\n                                    />\n                                  }\n\n                                </Col>\n                              }\n                              <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Amount</CardText>\n                                {control._formValues.rows[index].subTotalAmount} {selectedClient?.currenciessymbol}\n                              </Col>\n                            </Row>\n                            <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                              <X size={18} className='cursor-pointer' onClick={() => { removeItem(index) }} />\n                            </div>\n                          </Col>\n                        </Row>\n                      </div>\n                    )\n                  })}\n                  <Row className='mt-1'>\n                    <Col sm='12' className='px-0'>\n                      <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                        <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                      </Button>\n                    </Col>\n                  </Row>\n                </CardBody>\n\n                {/* /Product Details */}\n\n                {/* Invoice Total */}\n                <CardBody className='invoice-padding'>\n                  <Row className='invoice-sales-total-wrapper'>\n                    <Col className='mt-md-0 mt-3' md={{ size: '6', order: 1 }} xs={{ size: 12, order: 2 }}>\n                      {selectedClient.billingaddresscountriesname !== 'IN' &&\n\n                        <p>Amount in {activeOrg.currencycode} : {convertedAmount} </p>\n                      }\n                    </Col>\n                    <Col className='d-flex justify-content-end' md={{ size: '6', order: 2 }} xs={{ size: 12, order: 1 }}>\n                      <div className='invoice-total-wrapper'>\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>\n                            {(activeOrg?.isgstregistered && (activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN')) && 'Pre Tax'}  Amount:</p>\n                          <p className='invoice-total-amount'>{finalSubTotal} {selectedClient?.currenciessymbol}</p>\n                        </div>\n                        {(activeOrg?.isgstregistered && (activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN')) && <div>\n                          {\n                            invoiceTaxes.map((obj, ind) => {\n                              return (<div key={ind} className='invoice-total-item'>\n                                <p className='invoice-total-title'>{obj?.taxName}</p>\n                                <p className='invoice-total-amount'>{obj?.taxAmount} {selectedClient?.currenciessymbol}</p>\n                              </div>)\n                            })\n                          }\n                        </div>\n                        }\n                        <hr className='my-50' />\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>Total Payable:</p>\n                          <p className='invoice-total-amount'>{finalTotal} {selectedClient?.currenciessymbol}</p>\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Total */}\n\n                <hr className='invoice-spacing mt-0' />\n\n                {/* Invoice Note */}\n                <CardBody className='invoice-padding py-0'>\n                  <Row>\n                    <Col>\n                      <div className='mb-2'>\n                        <Label for='note' className='form-label fw-bold'>\n                          Note:\n                        </Label>\n                        <Controller\n                          id='note'\n                          name='note'\n                          control={control}\n                          render={({ field }) => <Input type=\"textarea\" value={field.value} invalid={errors.note && true} {...field} />}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Note */}\n              </Card>\n\n            </Col>\n            <Col xl={2} md={4} sm={12}>\n              <Card className='invoice-action-wrapper'>\n                <CardBody>\n                  <Button color='primary' type='submit' block outline className='mb-75'>\n                    Save\n                  </Button>\n                  <Button color='warning' block outline tag={Link} to='/invoice/list'>\n                    Cancel\n                  </Button>\n                </CardBody>\n              </Card>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50 required'>Accept payments via</p>\n                  <Controller\n                    control={control}\n                    name={`bankAccountId`}\n                    rules={{ required: true }}\n                    render={({ field, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select mt-1', { 'is-invalid': errors.bankAccountId })}\n                        classNamePrefix='select'\n                        options={accountOptions}\n                        value={accountOptions.find(c => c.id === field.value)}\n                        onChange={(val) => { field.onChange(val.id); bankAccountfn(val.id) }}\n                        getOptionLabel={(option) => option.accountHolderName}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n                  />\n                </div>\n              </div>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50'>Select Employee</p>\n\n                  <Controller\n                    control={control}\n                    name=\"reviewer\"\n                    id=\"reviewer\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.reviewer })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={userOptions}\n                        isMulti={true}\n                        value={value} // set selected values\n                        onChange={handleUserChange}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                        styles={colourStyles}\n                      />\n                    )}\n\n                  />\n                </div>\n              </div>\n            </Col>\n          </Fragment >\n        </Row>\n      </form >\n    </UILoader>\n  )\n}\n\nexport default AddCard\n","// ** React Imports\nimport { useEffect, useState } from 'react'\nimport { useParams, Link } from 'react-router-dom'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\n\n// ** Reactstrap Imports\nimport { Alert, Row, Col } from 'reactstrap'\n\n// ** Invoice Edit Components\nimport EditCard from './EditCard'\n\nconst InvoiceEdit = () => {\n  // ** Hooks\n  const { id } = useParams()\n\n  // ** States\n  const [data, setData] = useState(null)\n\n  // ** Get invoice on mount based on id\n  const getInvoice = async () => {\n    axios.post('/taskinvoices/get', { id }).then((res) => {\n      setData(res.data.taskinvoices)\n    }).catch((err) => { console.log(err) })\n\n  }\n\n  useEffect(() => {\n    getInvoice()\n  }, [])\n\n  return data !== null && data !== undefined ? (\n    <div className='invoice-edit-wrapper'>\n      <Row className='invoice-edit'>\n        <Col xl={12} md={8} sm={12}>\n          <EditCard data={data} />\n        </Col>\n      </Row>\n    </div>\n  ) : (\n    <Alert color='danger'>\n      <h4 className='alert-heading'>Invoice not found</h4>\n      <div className='alert-body'>\n        Invoice with id: {id} doesn't exist. Check list of all invoices:{' '}\n        <Link to='/apps/invoice/list'>Invoice List</Link>\n      </div>\n    </Alert>\n  )\n}\n\nexport default InvoiceEdit\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","export const calculateTax = (amount, taxRateInPercentage, TaxType) => {\n    let calculatedTax = 0\n    if (TaxType === 1) { //Inclusive\n        calculatedTax = parseFloat(amount) - (parseFloat(amount) * (100 / (100 + parseFloat(taxRateInPercentage))))\n        // calculatedTax = parseFloat(amount) - parseFloat(calculatedTax);\n\n    } else if (TaxType === 2) { //Exclusive\n        calculatedTax = (parseFloat(amount) * parseFloat(taxRateInPercentage)) / 100\n    }\n    return parseFloat(calculatedTax)\n}\n\nexport const parser = (str) => {\n\n    return JSON.parse(Array.isArray(str) ? JSON.stringify(str).replace(/\\\\/g, '') : str.replace(/\\\\/g, ''))\n\n}","import axios from '@src/configs/axios/axiosConfig'\n\nexport const indianFormattedPrice = (val) => {\n\n  const value = String(val)\n\n  let removedValue = ''\n  let finalVal = ''\n  if (value.includes('.')) {\n    removedValue = value.slice(value.indexOf('.'))\n    finalVal = value.replace(removedValue, '')\n    finalVal = finalVal.toString()\n  } else {\n    finalVal = value.toString()\n  }\n  let lastThree = finalVal.substring(finalVal.length - 3)\n  const otherNumbers = finalVal.substring(0, finalVal.length - 3)\n  if (otherNumbers !== '') lastThree = `,${lastThree}`\n  const res = otherNumbers.replace(/\\B(?=(\\d{2})+(?!\\d))/g, \",\") + lastThree\n  return res + (removedValue === '' ? '.00' : removedValue)\n}\n\nexport const currencyConvert = async (base_currency, currencies) => {\n\n  const res = await axios.get(\n    `https://api.freecurrencyapi.com/v1/latest?apikey=fca_live_C8lWFFJJ2Q2soCa9lcN99U1dc8yl7A4gUoXNyjhj&base_currency=${base_currency}&currencies=${currencies}`)\n\n\n  return res?.data?.data[currencies]\n}"],"sourceRoot":""}