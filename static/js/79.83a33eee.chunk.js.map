{"version":3,"sources":["views/pages/account-settings/Invoice/store/exemptionreason.js","views/pages/account-settings/Invoice/ExemptionReasonSetting.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["userId","orgUserId","getData","createAsyncThunk","params","axios","post","response","data","exemptionreason","addExemption","dispatch","getState","invoiceaccount","updateExemption","deleteExemption","id","updatedBy","createSlice","name","initialState","total","allData","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","activeOrgId","activeOrganizationid","InvoiceAccounts","MySwal","withReactContent","Swal","useState","setData","selected","setSelected","block","setBlock","Loader","formModal","setFormModal","useDispatch","schema","yup","shape","organizationId","default","required","createdBy","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","reset","getList","then","res","exemptionreasons","catch","err","console","log","closeModal","onSubmit","eventname","toast","success","position","useEffect","blocking","loader","color","size","onClick","className","lg","map","card","index","status","organizationid","openEditModal","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","result","value","dismiss","DismissReason","cancel","isOpen","toggle","Object","keys","key","message","tag","Form","fieldLabel","fieldName","reqflag","md","sm","classnames","for","render","field","invalid","getRow","xs","type","UILoader","props","children","overlayColor","Tag","style","backgroundColor","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/79.83a33eee.chunk.js","sourcesContent":["// ** Redux Imports\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\n// ** Axios Imports\nimport axios from '@src/configs/axios/axiosConfig'\nimport { orgUserId } from '@src/helper/sassHelper'\nconst userId = orgUserId()\n\nexport const getData = createAsyncThunk('appInvoiceSetting/getData', async params => {\n  const response = await axios.post(`/transactionaccounts/list`, params)\n  return {\n    params,\n    data: response.data.exemptionreason\n  }\n})\nexport const addExemption = createAsyncThunk('appInvoiceSetting/addExemption', async (data, { dispatch, getState }) => {\n\n  await axios.post(`/exemptionreasons/create`, data)\n  await dispatch(getData(getState().invoiceaccount.params))\n  return []\n\n})\n\nexport const updateExemption = createAsyncThunk('appInvoiceSetting/updateExemption', async (data, { dispatch, getState }) => {\n  await axios.post(`/exemptionreasons/update`, data)\n  await dispatch(getData(getState().invoiceaccount.params))\n  return []\n})\n\nexport const deleteExemption = createAsyncThunk('appInvoiceSetting/deleteExemption', async (id, { dispatch, getState }) => {\n  await axios.post('/exemptionreasons/delete', { id, updatedBy: userId })\n  await dispatch(getData(getState().invoiceaccount.params))\n  return id\n})\n\nexport const appInvoiceAccountSlice = createSlice({\n  name: 'appInvoiceSetting',\n  initialState: {\n    data: [],\n    total: 1,\n    params: {},\n    allData: []\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(getData.fulfilled, (state, action) => {\n        state.data = action.payload.data\n        state.params = action.payload.params\n      })\n\n  }\n})\n\nexport default appInvoiceAccountSlice.reducer\n","// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\n\n// ** Reactstrap Imports\nimport {\n  Row,\n  Col,\n  Card,\n  Form,\n  Badge,\n  Label,\n  Input,\n  Button,\n  CardBody,\n  FormFeedback,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Table,\n  CardHeader\n} from 'reactstrap'\nimport axios from '@src/configs/axios/axiosConfig'\nimport { useForm, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\nimport { addExemption, updateExemption, deleteExemption } from './store/exemptionreason'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\n\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { useDispatch } from 'react-redux'\nimport toast from 'react-hot-toast'\nimport { Edit, Trash, Plus } from 'react-feather'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n\nconst InvoiceAccounts = () => {\n  const MySwal = withReactContent(Swal)\n  const [data, setData] = useState([])\n  const [selected, setSelected] = useState(null)\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const [formModal, setFormModal] = useState(false)\n  const dispatch = useDispatch()\n\n  const schema = yup.object().shape({\n    organizationId: yup.string().default(activeOrgId),\n    name: yup.string().required('Please Enter Exemption'),\n    updatedBy: yup.string().default(userId),\n    createdBy: yup.string().default(userId)\n  })\n\n  const { handleSubmit, formState: { errors }, control, reset } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n\n  const getList = () => {\n    axios.post('/exemptionreasons/list')\n      .then((res) => {\n        setData(res.data.exemptionreasons)\n      })\n      .catch((err) => { console.log(err) })\n  }\n\n\n  const deletefn = (id) => {\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteExemption(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'Account has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        getList()\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  const closeModal = () => {\n\n    setFormModal(false)\n    reset({\n      organizationId: activeOrgId,\n      id: '',\n      name: ''\n    })\n  }\n\n  const onSubmit = async data => {\n    setBlock(true)\n    let eventname\n    if (selected !== null) {\n      await dispatch(updateExemption(data))\n      reset({ name: '' })\n      eventname = 'Added'\n      setSelected(null)\n    } else {\n      await dispatch(addExemption(data))\n      eventname = 'Updated'\n      reset({ name: '' })\n    }\n    closeModal()\n    setBlock(false)\n    toast.success(`Exemption Reason ${eventname} Succesfully`, { position: 'bottom-right' })\n    getList()\n  }\n\n  const getRow = (fieldLabel, fieldName, reqflag = true) => {\n    return (\n      <Col md={12}>\n        <Label sm='12' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Col>\n    )\n  }\n\n  useEffect(async () => {\n    getList()\n  }, [])\n\n  const openEditModal = card => {\n    setSelected(card)\n    setFormModal(true)\n    reset({\n      organizationId: activeOrgId,\n      id: card.id,\n      name: card.name\n    })\n  }\n\n  return (\n    <Fragment>\n      <UILoader blocking={block} loader={<Loader />}>\n        <Card>\n          <CardHeader>\n            <h5>Exemption Reason</h5>\n            <Button color='primary' size='sm' onClick={() => { setFormModal(true) }}> <Plus size={15} />Add Reason</Button>\n          </CardHeader>\n          <CardBody className='py-25'>\n            <Row className='gx-4'>\n              <Col lg='12' className='mt-2 mt-lg-0'>\n                <Table className='table table-hover table-bordered'>\n                  <thead>\n                    <tr>\n                      <th>Name</th>\n                      <th>Status</th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {data.map((card, index) => {\n                      return (\n                        <tr key={index}>\n                          <td className='mb-0'>{card.name}</td>\n                          <td>\n                            {card.status === 1 ? (\n                              <Badge color='light-success' className='ms-50'>\n                                Active\n                              </Badge>\n                            ) : (\n                              <Badge color='light-danger' className='ms-50'>\n                                InActive\n                              </Badge>\n                            )}\n                          </td>\n                          <td className=''>\n                            {card.organizationid !== null &&\n                              <div className='d-flex'>\n                                <Edit size={15} className='me-75' onClick={() => openEditModal(card)}>\n                                  Edit\n                                </Edit>\n                                <Trash size={15} onClick={() => { deletefn(card.id) }}>Delete</Trash>\n                              </div>\n                            }\n                          </td>\n                        </tr>\n                      )\n                    })}\n                  </tbody>\n                </Table>\n              </Col>\n\n              <Modal isOpen={formModal} toggle={() => setFormModal(!formModal)} className='modal-dialog-centered'>\n                <ModalHeader toggle={() => closeModal()}>Exemption Reason</ModalHeader>\n                <ModalBody>\n                  <Row lg='12'>\n                    {\n                      Object.keys(errors).map((key) => {\n\n                        return <FormFeedback key={key}>${errors[key]?.message}</FormFeedback>\n\n                      })\n                    }\n                    <Row tag={Form} className='gx-2 gy-1' onSubmit={handleSubmit(onSubmit)}>\n\n                      {getRow('Exemption Reason', 'name')}\n\n                      <Col className='mt-2 pt-1' xs={12}>\n                        <Button type='submit' className='me-1' color='primary'>\n                          Submit\n                        </Button>\n                        <Button type='button' className='me-1' color='warning' onClick={() => closeModal()}>\n                          Cancel\n                        </Button>\n                      </Col>\n\n                    </Row>\n                  </Row>\n                </ModalBody>\n              </Modal>\n            </Row>\n          </CardBody>\n        </Card>\n      </UILoader>\n    </Fragment>\n  )\n}\n\nexport default InvoiceAccounts\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}