{"version":3,"sources":["views/pages/account-settings/Attendance/AttendanceScore.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","views/pages/account-settings/Attendance/store/index.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","AttendanceScore","dispatch","useDispatch","useState","block","setBlock","Loader","schema","yup","shape","organizationId","default","punchInGrace","required","workPercentage","updatedBy","createdBy","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","reset","onSubmit","data","addOrgPreference","toast","success","position","useEffect","getData","response","undefined","res","payload","parseInt","workpercentage","punchingrace","getRow","fieldLabel","fieldName","reqflag","md","sm","className","classnames","for","id","name","render","field","invalid","message","blocking","loader","lg","Object","keys","map","key","tag","Form","xs","type","color","UILoader","props","children","overlayColor","Tag","style","backgroundColor","defaultProps","ComponentSpinner","createAsyncThunk","axios","post","organizationprefernces","createSlice","initialState","accounts","total","params","allData","reducers","extraReducers","builder","addCase","fulfilled","state","action"],"mappings":"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","file":"static/js/66.9e2f98e7.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\n\n// ** Reactstrap Imports\nimport {\n  Row,\n  Col,\n  Card,\n  Form,\n  Badge,\n  Label,\n  Input,\n  Button,\n  CardBody,\n  FormFeedback\n} from 'reactstrap'\nimport { getData, addOrgPreference } from './store/index'\nimport { useForm, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\n\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { useDispatch } from 'react-redux'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nimport toast from 'react-hot-toast'\n\nconst AttendanceScore = () => {\n\n  const dispatch = useDispatch()\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const schema = yup.object().shape({\n    organizationId: yup.string().default(activeOrgId),\n    punchInGrace: yup.string().required('Please Enter  Grace Time'),\n    workPercentage: yup.string().required('Please Enter Work Percentages'),\n    updatedBy: yup.string().default(userId),\n    createdBy: yup.string().default(userId)\n  })\n\n  const { handleSubmit, formState: { errors }, control, reset } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const onSubmit = async data => {\n    setBlock(true)\n    await dispatch(addOrgPreference(data))\n    setBlock(false)\n    toast.success('Attendance Score Updated successfully.', { position: 'bottom-right' })\n  }\n\n  useEffect(async () => {\n    const response = await dispatch(getData(activeOrgId))\n    const res = response.payload.data\n    if (res !== undefined) {\n      reset({\n        organizationId: activeOrgId,\n        workPercentage: parseInt(res.workpercentage || 0),\n        punchInGrace: parseInt(res.punchingrace || 0),\n        updatedBy: userId,\n        createdBy: userId\n      })\n    }\n  }, [])\n\n\n  const getRow = (fieldLabel, fieldName, reqflag = true) => {\n    return (\n      <Col md={12}>\n        <Label sm='12' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Col>\n    )\n  }\n\n  return (\n    <Fragment>\n      <UILoader blocking={block} loader={<Loader />}>\n        <Card>\n          <CardBody className='py-25'>\n            <Row className='gx-4'>\n              <Col lg='6'>\n                {\n                  Object.keys(errors).map((key) => {\n                    return <FormFeedback key={key}>${errors[key]?.message}</FormFeedback>\n                  })\n                }\n                <Row tag={Form} className='gx-2 gy-1' onSubmit={handleSubmit(onSubmit)}>\n                  {getRow('Office Clock In Time - Grace period (in minutes)', 'punchInGrace', true)}\n                  {getRow('Work Availability definition(Percentage)', 'workPercentage', true)}\n                  <Col className='mt-2 pt-1' xs={12}>\n                    <Button type='submit' className='me-1' color='primary'>\n                      Submit\n                    </Button>\n                  </Col>\n                </Row>\n              </Col>\n              <Col lg='6'>\n                <Row>\n                  <Col md={4} >\n                    <Badge color='warning'>Early</Badge>\n                    <p>Before on Time</p></Col>\n                  <Col md={4} ><Badge color='success'>Regular</Badge>\n                    <p>On Time to tolerence</p></Col>\n                  <Col md={4} ><Badge color='danger'>Late</Badge>\n                    <p>After tolerence</p></Col>\n                </Row>\n                <Row>\n                  <Col md={4} ><Badge color='success'>Good</Badge>\n                    <p>Equal or Above the Percent</p></Col>\n                  <Col md={4} ><Badge color='danger'>Bad</Badge>\n                    <p>Below the Percent</p></Col>\n                </Row>\n              </Col>\n            </Row>\n          </CardBody>\n        </Card>\n      </UILoader>\n    </Fragment>\n  )\n}\n\nexport default AttendanceScore\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","// ** Redux Imports\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\n// ** Axios Imports\nimport axios from '@src/configs/axios/axiosConfig'\n\nexport const getData = createAsyncThunk('appInvoiceSetting/getData', async organizationId => {\n  const response = await axios.post(`/organizationprefernces/get`, { organizationId })\n  return {\n    data: response.data.organizationprefernces\n  }\n})\n\nexport const addOrgPreference = createAsyncThunk('appInvoiceSetting/addOrgPreference', async (data, { }) => {\n\n  await axios.post(`/organizationprefernces/createandupdate`, data)\n  return ''\n\n})\n\nexport const appInvoiceAccountSlice = createSlice({\n  name: 'appInvoiceSetting',\n  initialState: {\n    accounts: [],\n    total: 1,\n    params: {},\n    allData: []\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(getData.fulfilled, (state, action) => {\n        state.accounts = action.payload.data\n        state.params = action.payload.params\n      })\n\n  }\n})\n\nexport default appInvoiceAccountSlice.reducer\n"],"sourceRoot":""}