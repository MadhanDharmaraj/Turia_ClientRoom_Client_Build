{"version":3,"sources":["router/Router.js","App.js"],"names":["Error","lazy","Login","NotAuthorized","Router","allRoutes","useRoutes","path","index","element","replace","to","user","getUserData","getHomeRouteForLoggedInUser","role","getHomeRoute","BlankLayout","children","activeOrg","activeOrganization","App","useState","setAllRoutes","refeshApp","setefreshApp","updateExists","setUpdateExists","paystore","useSelector","state","organization","dispatch","useDispatch","layout","useLayout","today","moment","startOf","valueOf","useEffect","getRoutes","showRefreshUI","e","detail","console","log","warn","paymentFlag","setPaymentFlag","document","addEventListener","once","navigator","serviceWorker","window","location","reload","geolocation","getCurrentPosition","position","coords","latitude","longitude","geoLocation","error","nextpaymentdate","localStorage","getItem","JSON","parse","paymentStaus","Notification","requestPermission","paymentStausFlag","setItem","removeItem","className","color","isOpen","size","onClick","postMessage","type","fallback","process","id","rolename","lg","sm","format"],"mappings":"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","file":"static/js/168.5b5a19a8.chunk.js","sourcesContent":["// ** Router imports\nimport { lazy } from 'react'\n\n// ** Router imports\nimport { useRoutes, Navigate } from 'react-router-dom'\n\n// ** Layouts\nimport BlankLayout from '@layouts/BlankLayout'\n\n// ** Utils\nimport { getUserData, getHomeRouteForLoggedInUser } from '../utility/Utils'\n\n// ** Components\nconst Error = lazy(() => import('../views/pages/misc/Error'))\nconst Login = lazy(() => import('../views/pages/authentication/Login'))\nconst NotAuthorized = lazy(() => import('../views/pages/misc/NotAuthorized'))\n\nconst Router = ({ allRoutes }) => {\n  const getHomeRoute = () => {\n    const user = getUserData()\n    \n    if (user) {\n      const path = getHomeRouteForLoggedInUser(user.role)\n      return path\n    } else {\n      return '/login'\n    }\n  }\n\n  const routes = useRoutes([\n    {\n      path: '/',\n      index: true,\n      element: <Navigate replace to={getHomeRoute()} />\n    },\n    {\n      path: '/login',\n      element: <BlankLayout />,\n      children: [{ path: '/login', element: <Login /> }]\n    },\n    {\n      path: '/auth/not-auth',\n      element: <BlankLayout />,\n      children: [{ path: '/auth/not-auth', element: <NotAuthorized /> }]\n    },\n    {\n      path: '*',\n      element: <BlankLayout />,\n      children: [{ path: '*', element: <Error /> }]\n    },\n    ...allRoutes\n  ])\n\n  return routes\n}\n\nexport default Router\n","import React, { useState, useEffect, Suspense, Fragment } from 'react'\n// ** Router Import\nimport Router from './router/Router'\n\n// ** Routes & Default Routes\nimport { getRoutes } from './router/routes'\n\n// ** Hooks Imports\nimport { useLayout } from '@hooks/useLayout'\nimport { Alert, Button, Col } from 'reactstrap'\nimport { AlertCircle, X } from 'react-feather'\nimport { Link } from 'react-router-dom'\nimport { paymentStaus, geoLocation } from '@src/views/pages/account-settings/store/index.js'\nimport { activeOrganization } from '@src/helper/sassHelper'\nimport moment from 'moment'\nimport { useDispatch, useSelector } from 'react-redux'\nconst activeOrg = activeOrganization()\n\nconst App = () => {\n  const orgId = process.env.REACT_APP_DEMO_ORGANIZATION\n  const [allRoutes, setAllRoutes] = useState([])\n  const [refeshApp, setefreshApp] = useState()\n  const [updateExists, setUpdateExists] = useState(false)\n  const paystore = useSelector(state => state.organization)\n\n  const dispatch = useDispatch()\n  // ** Hooks\n  const { layout } = useLayout()\n  const today = moment().startOf('D').valueOf()\n  useEffect(() => {\n    setAllRoutes(getRoutes(layout))\n  }, [layout])\n\n  const refreshApp = () => {\n    setUpdateExists(false)\n    if (!refeshApp) {\n      return\n    }\n    refeshApp.postMessage({ type: \"SKIP_WAITING\" })\n  }\n\n  const showRefreshUI = (e) => {\n    if (e.detail) {\n      setefreshApp(e.detail)\n      setUpdateExists(true)\n      console.log(\"Showing refresh button.\")\n    } else {\n      console.warn(\"No worker data found!\")\n    }\n  }\n\n  const [paymentFlag, setPaymentFlag] = useState(false)\n  useEffect(() => {\n    document.addEventListener(\"swUpdated\", showRefreshUI, { once: true })\n    if (navigator.serviceWorker) {\n      navigator.serviceWorker.addEventListener(\n        //triggered by registration.claim\n        \"controllerchange\",\n        () => {\n          if (updateExists) return\n          setUpdateExists(true)\n          console.log(\"controllerchange triggered, -> auto refresh!!\")\n          window.location.reload()\n        }\n      )\n    }\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        const { latitude, longitude } = position.coords\n\n        dispatch(geoLocation({ latitude, longitude }))\n      },\n      (error) => {\n        // display an error if we cant get the users position\n        console.error('Error getting user location:', error)\n      }\n    )\n    if (today > activeOrg?.nextpaymentdate) {\n      if (localStorage.getItem('paymentFlag')) {\n        setPaymentFlag(JSON.parse(localStorage.getItem('paymentFlag')))\n        dispatch(paymentStaus(JSON.parse(localStorage.getItem('paymentFlag'))))\n      } else {\n        setPaymentFlag(true)\n        dispatch(paymentStaus(true))\n      }\n    }\n\n    if (!(\"Notification\" in window)) {\n      console.log(\"Browser does not support desktop notification\")\n    } else {\n      Notification.requestPermission()\n    }\n  }, [])\n\n  useEffect(() => {\n    if (!paystore.paymentStausFlag) {\n      localStorage.removeItem('paymentFlag')\n    } else {\n      localStorage.setItem('paymentFlag', true)\n    }\n    setPaymentFlag(paystore.paymentStausFlag)\n\n  }, [paystore.paymentStausFlag])\n\n  return (\n    <div>      \n      {updateExists &&\n        <div className='app-refresh-box'>\n          <Alert color='bg-waring' isOpen={updateExists} className='bg-success'>\n            <div className='alert-body'>\n              <AlertCircle size={15} />{' '}\n              New version Available, Click Refresh {'  '}\n              <Button size='sm' color='primary' onClick={() => { refreshApp() }}>Refresh</Button>\n            </div>\n          </Alert>\n        </div>\n      }\n      <Suspense fallback={null}>\n        {(activeOrg && orgId !== activeOrg.id) &&\n          <Fragment>\n            {(paymentFlag && (activeOrg?.rolename === 'Admin' || activeOrg?.rolename === 'Manager')) &&\n              <Col lg={12} className='billing-notification-bar'>\n                <Col lg={12} sm={12} className='text-center font-small-3'>\n                  <Alert color='warning' className='p-50 mb-0 d-flex justify-content-center'>\n                    <p></p>\n                    <p>\n                      Your {moment().format('MMMM')} month Bill has been generated for Current Month. Click here to\n                      <Link to={`/settings/billing`} className='ms-50 text-decoration-underline'>Pay Now</Link>\n                    </p>\n                  </Alert>\n                </Col>\n              </Col>\n            }\n          </Fragment>\n        }\n        <Router allRoutes={allRoutes} />\n      </Suspense>\n    </div >\n  )\n}\n\nexport default App\n"],"sourceRoot":""}