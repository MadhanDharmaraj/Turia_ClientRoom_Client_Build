{"version":3,"sources":["views/apps/reimbursement/add/AddCard.js","views/apps/reimbursement/add/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["activeOrgId","activeOrganizationid","activeOrg","activeOrganization","userId","orgUserId","AddCard","useState","block","setBlock","Loader","colourStyles","multiValue","styles","backgroundColor","clientOptions","setClientOptions","serviceOptions","setServiceOptions","stateOptions","setStateOptions","accountOptions","setAccountOptions","finalTotal","setFinalTotal","finalSubTotal","setFinalSubTotal","invoiceItems","setReimbursementItems","selectedClient","setSelectedClient","accDetails","setAccDetails","userOptions","setuserOptions","selEmployees","setSelEmployees","navigate","useNavigate","dispatch","useDispatch","store","useSelector","state","reimbursementInvoice","schema","yup","shape","createdBy","default","contactId","required","uniqueIdentity","contactEmail","contactName","invoiceDate","dueDate","paymentDue","subTotalAmount","totalAmount","totalTaxAmount","organizationId","dueAmount","accountDetails","bankAccountId","organizationDetails","clientdDetails","note","status","paymentStatus","rows","of","serviceId","invoiceId","price","description","actualPrice","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","setValue","useFieldArray","name","fields","append","remove","getOrganizationUsers","axios","post","then","response","arr","data","organizationusers","catch","err","console","log","getClientData","id","getClient","res","payload","useEffect","clients","reimbursements","transactionaccounts","acc","find","obj","isPrimary","accountBusinessName","states","organizationprefernces","invoicenote","replace","org","addressLine1","addressline1","addressLine2","addressline2","city","organizationcity","statename","zipCode","pinzipcode","imageUrl","organizationimageid","stateCode","stateshortname","onSubmit","moment","valueOf","temp","addInvoice","ReimbursementItems","forEach","key","addInvoiceItems","length","users","addInvoiceParticipant","addItem","taxPrice","ItemFinalTotalAmount","items","_formValues","finalsubTotalAmount","parseFloat","loadItemData","ind","service_price","desFlg","itemFlg","eachObj","undefined","selectedService","a","toFixed","Object","keys","client","billingaddresscity","billingaddressline1","billingaddressline2","billingaddressstatesname","billingaddresszip","email","placeOfSupplyId","placeofsupplyid","placeOfSupply","placeofsupplyname","currency","currencyId","currencyid","currencySymbol","currenciessymbol","currencyShortName","currenciescode","currencyName","currenciesname","handleUserChange","e","tempArr","Array","isArray","map","x","blocking","loader","className","xl","md","sm","ErrorText","push","message","renderError","imageid","color","content","charAt","referrerPolicy","height","width","src","alt","size","type","value","placeholder","disabled","render","field","onChange","date","dateStr","options","altInput","ref","inputRef","classnames","classNamePrefix","c","val","getOptionLabel","option","getOptionValue","bankName","accountHolderName","branchAddress","ifscCode","accountType","isgstregistered","gstin","item","index","rules","invalid","onInput","lg","onClick","order","xs","for","outline","tag","Link","to","bankAccountfn","reviewer","isMulti","InvoiceAdd","UILoader","props","children","overlayColor","Tag","style","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/68.f1298712.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus, Hash } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n// ** Reactstrap Imports\nimport { Row, Col, Card, Input, Label, Button, CardBody, CardText, InputGroup, InputGroupText, FormFeedback } from 'reactstrap'\nimport classnames from 'classnames'\n\nimport { addInvoice, addInvoiceItems, getClient, addInvoiceParticipant } from '../store/index'\nimport Avatar from '@components/avatar'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { activeOrganizationid, activeOrganization, orgUserId } from '@src/helper/sassHelper'\nimport { Link, useNavigate } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport moment from 'moment'\n\nconst activeOrgId = activeOrganizationid()\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\n\nconst AddCard = () => {\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const colourStyles = {\n    multiValue: (styles, { }) => {\n\n      return {\n        ...styles,\n        backgroundColor: '#7367f0'\n      }\n    }\n  }\n\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [accountOptions, setAccountOptions] = useState([])\n  const [finalTotal, setFinalTotal] = useState(0.00)\n  const [finalSubTotal, setFinalSubTotal] = useState(0.00)\n\n  const [invoiceItems, setReimbursementItems] = useState([])\n  const [selectedClient, setSelectedClient] = useState({})\n  const [accDetails, setAccDetails] = useState([])\n  const [userOptions, setuserOptions] = useState([])\n  const [selEmployees, setSelEmployees] = useState([])\n\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n  const accountTypeArr = ['', 'Saving', 'Current']\n  const store = useSelector(state => state.reimbursementInvoice)\n\n  const schema = yup.object().shape({\n    createdBy: yup.string().default(userId),\n    contactId: yup.string().required(\"Please select a Client\"),\n    uniqueIdentity: yup.string(),\n    contactEmail: yup.string(),\n    contactName: yup.string(),\n    invoiceDate: yup.string(),\n    dueDate: yup.string(),\n    paymentDue: yup.string(),\n    subTotalAmount: yup.string(),\n    totalAmount: yup.string(),\n    totalTaxAmount: yup.string(),\n    organizationId: yup.string().default(activeOrgId),\n    dueAmount: yup.string(),\n    accountDetails: yup.object(),\n    bankAccountId: yup.string().required('Please select Bank Account'),\n    organizationDetails: yup.object(),\n    clientdDetails: yup.object(),\n    note: yup.string().default(''),\n    status: yup.number().default(11),\n    paymentStatus: yup.number().default(5),\n    rows: yup.array().of(\n      yup.object().shape({\n        serviceId: yup.string().required(\"Please Select Service Item\"),\n        invoiceId: yup.string(),\n        price: yup.string(),\n        description: yup.string().default(''),\n        organizationId: yup.string().default(activeOrgId),\n        actualPrice: yup.string().required(),\n        subTotalAmount: yup.string().required(1)\n      })\n    )\n  })\n\n  const { handleSubmit, formState: { errors }, control, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, append, remove } = useFieldArray({ control, name: 'rows' })\n\n\n  const getClients = () => {\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getServices = () => {\n    axios.post('/reimbursement/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setServiceOptions(arr.reimbursements)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getBankAccounts = () => {\n    axios.post('/transactionaccounts/dropdown').then(response => {\n      const arr = response.data\n      setAccountOptions(arr.transactionaccounts)\n      let acc = arr.transactionaccounts.find((obj) => obj.isPrimary)\n      if (!acc) {\n        acc = arr.transactionaccounts.find((obj) => obj.accountBusinessName === 'Cash')\n      }\n      setAccDetails(acc)\n      setValue('accountDetails', acc)\n      setValue('bankAccountId', acc?.id)\n    })\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown').then(response => {\n      const arr = response.data.organizationusers\n      setuserOptions(arr)\n    }).catch((err) => {\n      console.log(err)\n    })\n  }\n\n  const getClientData = async (id) => {\n    const res = await dispatch(getClient(id))\n    setSelectedClient(res.payload)\n  }\n\n  const getDefaultNote = () => {\n    axios.post('/organizationprefernces/getinvoiceprops').then(response => {\n      setValue('note', response.data.organizationprefernces.invoicenote.replace(/(\\\\n)/g, \"\\n\"))\n    })\n  }\n\n  useEffect(() => {\n    // ** Get Clients\n    getClients()\n    getServices()\n    getBankAccounts()\n    getStates()\n    getDefaultNote()\n    getOrganizationUsers()\n\n    const org = {\n      addressLine1: activeOrg.addressline1,\n      addressLine2: activeOrg.addressline2,\n      city: activeOrg.organizationcity,\n      state: activeOrg.statename,\n      zipCode: activeOrg.pinzipcode,\n      name: activeOrg.name,\n      imageUrl: activeOrg.organizationimageid || '',\n      stateCode: activeOrg.stateshortname\n    }\n\n    setValue('organizationDetails', org)\n\n\n  }, [])\n\n  const onSubmit = async data => {\n    setBlock(true)\n    data.invoiceDate = moment(data.invoiceDate).valueOf()\n    data.paymentDue = moment(data.paymentDue).valueOf()\n\n    const temp = data.rows\n    setReimbursementItems(temp)\n    delete data.rows\n    await dispatch(addInvoice(data))\n  }\n\n  const ReimbursementItems = async (id) => {\n    invoiceItems.forEach((obj, key) => {\n      invoiceItems[key].invoiceId = id\n    })\n    await dispatch(addInvoiceItems(invoiceItems))\n\n\n    if (selEmployees.length > 0) {\n      const obj = { users: selEmployees, organizationId: activeOrgId, invoiceId: id }\n      await dispatch(addInvoiceParticipant(obj))\n    }\n\n    navigate(`/reimbursement/view/${store.invoiceId}`)\n  }\n\n  const addItem = (() => {\n    append({ invoiceId: 0, organizationId: activeOrgId, serviceId: '', actualPrice: 0, subTotalAmount: 0, taxPrice: 0, description: '' })\n  })\n\n  useEffect(() => {\n    addItem()\n  }, [])\n\n  useEffect(async () => {\n    if (store.invoiceId !== null && invoiceItems.length > 0) {\n      await ReimbursementItems(store.invoiceId)\n    }\n  }, [store.invoiceId])\n\n  const ItemFinalTotalAmount = () => {\n\n    const items = control._formValues.rows\n    let finalTotal = 0\n    let finalsubTotalAmount = 0\n\n    items.forEach(obj => {\n      finalTotal = parseFloat(obj.subTotalAmount) + parseFloat(finalTotal)\n      finalsubTotalAmount = parseFloat(obj.price) + parseFloat(finalsubTotalAmount)\n    })\n\n    control._formValues.subTotalAmount = finalsubTotalAmount\n    control._formValues.totalAmount = finalTotal\n    control._formValues.dueAmount = finalTotal\n\n    setFinalTotal(finalTotal)\n    setFinalSubTotal(finalsubTotalAmount)\n\n  }\n\n  const removeItem = ((ind) => {\n    remove(ind)\n    ItemFinalTotalAmount()\n  })\n\n  const loadItemData = (ind, desFlg = false, itemFlg = false) => {\n    const eachObj = control._formValues.rows[ind]\n    if (eachObj.serviceId === undefined || eachObj.serviceId === '') {\n      return false\n    }\n    let service_price\n    const selectedService = serviceOptions.find((a) => a.id === eachObj.serviceId)\n    setValue(`rows[${ind}].serviceId`, eachObj.serviceId)\n    if (itemFlg) {\n      service_price = eachObj.price || 0\n      setValue(`rows[${ind}].price`, service_price)\n      setValue(`rows[${ind}].description`, selectedService.description)\n    } else {\n      service_price = eachObj.price\n      setValue(`rows[${ind}].price`, service_price)\n      setValue(`rows[${ind}].description`, desFlg ? eachObj.description : selectedService.description)\n    }\n\n    setValue(`rows[${ind}].subTotalAmount`, parseFloat(service_price || 0.00).toFixed(2))\n    setValue(`rows[${ind}].createdBy`, userId)\n\n    ItemFinalTotalAmount()\n\n  }\n\n  const bankAccountfn = (id) => {\n    const acc = accountOptions.find((obj) => obj.id === id)\n    setAccDetails(acc)\n    setValue('accountDetails', acc)\n    setValue('bankAccountId', acc?.id)\n  }\n\n  useEffect(() => {\n    if (Object.keys(selectedClient).length > 0) {\n\n      const client = {\n        city: selectedClient.billingaddresscity || '',\n        addressLine1: selectedClient.billingaddressline1 || '',\n        addressLine2: selectedClient.billingaddressline2 || '',\n        state: selectedClient.billingaddressstatesname || '',\n        zipCode: selectedClient.billingaddresszip || '',\n        contactEmail: selectedClient.email,\n        contactName: selectedClient.name,\n        placeOfSupplyId: selectedClient.placeofsupplyid,\n        placeOfSupply: selectedClient.placeofsupplyname ?? ''\n      }\n      setValue('placeOfSupplyId', selectedClient.placeofsupplyid)\n      setValue('clientDetails', client)\n      const currency = {\n        currencyId: selectedClient.currencyid || activeOrg.currencyid,\n        currencySymbol: selectedClient.currenciessymbol || '',\n        currencyShortName: selectedClient.currenciescode || '',\n        currencyName: selectedClient.currenciesname || ''\n      }\n      setValue('currencyDetails', currency)\n    }\n\n  }, [selectedClient])\n\n  const renderError = () => {\n    const keys = Object.keys(errors)\n    const ErrorText = []\n    if (Array.isArray(keys)) {\n      keys.forEach((key) => {\n        if (key !== 'rows') {\n          ErrorText.push(<FormFeedback key={key}>${errors[key]?.message}</FormFeedback>)\n        }\n      })\n    }\n    return ErrorText\n  }\n\n  const handleUserChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    setSelEmployees(tempArr)\n\n  }\n\n  return (\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Row className='invoice-add'>\n          <Fragment>\n            <Col xl={10} md={8} sm={12}>\n\n              <Card className='invoice-preview-card'>\n\n                {/* Header */}\n                <CardBody className='invoice-padding pb-0'>\n                  {\n                    renderError()\n                  }\n                  <div className='d-flex justify-content-between flex-md-row flex-column invoice-spacing mt-0'>\n                    <div>\n                      <div className='logo-wrapper'>\n                        {activeOrg.imageid === null ? <Avatar color={'primary'} className='me-50' content={activeOrg.name !== null ? activeOrg.name?.charAt(0) : ''} /> : <img referrerPolicy=\"no-referrer\" className='rounded me-50' height={75} width={75} src={`https://drive.google.com/thumbnail?id=${activeOrg.imageid}&authuser=0`} alt=\"Organisation Logo\" />}\n                      </div>\n                      <h3 className='text-primary invoice-logo'>{activeOrg.name}</h3>\n                      <p className='card-text mb-25'>{activeOrg.addressline1}</p>\n                      <p className='card-text mb-25'>{activeOrg.addressline2}</p>\n                      <p className='card-text mb-0'>{activeOrg.organizationcity} - {activeOrg.pinzipcode}</p>\n                      <p className='card-text mb-0'>{activeOrg.statename}</p>\n                    </div>\n                    <div className='invoice-number-date mt-md-0 mt-2'>\n                      <div className='d-flex align-items-center justify-content-md-end mb-1'>\n                        <h4 className='invoice-title'>Challan</h4>\n                        <InputGroup className='input-group-merge invoice-edit-input-group disabled'>\n                          <InputGroupText>\n                            <Hash size={15} />\n                          </InputGroupText>\n                          <Input\n                            type='number'\n                            className='invoice-edit-input'\n                            value={3171}\n                            placeholder='53634'\n                            disabled\n                          />\n                        </InputGroup>\n                      </div>\n                      <div className='d-flex align-items-center mb-1'>\n                        <span className='title required'>Challan Date</span>\n                        <Controller\n                          control={control}\n                          name={`invoiceDate`}\n                          id='invoiceDate'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true }}\n                              className='form-control invoice-edit-input date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                      <div className='d-flex align-items-center'>\n                        <span className='title required'>Due Date</span>\n                        <Controller\n                          control={control}\n                          name={`paymentDue`}\n                          id='paymentDue'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true }}\n                              className='form-control invoice-edit-input due-date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </CardBody>\n                {/* /Header */}\n\n                <hr className='invoice-spacing' />\n\n                {/* Address and Contact */}\n                <CardBody className='invoice-padding pt-0'>\n                  <Row className='row-bill-to invoice-spacing'>\n                    <Col className='col-bill-to ps-0' xl='6'>\n                      <h6 className='invoice-to-title required'>Reimbursement To</h6>\n                      <div className='invoice-customer'>\n                        <Controller\n                          control={control}\n                          name={`contactId`}\n                          id={`contactId`}\n                          render={({ field, ref }) => (\n                            <Select\n                              inputRef={ref}\n                              className={classnames('react-select', { 'is-invalid': errors['contactId'] })}\n                              {...field}\n                              classNamePrefix='select'\n                              options={clientOptions}\n                              value={clientOptions.find(c => { return c.id === field.value })}\n                              onChange={val => { field.onChange(val.id); getClientData(val.id) }}\n                              getOptionLabel={(option) => option.name}\n                              getOptionValue={(option) => option.id}\n                            />\n                          )}\n                        />\n                      </div>\n                      <Col className='pe-0 mt-xl-2' xl='4'>\n                        <table>\n                          <tbody>\n                            <tr>\n                              <td>{selectedClient.billingaddressline1}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddressline2}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddresscity} {selectedClient.billingaddresszip && `-`}  {selectedClient.billingaddresszip}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddressstatesname}</td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </Col>\n                    </Col>\n                    <Col className='col-bill-to ps-0' xl='2'></Col>\n                    <Col className='pe-0 mt-xl-0 mt-2' xl='4'>\n                      <h6 className='mb-2'>Payment Details:</h6>\n                      <table>\n                        <tbody>\n                          <tr>\n                            <td className='pe-1'>Bank Name:</td>\n                            <td>\n                              {accDetails.bankName && <span className='fw-bolder'>{accDetails.bankName}</span>}\n                            </td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Account name:</td>\n                            <td>{accDetails.accountHolderName && <span className='fw-bolder'>{accDetails.accountHolderName}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Branch Name:</td>\n                            <td> {accDetails.branchAddress && <span className='fw-bolder'>{accDetails.branchAddress}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>IFSC Code:</td>\n                            <td>{accDetails.ifscCode && <span className='fw-bolder'>{accDetails.ifscCode} </span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Account Type:</td>\n                            <td>{accDetails.accountType && <span className='fw-bolder'>{accountTypeArr[accDetails.accountType]} </span>}</td>\n                          </tr>\n                          {selectedClient.currenciescode &&\n                            <tr>\n                              <td className='pe-1'>Currency code:</td>\n                              <td>{selectedClient.currenciescode}</td>\n                            </tr>\n                          }\n                        </tbody>\n                      </table>\n                    </Col>\n                  </Row>\n                  {activeOrg?.isgstregistered &&\n                    <Row className='row-bill-to invoice-spacing'>\n                      <Col className='col-bill-to ps-0' xl='6'>\n                        <h6 className='invoice-to-title mt-2 required'>Place Of Supply</h6>\n                        <div className='invoice-customer'>\n                          <Controller\n                            control={control}\n                            name={`placeOfSupplyId`}\n                            id={`placeOfSupplyId`}\n                            render={({ field, ref }) => (\n                              <Select\n                                inputRef={ref}\n                                className={classnames('react-select', { 'is-invalid': errors['placeOfSupplyId'] })}\n                                {...field}\n                                classNamePrefix='select'\n                                options={stateOptions}\n                                value={stateOptions.find(c => { return c.id === field.value })}\n                                onChange={val => { field.onChange(val.id) }}\n                                getOptionLabel={(option) => option.name}\n                                getOptionValue={(option) => option.id}\n                              />\n                            )}\n                          />\n                        </div>\n                        {(selectedClient.gstin !== '' && selectedClient.gstin !== undefined) && <div className='mt-1'> GSTIN : {selectedClient.gstin}</div>}\n                      </Col>\n                      <Col className='col-bill-to ps-0' xl='2'></Col>\n                    </Row>\n                  }\n                </CardBody>\n                {/* /Address and Contact */}\n\n                {/* Product Details */}\n                <CardBody className='invoice-padding invoice-product-details'>\n                  {fields.map((item, index) => {\n                    return (\n                      <div key={item.id} className='repeater-wrapper'>\n                        <Row>\n                          <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                            <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                              <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-4 col-sm-12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Item</CardText>\n                                <Controller\n                                  control={control}\n                                  name={`rows[${index}].serviceId`}\n                                  rules={{ required: true }}\n                                  render={({ field, ref }) => (\n                                    <Select\n                                      {...field}\n                                      inputRef={ref}\n                                      className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.serviceId })}\n                                      classNamePrefix='select'\n                                      options={serviceOptions}\n                                      value={serviceOptions.find(c => c.id === field.value)}\n                                      onChange={val => { field.onChange(val.id); loadItemData(index, false, true) }}\n                                      getOptionLabel={(option) => option.name}\n                                      getOptionValue={(option) => option.id}\n                                    />\n                                  )}\n                                />\n                                {errors.rows?.[index]?.serviceId && <FormFeedback>{errors.rows?.[index]?.serviceId.message}</FormFeedback>}\n                                <Controller\n                                  id={`rows_${index}_description`}\n                                  name={`rows[${index}].description`}\n                                  control={control}\n                                  render={({ field }) => <Input className='mt-1' invalid={errors.rows?.[index]?.description && true} onInput={(val) => { field.onChange(val); loadItemData(index, true, false) }} {...field} />}\n                                />\n                              </Col>\n\n                              <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                                <CardText className='col-title mb-md-2 mb-0'>Price</CardText>\n                                <Controller\n                                  id={`rows_${index}_price`}\n                                  name={`rows[${index}].price`}\n                                  control={control}\n                                  render={({ field }) => <Input type='number' id={`input_rows_${index}_price`} onInput={(val) => { field.onChange(val); loadItemData(index, false, true) }} {...field} invalid={errors.rows?.[index]?.price && true} />}\n                                />\n                                {errors.rows?.[index]?.price && <FormFeedback>{errors.rows?.[index]?.price.message}</FormFeedback>}\n                              </Col>\n\n                              <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Amount</CardText>\n                                {control._formValues.rows[index].subTotalAmount}\n                              </Col>\n                            </Row>\n                            <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                              <X size={18} className='cursor-pointer' onClick={() => { removeItem(index) }} />\n                            </div>\n                          </Col>\n                        </Row>\n                      </div>\n                    )\n                  })}\n                  <Row className='mt-1'>\n                    <Col sm='12' className='px-0'>\n                      <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                        <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                      </Button>\n                    </Col>\n                  </Row>\n                </CardBody>\n\n                {/* /Product Details */}\n\n                {/* Reimbursement Total */}\n                <CardBody className='invoice-padding'>\n                  <Row className='invoice-sales-total-wrapper'>\n                    <Col className='mt-md-0 mt-3' md={{ size: '6', order: 1 }} xs={{ size: 12, order: 2 }}>\n\n                    </Col>\n                    <Col className='d-flex justify-content-end' md={{ size: '6', order: 2 }} xs={{ size: 12, order: 1 }}>\n                      <div className='invoice-total-wrapper'>\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>\n                            {activeOrg?.isgstregistered && 'Pre Tax'}  Amount:</p>\n                          <p className='invoice-total-amount'>{finalSubTotal}</p>\n                        </div>\n                        <hr className='my-50' />\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>Total Payable:</p>\n                          <p className='invoice-total-amount'>{finalTotal}</p>\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Reimbursement Total */}\n\n                <hr className='invoice-spacing mt-0' />\n\n                {/* Reimbursement Note */}\n                <CardBody className='invoice-padding py-0'>\n                  <Row>\n                    <Col>\n                      <div className='mb-2'>\n                        <Label for='note' className='form-label fw-bold'>\n                          Note:\n                        </Label>\n                        <Controller\n                          id='note'\n                          name='note'\n                          control={control}\n                          render={({ field }) => <Input type=\"textarea\" value={field.value} invalid={errors.note && true} {...field} />}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Reimbursement Note */}\n              </Card>\n\n            </Col>\n            <Col xl={2} md={4} sm={12}>\n              <Card className='invoice-action-wrapper'>\n                <CardBody>\n                  <Button color='primary' type='submit' block outline className='mb-75'>\n                    Save\n                  </Button>\n                  <Button color='warning' block outline tag={Link} to='/reimbursement/list'>\n                    Cancel\n                  </Button>\n                </CardBody>\n              </Card>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50 required'>Accept payments via</p>\n                  <Controller\n                    control={control}\n                    name={`bankAccountId`}\n                    rules={{ required: true }}\n                    render={({ field, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select mt-1', { 'is-invalid': errors.bankAccountId })}\n                        classNamePrefix='select'\n                        options={accountOptions}\n                        value={accountOptions.find(c => c.id === field.value)}\n                        onChange={(val) => { field.onChange(val.id); bankAccountfn(val.id) }}\n                        getOptionLabel={(option) => option.accountHolderName}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n                  />\n                </div>\n              </div>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50'>Select Employee</p>\n\n                  <Controller\n                    control={control}\n                    name=\"reviewer\"\n                    id=\"reviewer\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.reviewer })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={userOptions}\n                        isMulti={true}\n                        value={value} // set selected values\n                        onChange={handleUserChange}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                        styles={colourStyles}\n                      />\n                    )}\n\n                  />\n                </div>\n              </div>\n            </Col>\n          </Fragment >\n        </Row>\n      </form >\n    </UILoader>\n\n  )\n}\n\nexport default AddCard\n","// ** Reimbursement Add Components\nimport AddCard from './AddCard'\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\n\nconst InvoiceAdd = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <AddCard /> \n    </div>\n  )\n}\n\nexport default InvoiceAdd\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}