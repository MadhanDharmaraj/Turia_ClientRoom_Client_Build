{"version":3,"sources":["views/reports/timesheet/columns.js","views/reports/timesheet/index.js"],"names":["renderClient","row","initials","className","color","content","username","charAt","hoursFormat","decimalTimeString","totalhours","decimalTime","parseFloat","hours","Math","floor","minutes","timeFormat","value","length","moment","format","unix","columns","name","sortable","maxWidth","cell","minWidth","clientname","selector","taskname","createdon","servicename","starttime","priority","endtime","CustomHeader","handlePerPage","rowsPerPage","handleFilter","searchTerm","exportList","xl","md","sm","htmlFor","type","id","onChange","style","width","e","target","caret","outline","onClick","TaskList","useParams","useState","sort","setSort","setSearchTerm","data","setData","startOf","valueOf","startDate","setStartDate","endOf","endDate","setEndDate","sortColumn","setSortColumn","setRowsPerPage","currentUser","setCurrentUser","userOptions","setuserOptions","getOrganizationUsers","axios","post","then","response","arr","organizationusers","unshift","find","obj","catch","err","console","log","getData","params","res","tasktimesheets","useEffect","q","perPage","userId","parseInt","currentTarget","export","map","result","XLSX","json_to_sheet","origin","skipHeader","ws","Heading","sheet_add_aoa","wb","Sheets","SheetNames","excelBuffer","bookType","Blob","FileSaver","val","handleSort","column","sortDirection","sortField","placeholder","isClearable","options","classNamePrefix","theme","selectThemeColors","getOptionLabel","option","getOptionValue","date","stdate","Date","enddate","setDateVal","altInput","altFormat","dateFormat","noHeader","subHeader","sortServer","responsive","onSort","sortIcon","filters","isFiltered","Object","keys","some","k","dataToRender","subHeaderComponent"],"mappings":"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","file":"static/js/143.c2af0d0f.chunk.js","sourcesContent":["// ** Custom Components\nimport Avatar from '@components/avatar'\nimport moment from 'moment'\n\n// ** Renders Client Columns\nconst renderClient = row => {\n\n  return (\n    <Avatar\n      initials\n      className='me-1'\n      color={'light-primary'}\n      content={row.username ? row.username?.charAt(0) : 'T'}\n    />\n  )\n}\n\nconst hoursFormat = (row) => {\n\n  const decimalTimeString = row.totalhours\n  let decimalTime = parseFloat(decimalTimeString)\n  decimalTime = decimalTime * 60 * 60\n  let hours = Math.floor((decimalTime / (60 * 60)))\n  decimalTime = decimalTime - (hours * 60 * 60)\n  let minutes = Math.floor((decimalTime / 60))\n\n  if (hours < 10) {\n    hours = `0${hours}`\n  }\n  if (minutes < 10) {\n    minutes = `0${minutes}`\n  }\n\n  return (`${hours}Hrs : ${minutes}Mins`)\n\n}\n\nconst dateFormat = (value) => {\n  if (!value) {\n    return '-'\n  }\n  if (value.length === 13) {\n    return moment(value, 'x').format(\"MMM DD, YYYY\")\n  } else {\n    return moment.unix(value).format(\"MMM DD, YYYY\")\n  }\n}\n\nconst timeFormat = (value) => {\n  if (!value) {\n    return '-'\n  }\n  if (value.length === 13) {\n    return moment(value, 'x').format(\"hh:mm A\")\n  } else {\n    return moment.unix(value).format(\"hh:mm A\")\n  }\n}\n\n\nexport const columns = [\n  {\n    name: 'Name',\n    sortable: false,\n    maxWidth: '300px',\n    cell: row => (\n      <div className='d-flex justify-content-left align-items-center'>\n        {renderClient(row)}\n        <div className='user-info text-truncate'>\n          <span className='d-block fw-bold text-truncate'>{row.username}</span>\n        </div>\n      </div>\n    )\n  },\n  {\n    name: 'Client',\n    sortable: false,\n    minWidth: '200px',\n    cell: row => (<span>{row.clientname ? row.clientname : 'N/A'}</span>\n    )\n  },\n  {\n    name: 'Service',\n    sortable: false,\n    maxWidth: '2508px',\n    selector: row => row.taskname\n  },\n  {\n    name: 'Date',\n    sortable: false,\n    minWidth: '132px',\n    selector: row => row.clientname,\n    cell: row => <span className='text-capitalize'>{dateFormat(row.createdon)}</span>\n  },\n  {\n    name: 'Start Time',\n    minWidth: '132px',\n    sortable: false,\n    selector: row => row.servicename,\n    cell: row => <span className='text-capitalize'>{timeFormat(row.starttime)}</span>\n  },\n  {\n    name: 'End Time',\n    minWidth: '132x',\n    sortable: false,\n    selector: row => row.priority,\n    cell: row => <span className='text-capitalize'>{timeFormat(row.endtime)}</span>\n  },\n  {\n    name: 'Total Hours',\n    minWidth: '138px',\n    sortable: false,\n    cell: row => (\n      <span>{hoursFormat(row)}</span>\n    )\n  }\n]\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n// ** Table Columns\nimport * as FileSaver from \"file-saver\"\nimport * as XLSX from \"xlsx\"\nimport { columns } from './columns'\nimport Flatpickr from 'react-flatpickr'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport axios from '@src/configs/axios/axiosConfig'\n// ** Third Party Components\nimport Select from 'react-select'\nimport DataTable from 'react-data-table-component'\nimport { ChevronDown, Download, MoreVertical } from 'react-feather'\n\n// ** Utils\nimport { selectThemeColors } from '@utils'\n\n// ** Reactstrap Imports\nimport {\n    Row,\n    Col,\n    Card,\n    Input,\n    Label,\n    CardBody,\n    UncontrolledDropdown,\n    DropdownToggle,\n    DropdownMenu,\n    DropdownItem,\n    Button\n} from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\nimport moment from 'moment'\nimport { useParams } from 'react-router-dom'\n\n\n// ** Table Header\nconst CustomHeader = ({ handlePerPage, rowsPerPage, handleFilter, searchTerm, exportList }) => {\n    // ** Converts table to CSV\n    return (\n        <div className='invoice-list-table-header w-100 me-1 ms-50 mt-2 mb-75'>\n            <Row>\n                <Col xl='6' md='6' sm='6' className='d-flex align-items-center p-0'>\n                    <div className='d-flex align-items-center w-100'>\n                        <label htmlFor='rows-per-page'>Show</label>\n                        <Input\n                            className='mx-50'\n                            type='select'\n                            id='rows-per-page'\n                            value={rowsPerPage}\n                            onChange={handlePerPage}\n                            style={{ width: '5rem' }}\n                        >\n                            <option value='10'>10</option>\n                            <option value='25'>25</option>\n                            <option value='50'>50</option>\n                        </Input>\n                        <label htmlFor='rows-per-page'>Entries</label>\n                    </div>\n                </Col>\n                <Col\n                    xl='6'\n                    className='d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1'\n                >\n                    <div className='d-flex align-items-center mb-sm-0 mb-1 me-1'>\n                        <label className='mb-0' htmlFor='search-invoice'>\n                            Search:\n                        </label>\n                        <Input\n                            id='search-invoice'\n                            className='ms-50 w-100'\n                            type='text'\n                            value={searchTerm}\n                            onChange={e => handleFilter(e.target.value)}\n                        />\n                    </div>\n\n                    <div className='d-flex align-items-center table-header-actions'>\n\n                        <UncontrolledDropdown className='ms-1'>\n                            <DropdownToggle color='secondary' caret outline>\n                                <MoreVertical className='font-small-4 me-50' />\n                            </DropdownToggle>\n                            <DropdownMenu>\n                                <DropdownItem onClick={() => { exportList() }} className='w-100'>\n                                    <Download className='font-small-4 me-50' />\n                                    <span className='align-middle'>Export</span>\n                                </DropdownItem>\n                            </DropdownMenu>\n                        </UncontrolledDropdown>\n\n                    </div>\n                </Col>\n            </Row>\n        </div>\n    )\n}\n\nconst TaskList = () => {\n\n    // ** States\n    const { id } = useParams()\n    const [sort, setSort] = useState('desc')\n    const [searchTerm, setSearchTerm] = useState('')\n    const [data, setData] = useState([])\n    const [startDate, setStartDate] = useState(moment().startOf('day').valueOf())\n    const [endDate, setEndDate] = useState(moment().endOf('day').valueOf())\n    const [sortColumn, setSortColumn] = useState('createdon')\n    const [rowsPerPage, setRowsPerPage] = useState(10)\n    const [currentUser, setCurrentUser] = useState({ id: '', name: 'Select Employee' })\n    const [userOptions, setuserOptions] = useState([])\n\n    const getOrganizationUsers = async () => {\n        axios.post('/organizationusers/dropdown').then(response => {\n            const arr = response.data.organizationusers\n            arr.unshift({ id: '', name: 'Select Employee' })\n            setuserOptions(arr)\n\n            setCurrentUser(arr.find((obj) => obj.id === id))\n        }).catch((err) => {\n            console.log(err)\n        })\n\n    }\n\n    const getData = (params) => {\n        axios.post('/tasktimesheets/logs', params)\n            .then((res) => {\n                setData(res.data.tasktimesheets)                \n            }).catch((err) => {\n                console.log(err)\n            })\n    }\n\n    const hoursFormat = (row) => {\n\n        const decimalTimeString = row.totalhours\n        let decimalTime = parseFloat(decimalTimeString)\n        decimalTime = decimalTime * 60 * 60\n        let hours = Math.floor((decimalTime / (60 * 60)))\n        decimalTime = decimalTime - (hours * 60 * 60)\n        let minutes = Math.floor((decimalTime / 60))\n\n        if (hours < 10) {\n            hours = `0${hours}`\n        }\n        if (minutes < 10) {\n            minutes = `0${minutes}`\n        }\n\n        return (`${hours}Hrs : ${minutes}Mins`)\n\n\n    }\n\n    const dateFormat = (value) => {\n        if (!value) {\n            return '-'\n        }\n        if (value.length === 13) {\n            return moment(value, 'x').format(\"MMM DD, YYYY\")\n        } else {\n            return moment.unix(value).format(\"MMM DD, YYYY\")\n        }\n    }\n\n    const timeFormat = (value) => {\n        if (!value) {\n            return '-'\n        }\n        if (value.length === 13) {\n            return moment(value, 'x').format(\"hh:mm A\")\n        } else {\n            return moment.unix(value).format(\"hh:mm A\")\n        }\n    }\n\n    const exportTask = (params) => {\n        axios.post('/tasktimesheets/logs', params)\n            .then(async (res) => {\n\n                const result = await res.data.tasktimesheets.tasktimesheets.map((obj) => {\n\n                    const data = {}\n                    data['username'] = obj.username\n                    data['date'] = dateFormat(obj.createdon)\n                    data['starttime'] = timeFormat(obj.starttime)\n                    data['endtime'] = timeFormat(obj.endtime)\n                    data['totalhours'] = hoursFormat(obj)\n\n                    return data\n                })\n\n                const ws = await XLSX.utils.json_to_sheet(result, { origin: 'A2', skipHeader: true })\n                const Heading = [['Name', 'Date', 'Start Time', 'End Time', 'Total Hours']]\n                XLSX.utils.sheet_add_aoa(ws, Heading)\n                const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] }\n                const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" })\n                const data = new Blob([excelBuffer], { type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\" })\n                FileSaver.saveAs(data, 'TimeSheet_Logs_Report.xlsx')\n            }).catch((err) => {\n                console.log(err)\n            })\n    }\n\n    useEffect(() => {\n        getOrganizationUsers()\n    }, [])\n\n    useEffect(async () => {\n        await\n            getData({\n                sort,\n                sortColumn,\n                q: searchTerm,                \n                perPage: rowsPerPage,\n                userId: currentUser.id,\n                startDate,\n                endDate\n            })\n\n    }, [data.length, sort, sortColumn])\n\n    // ** Function in get data on rows per page\n    const handlePerPage = async e => {\n        const value = parseInt(e.currentTarget.value)\n        await\n            getData({\n                sort,\n                sortColumn,\n                q: searchTerm,\n                perPage: value,\n                userId: currentUser.id,\n                startDate,\n                endDate\n            })\n\n        setRowsPerPage(value)\n    }\n\n    const exportList = async () => {\n\n        await exportTask({\n            sort,\n            sortColumn,\n            q: searchTerm,\n            userId: currentUser.id,\n            startDate,\n            endDate,\n            export: true\n        })\n\n    }\n\n    // ** Function in get data on search query change\n    const handleFilter = async val => {\n        setSearchTerm(val)\n        await getData({\n            sort,\n            q: val,\n            sortColumn,\n            perPage: rowsPerPage,\n            userId: currentUser.id,\n            startDate,\n            endDate\n        })\n\n    }\n\n    // ** Table data to render\n    const dataToRender = () => {\n        const filters = {\n            userId: currentUser.id,\n            q: searchTerm\n        }\n\n        const isFiltered = Object.keys(filters).some(function (k) {\n            return filters[k].length > 0\n        })\n\n        if (data.length > 0) {\n            return data\n        } else if (data.length === 0 && isFiltered) {\n            return []\n        }\n    }\n\n    const handleSort = async (column, sortDirection) => {\n        setSort(sortDirection)\n        setSortColumn(column.sortField)\n\n        await getData({\n            sort,\n            sortColumn,\n            q: searchTerm,\n            perPage: rowsPerPage,\n            userId: currentUser.id,\n            startDate,\n            endDate\n        })\n    }\n\n    const setDateVal = (val) => {\n\n        const stdate = moment(new Date(val[0])).startOf('d').valueOf()\n        const enddate = moment(new Date(val[0])).endOf('d').valueOf()\n        setStartDate(stdate)\n        setEndDate(enddate)\n        if (stdate !== '' && enddate !== '') {\n            getData({\n                sort,\n                sortColumn,\n                q: searchTerm,\n                perPage: rowsPerPage,\n                userId: currentUser.id,\n                startDate: stdate,\n                endDate: enddate\n            })\n        }\n    }\n\n    return (\n        <Fragment>\n            <Card>\n                <CardBody>\n                    <Row>\n                        <Col md='3'>\n                            <Select\n                                placeholder='Select Employee'\n                                isClearable={false}\n                                value={currentUser}\n                                options={userOptions}\n                                className='react-select'\n                                classNamePrefix='select'\n                                theme={selectThemeColors}\n                                getOptionLabel={(option) => option.name}\n                                getOptionValue={(option) => option.id}\n                                onChange={async data => {\n                                    setCurrentUser(data)\n                                    await getData({\n                                        sort,\n                                        sortColumn,\n                                        q: searchTerm,\n                                        perPage: rowsPerPage,\n                                        userId: data.id,\n                                        startDate,\n                                        endDate\n                                    })\n\n                                }}\n                            />\n                        </Col>\n\n                        <Col md={3}>\n                            <Flatpickr\n                                placeholder='Select Date'\n                                onChange={(date) => {\n                                    setDateVal(date)\n                                }}\n                                value={startDate}\n                                options={{ altInput: true, altFormat: \"M j, Y\", dateFormat: \"M j, Y\" }}\n                                className={'due-date-picker'} />\n                        </Col>\n                    </Row>\n                </CardBody>\n            </Card>\n\n            <Card className='overflow-hidden'>\n                <div className='react-dataTable'>\n                    <DataTable\n                        noHeader\n                        subHeader\n                        sortServer\n                        responsive\n                        columns={columns}\n                        onSort={handleSort}\n                        sortIcon={<ChevronDown />}\n                        className='react-dataTable'\n                        data={dataToRender()}\n                        subHeaderComponent={\n                            <CustomHeader\n                                searchTerm={searchTerm}\n                                rowsPerPage={rowsPerPage}\n                                handleFilter={handleFilter}\n                                handlePerPage={handlePerPage}\n                                exportList={exportList}\n                            />\n                        }\n                    />\n                </div>\n            </Card>\n\n\n        </Fragment>\n    )\n}\n\nexport default TaskList\n"],"sourceRoot":""}