{"version":3,"sources":["views/apps/invoice/edit/EditCard.js","views/apps/invoice/edit/EditCardINT.js","views/apps/invoice/edit/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","views/apps/invoice/helper/hepler.js"],"names":["activeOrgId","activeOrganizationid","activeOrg","activeOrganization","userId","orgUserId","AddCard","data","useState","block","setBlock","Loader","colourStyles","multiValue","styles","backgroundColor","id","useParams","MySwal","withReactContent","Swal","clientOptions","setClientOptions","serviceOptions","setServiceOptions","taxGroupOptions","setTaxGroupOptions","stateOptions","setStateOptions","accountOptions","setAccountOptions","finalTotal","setFinalTotal","finalSubTotal","setFinalSubTotal","convertionRate","setConvertedConvertionRate","convertedAmount","setConvertedAmount","invoiceItems","setInvoiceItems","invoiceTaxes","setInvoiceTaxes","userOptions","setuserOptions","selectedClient","setSelectedClient","taxValues","setTaxValues","name","setName","accDetails","setAccDetails","exemptionReasonOptions","setExemptionReasonOptions","selEmployees","setSelEmployees","participants","setParticipants","navigate","useNavigate","dispatch","useDispatch","store","useSelector","state","invoice","getOrganizationUsers","axios","post","then","response","arr","organizationusers","catch","err","console","log","deletefun","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","result","value","deleteInvoiceItem","dismiss","DismissReason","cancel","useEffect","status","clients","services","taxgroups","states","transactionaccounts","exemptionreasons","invoiceId","res","temp","taskinvoiceparticipants","map","obj","getClientData","getClient","payload","schema","yup","shape","createdBy","default","contactId","required","uniqueIdentity","contactEmail","contactName","invoiceDate","paymentDue","placeOfSupplyId","subTotalAmount","totalAmount","placeOfSupplyOthers","totalTaxAmount","organizationId","isRcmApplicable","isgstregistered","dueAmount","billingAddressLine1","billingAddressLine2","billingAddressState","billingAddressCity","billingAddressZipCode","billingCurrencyId","currencyid","bankAccountBankName","bankAccountBranchName","bankAccountHolderName","bankAccountId","billingAddressStateOthers","bankAccountIfscCode","bankAccountNumber","organizationAddressLine1","addressline1","organizationAddressLine2","addressline2","organizationCity","organizationcity","organizationState","statename","organizationStateOthers","stateothers","organizationZipCode","pinzipcode","convertionAmount","organizationName","organizationImageUrl","organizationimageid","organizationStateCode","stateshortname","organizationGstin","gstin","note","calculateTaxes","paymentStatus","rows","of","serviceId","sacCode","price","exemptionReasonId","isTaxApplicable","actualPrice","taxGroupId","taxes","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","setValue","reset","useFieldArray","keyName","fields","append","remove","InvoiceItems","forEach","key","updatedBy","updateInvoiceItems","length","ind","findIndex","push","users","deletedUser","addInvoiceParticipant","onSubmit","moment","valueOf","updateInvoice","addItem","taxPrice","description","ItemFinalTotalAmount","items","_formValues","finalsubTotalAmount","finalTaxAmount","parseFloat","toFixed","output","a","parser","flat","reduce","acc","item","undefined","existItem","find","taxName","taxAmount","String","Object","assign","JSON","stringify","calculateInvoiceTax","removeItem","tempid","flg","loadItemData","service_price","tax_group_id","desFlg","priceFlg","sacFlg","taxFlg","itemFlg","eachObj","selectedService","saccode","sellingprice","taxgroupid","exemptionreasonid","calculateTaxAmount","invoice_item_taxes","taxGroups","taxApplicable","nontaxableflag","istaxapplicable","billingaddresscountriesshorcode","taxid","calculateTax","percentage","dataTemp","parseInt","taxvaluefn","taxtype","stateid","taxType","taxdata","type","taxvalues","getTaxValue","bankAccountfn","bankName","branchAddress","accountHolderName","ifscCode","accountNumber","keys","billingaddresscity","billingaddressline1","billingaddressline2","billingaddressstatesname","billingaddresszip","currenciessymbol","currenciescode","currenciesname","email","placeofsupplyid","billingaddressstateothers","placeofsupplyothers","currencyConvert","toUpperCase","currencycode","getInvoiceItemList","getInvoiceItems","contactid","uniqueno","contactemail","contactname","invoicedate","toDate","paymentdue","subtotalamount","totalamount","totaltaxamount","isrcmapplicable","dueamount","billingaddressstate","billingaddresszipcode","billingcurrencyid","bankaccountbankname","bankaccountbranchname","bankaccountholdername","bankaccountid","bankaccountifsccode","bankaccountnumber","organizationaddressline1","organizationaddressline2","organizationstate","organizationzipcode","organizationname","organizationimageurl","organizationstatecode","organizationgstin","paymentstatus","handleUserChange","e","tempArr","Array","isArray","x","blocking","loader","className","xl","md","sm","ErrorText","message","renderError","imageid","color","content","charAt","referrerPolicy","height","width","src","alt","size","placeholder","disabled","render","field","onChange","date","dateStr","options","altInput","ref","inputRef","classnames","classNamePrefix","c","val","getOptionLabel","option","getOptionValue","accountType","index","rules","invalid","onInput","lg","onClick","order","xs","billingaddresscountriesname","for","outline","tag","Link","to","reviewer","isMulti","TaxComponent","mainInd","refreshTax","itemAmount","parentaxCallback","addTaxItem","calTax","tax","taxamount","i","j","setRefresTax","getServices","country","countryshortname","bankAccountType","organizationStateOther","subInd","props","main","subind","datatemp","defaultValue","InvoiceEdit","setData","getInvoice","taskinvoices","EditCard","EditCardINT","UILoader","children","overlayColor","Tag","style","defaultProps","ComponentSpinner","amount","taxRateInPercentage","TaxType","calculatedTax","str","parse","replace"],"mappings":"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","file":"static/js/53.99541071.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus, Hash } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n// ** Reactstrap Imports\nimport { Row, Col, Card, Input, Label, Button, CardBody, CardText, InputGroup, InputGroupText, FormFeedback } from 'reactstrap'\nimport classnames from 'classnames'\nimport Avatar from '@components/avatar'\nimport { updateInvoice, updateInvoiceItems, getClient, getInvoiceItems, deleteInvoiceItem, addInvoiceParticipant } from '../store/index'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { activeOrganizationid, activeOrganization, orgUserId } from '@src/helper/sassHelper'\nimport { calculateTax, parser } from '../helper/hepler'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Swal from 'sweetalert2'\nimport { currencyConvert } from '@src/helper/functionHelper.js'\nimport withReactContent from 'sweetalert2-react-content'\nimport moment from 'moment'\n\nconst activeOrgId = activeOrganizationid()\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\n\nconst AddCard = ({ data }) => {\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const colourStyles = {\n    multiValue: (styles, { }) => {\n\n      return {\n        ...styles,\n        backgroundColor: '#7367f0'\n      }\n    }\n  }\n  const accountTypeArr = ['', 'Saving', 'Current']\n  const { id } = useParams()\n  const MySwal = withReactContent(Swal)\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  const [taxGroupOptions, setTaxGroupOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [accountOptions, setAccountOptions] = useState([])\n  const [finalTotal, setFinalTotal] = useState(0)\n  const [finalSubTotal, setFinalSubTotal] = useState(0)\n  const [convertionRate, setConvertedConvertionRate] = useState(0.00)\n  const [convertedAmount, setConvertedAmount] = useState(0.00)\n\n  const [invoiceItems, setInvoiceItems] = useState([])\n  const [invoiceTaxes, setInvoiceTaxes] = useState([])\n  const [userOptions, setuserOptions] = useState([])\n  const [selectedClient, setSelectedClient] = useState({})\n  const [taxValues, setTaxValues] = useState([])\n  const [name, setName] = useState('Profoma Invoice')\n  const [accDetails, setAccDetails] = useState([])\n  const [exemptionReasonOptions, setExemptionReasonOptions] = useState([])\n  const [selEmployees, setSelEmployees] = useState([])\n  const [participants, setParticipants] = useState([])\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n\n  const store = useSelector(state => state.invoice)\n  const getClients = () => {\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getServices = () => {\n    axios.post('/services/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setServiceOptions(arr.services)\n    })\n  }\n\n  const getTaxValue = (taxType) => {\n    const taxdata = {\n      type: taxType\n    }\n    axios.post('/taxvalues/list', taxdata).then(response => {\n      const arr = response.data\n      setTaxValues(arr.taxvalues)\n    })\n  }\n\n  const getExemptionReason = () => {\n    axios.post('/exemptionreasons/dropdown').then(response => {\n      const arr = response.data\n      setExemptionReasonOptions(arr.exemptionreasons)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getTaxGroups = () => {\n    axios.post('/taxgroups/dropdown').then(response => {\n      const arr = response.data\n      setTaxGroupOptions(arr.taxgroups)\n    })\n  }\n\n\n  const getBankAccounts = () => {\n    axios.post('/transactionaccounts/dropdown').then(response => {\n      const arr = response.data\n      setAccountOptions(arr.transactionaccounts)\n    })\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown').then(response => {\n      const arr = response.data.organizationusers\n      setuserOptions(arr)\n    }).catch((err) => {\n      console.log(err)\n    })\n  }\n\n  const getParticipants = () => {\n\n    axios.post('/taskinvoices/getparticipants', { invoiceId: id })\n      .then((res) => {\n        const temp = res.data.taskinvoiceparticipants.map((obj) => obj.id)\n        setSelEmployees(temp)\n        setParticipants(res.data.taskinvoiceparticipants)\n      })\n      .catch((err) => { console.log(err) })\n\n  }\n\n  const deletefun = (id) => {\n\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteInvoiceItem(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'Conatct has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  useEffect(() => {\n    // ** Get Clients\n    getClients()\n    getServices()\n    getTaxGroups()\n    getStates()\n    getBankAccounts()\n    getOrganizationUsers()\n    getExemptionReason()\n    getParticipants()\n\n  }, [])\n\n  const getClientData = async (id) => {\n    const res = await dispatch(getClient(id))\n    setSelectedClient(res.payload)\n  }\n\n  const schema = yup.object().shape({\n    createdBy: yup.string().default(userId),\n    contactId: yup.string().required(\"Please select a Client\"),\n    uniqueIdentity: yup.string(),\n    contactEmail: yup.string(),\n    contactName: yup.string(),\n    invoiceDate: yup.string(),\n    paymentDue: yup.string(),\n    placeOfSupplyId: yup.string().required(\"Please select a Place Of Supply\"),\n    subTotalAmount: yup.string(),\n    totalAmount: yup.string(),\n    placeOfSupplyOthers: yup.string().default(''),\n    totalTaxAmount: yup.string(),\n    organizationId: yup.string().default(activeOrgId),\n    isRcmApplicable: yup.boolean().default(false),\n    isgstregistered: yup.boolean().default(true),\n    dueAmount: yup.string(),\n    billingAddressLine1: yup.string(),\n    billingAddressLine2: yup.string(),\n    billingAddressState: yup.string(),\n    billingAddressCity: yup.string(),\n    billingAddressZipCode: yup.string(),\n    billingCurrencyId: yup.string().default(activeOrg.currencyid),\n    bankAccountBankName: yup.string(),\n    bankAccountBranchName: yup.string(),\n    bankAccountHolderName: yup.string(),\n    bankAccountId: yup.string().required('Please Select Account'),\n    billingAddressStateOthers: yup.string().default(''),\n    bankAccountIfscCode: yup.string(),\n    bankAccountNumber: yup.string(),\n    organizationAddressLine1: yup.string().default(activeOrg.addressline1),\n    organizationAddressLine2: yup.string().default(activeOrg.addressline2),\n    organizationCity: yup.string().default(activeOrg.organizationcity),\n    organizationState: yup.string().default(activeOrg.statename),\n    organizationStateOthers: yup.string().default(activeOrg.stateothers ?? ''),\n    organizationZipCode: yup.string().default(activeOrg.pinzipcode),\n    convertionAmount: yup.string().default(0),\n    organizationName: yup.string().default(activeOrg.name),\n    organizationImageUrl: yup.string().default(activeOrg.organizationimageid || ''),\n    organizationStateCode: yup.string().default(activeOrg.stateshortname),\n    organizationGstin: yup.string().default(activeOrg.gstin),\n    gstin: yup.string(),\n    note: yup.string().default(''),\n    status: yup.number().default(4),\n    calculateTaxes: yup.string(),\n    paymentStatus: yup.number().default(5),\n    rows: yup.array().of(\n      yup.object().shape({\n        serviceId: yup.string().required(\"Please Select Service Item\"),\n        invoiceId: yup.string(),\n        sacCode: yup.string(),\n        price: yup.string(),\n        organizationId: yup.string().default(activeOrgId),\n        exemptionReasonId: yup.string().default(''),\n        isTaxApplicable: yup.boolean().default(true),\n        actualPrice: yup.string().required(),\n        taxGroupId: yup.string().required(\"Pleace Select Tax\"),\n        subTotalAmount: yup.string().required(1),\n        taxes: yup.string()\n      })\n    )\n  })\n\n  const { handleSubmit, formState: { errors }, control, setValue, reset } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, append, remove } = useFieldArray({ control, name: 'rows', keyName: 'rowid' })\n\n  const InvoiceItems = async (id) => {\n    invoiceItems.forEach((obj, key) => {\n      invoiceItems[key].invoiceId = id\n      invoiceItems[key].updatedBy = userId\n    })\n    await dispatch(updateInvoiceItems(invoiceItems))\n\n    if (selEmployees.length > 0) {\n      const temp = []\n      selEmployees.forEach((id) => {\n        const ind = participants.findIndex(obj => obj.id === id)\n        if (ind !== -1 && participants.length > 0) {\n          temp.push(participants[ind].id)\n        }\n      })\n      const obj = { users: selEmployees, organizationId: activeOrgId, invoiceId: id, deletedUser: temp }\n      await dispatch(addInvoiceParticipant(obj))\n    }\n    if (data.status === 4) {\n      navigate(`/proposal/view/${store.invoiceId}`)\n    } else {\n      navigate(`/invoice/view/${store.invoiceId}`)\n    }\n  }\n\n  const onSubmit = async data => {\n\n    data.invoiceDate = moment(data.invoiceDate).valueOf()\n    data.paymentDue = moment(data.paymentDue).valueOf()\n\n    setBlock(true)\n    const temp = data.rows\n    setInvoiceItems(temp)\n    delete data.rows\n    await dispatch(updateInvoice(data))\n\n  }\n\n  useEffect(async () => {\n    if (store.invoiceId !== null && invoiceItems.length > 0) {\n      await InvoiceItems(store.invoiceId)\n    }\n  }, [store.invoiceId, invoiceItems])\n\n  const addItem = (() => {\n    append({ invoiceId: 0, organizationId: activeOrgId, serviceId: '', exemptionReasonId: 0, isTaxApplicable: true, sacCode: '', actualPrice: 0, taxGroupId: '', subTotalAmount: 0, taxPrice: 0, description: '' })\n  })\n\n  useEffect(() => {\n    addItem()\n  }, [])\n\n  const calculateInvoiceTax = () => {\n\n    const inputArray = control._formValues.rows.map(a => {\n      if (a.taxes) {\n        return parser(a.taxes)\n      } else {\n        return []\n      }\n    })\n\n    let temp = []\n    temp = inputArray.flat()\n    let output = []\n    output = temp.reduce((acc, item) => {\n      if (item !== undefined) {\n        const existItem = acc.find((obj) => {\n          return item.taxName === obj.taxName\n        })\n        if (existItem) {\n          existItem.taxAmount = parseFloat(existItem.taxAmount) + parseFloat(item.taxAmount)\n          existItem.taxAmount = String(existItem.taxAmount)\n        } else {\n          acc.push(Object.assign({}, item))\n        }\n      }\n      return acc\n    }, [])\n\n    setInvoiceTaxes(output)\n    setValue('calculateTaxes', JSON.stringify(output))\n  }\n\n  const ItemFinalTotalAmount = () => {\n\n    const items = control._formValues.rows\n    let finalTotal = 0\n    let finalsubTotalAmount = 0\n    let finalTaxAmount = 0\n    items.forEach(obj => {\n      finalTotal = parseFloat(obj.subTotalAmount) + parseFloat(finalTotal)\n      finalsubTotalAmount = parseFloat(obj.price) + parseFloat(finalsubTotalAmount)\n      finalTaxAmount = parseFloat(finalTaxAmount) + parseFloat(obj.taxPrice)\n    })\n\n    control._formValues.subTotalAmount = finalsubTotalAmount\n    control._formValues.totalAmount = finalTotal\n    control._formValues.dueAmount = finalTotal\n    control._formValues.totalTaxAmount = finalTaxAmount\n\n  \n    setFinalTotal(finalTotal)\n    setConvertedAmount(parseFloat(convertionRate * finalTotal).toFixed(2))\n\n    setFinalSubTotal(finalsubTotalAmount)\n    calculateInvoiceTax()\n  }\n\n  const removeItem = async (ind) => {\n    const tempid = control._formValues.rows[ind].id\n    let flg\n    if (tempid !== undefined) {\n      flg = await deletefun(tempid)\n    }\n    if (flg) {\n      remove(ind)\n    }\n    ItemFinalTotalAmount()\n  }\n\n  const loadItemData = (ind, desFlg = false, priceFlg = false, sacFlg = false, taxFlg = false, itemFlg = false) => {\n    const eachObj = control._formValues.rows[ind]\n    if (eachObj.serviceId === undefined || eachObj.serviceId === '') {\n      return false\n    }\n    if (serviceOptions.length === 0) {\n      return false\n    }\n    let service_price, tax_group_id\n    const selectedService = serviceOptions.find((a) => a.id === eachObj.serviceId)\n    setValue(`rows[${ind}].serviceId`, eachObj.serviceId)\n    if (itemFlg) {\n      setValue(`rows[${ind}].sacCode`, selectedService.saccode || '')\n      service_price = selectedService.sellingprice || 0\n      tax_group_id = selectedService.taxgroupid\n      setValue(`rows[${ind}].actualPrice`, service_price)\n      setValue(`rows[${ind}].price`, String(selectedService.sellingprice) || 0)\n      setValue(`rows[${ind}].taxGroupId`, tax_group_id)\n      setValue(`rows[${ind}].description`, selectedService.description)\n      setValue(`rows[${ind}].exemptionReasonId`, selectedService.exemptionreasonid || '')\n    } else {\n      setValue(`rows[${ind}].sacCode`, sacFlg ? eachObj.sacCode : selectedService.saccode)\n      service_price = priceFlg ? eachObj.price : selectedService.sellingprice || 0\n      tax_group_id = taxFlg ? eachObj.taxGroupId : selectedService.taxgroupid\n      setValue(`rows[${ind}].price`, service_price)\n      setValue(`rows[${ind}].actualPrice`, String(selectedService.sellingprice) || 0)\n      setValue(`rows[${ind}].taxGroupId`, tax_group_id)\n      setValue(`rows[${ind}].description`, desFlg ? eachObj.description : selectedService.description)\n      setValue(`rows[${ind}].exemptionReasonId`, selectedService.exemptionreasonid || '')\n    }\n\n    let calculateTaxAmount = 0\n    const invoice_item_taxes = []\n\n    const taxGroups = taxGroupOptions.find((a) => a.id === tax_group_id)\n\n    let taxApplicable = taxGroups !== undefined ? !taxGroups.nontaxableflag : selectedService.istaxapplicable || false\n    taxApplicable = (taxApplicable && (activeOrg?.isgstregistered && (activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN')))\n\n    setValue(`rows[${ind}].isTaxApplicable`, taxApplicable)\n\n    if (taxApplicable) {\n      if (taxGroups !== undefined) {\n        taxValues.forEach(obj => {\n          if (obj.taxid === tax_group_id) {\n            let temp = 0\n            temp = calculateTax(service_price, obj.percentage, 2)\n            calculateTaxAmount = parseFloat(calculateTaxAmount) + parseFloat(temp)\n            const dataTemp = {}\n            dataTemp[\"taxName\"] = `${obj.name} (${obj.percentage}%)`\n            dataTemp[\"taxId\"] = parseInt(obj.id)\n            dataTemp[\"taxNameValue\"] = obj.name\n            dataTemp[\"taxPercentage\"] = String(obj.percentage)\n            dataTemp[\"taxAmount\"] = String(temp)\n\n            invoice_item_taxes.push(dataTemp)\n          }\n        })\n      }\n    }\n\n    setValue(`rows[${ind}].subTotalAmount`, parseFloat(parseFloat(calculateTaxAmount || 0.00) + parseFloat(service_price || 0.00)).toFixed(2))\n    setValue(`rows[${ind}].taxPrice`, parseFloat(calculateTaxAmount).toFixed(2))\n    setValue(`rows[${ind}].taxes`, JSON.stringify(invoice_item_taxes))\n    setValue(`rows[${ind}].updatedBy`, userId)\n\n    ItemFinalTotalAmount()\n\n  }\n\n  const taxvaluefn = () => {\n    let taxtype = 1\n    if (activeOrg.stateid === control._formValues.placeOfSupplyId) {\n      taxtype = 2\n    }\n\n    getTaxValue(taxtype)\n  }\n\n  useEffect(() => {\n    if (taxValues.length > 0) {\n      if (typeof control._formValues.rows === 'object') {\n        control._formValues.rows.forEach((obj, ind) => {\n          loadItemData(ind, true, true, true, true, false)\n        })\n      }\n    }\n  }, [taxValues])\n\n  const bankAccountfn = (id) => {\n    const acc = accountOptions.find((obj) => obj.id === id)\n    if (acc !== undefined) {\n      setAccDetails(acc)\n      setValue('bankAccountBankName', acc.bankName)\n      setValue('bankAccountBranchName', acc.branchAddress)\n      setValue('bankAccountHolderName', acc.accountHolderName)\n      setValue('bankAccountIfscCode', acc.ifscCode)\n      setValue('bankAccountNumber', acc.accountNumber)\n    }\n  }\n\n  useEffect(() => {\n    if (accountOptions.length > 0) {\n      bankAccountfn(control._formValues.bankAccountId)\n    }\n  }, [accountOptions])\n\n  useEffect(async() => {\n    if (Object.keys(selectedClient).length > 0) {\n      setValue('billingAddressCity', selectedClient.billingaddresscity || '')\n      setValue('billingAddressLine1', selectedClient.billingaddressline1 || '')\n      setValue('billingAddressLine2', selectedClient.billingaddressline2 || '')\n      setValue('billingAddressState', selectedClient.billingaddressstatesname || '')\n      setValue('billingAddressZipCode', selectedClient.billingaddresszip || '')\n      setValue('billingCurrencyId', selectedClient.currencyid || activeOrg.currencyid)\n      setValue('billingCurrencySymbol', selectedClient.currenciessymbol || '')\n      setValue('billingCurrencyShortName', selectedClient.currenciescode || '')\n      setValue('billingCurrencyName', selectedClient.currenciesname || '')\n      setValue('contactEmail', selectedClient.email || '')\n      setValue('gstin', selectedClient.gstin || '')\n      setValue('contactName', selectedClient.name || '')\n      setValue('placeOfSupplyId', selectedClient.placeofsupplyid || '')\n      taxvaluefn()\n      setValue('convertionAmount', 0)\n      remove()\n      addItem()\n      if (activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN') {\n        taxvaluefn()\n      } else {\n        setValue('billingAddressStateOthers', selectedClient.billingaddressstateothers ?? '')\n        setValue('placeOfSupplyOthers', selectedClient.placeofsupplyothers ?? '')\n      }\n      if (selectedClient.billingaddresscountriesshorcode !== 'IN') {\n        const temp = await currencyConvert(selectedClient.currenciescode.toUpperCase(), activeOrg.currencycode)\n        setConvertedConvertionRate(temp)\n        setValue('convertionAmount', temp)\n      }\n    }\n\n  }, [selectedClient])\n\n  const renderError = () => {\n    const keys = Object.keys(errors)\n    const ErrorText = []\n    if (Array.isArray(keys)) {\n      keys.forEach((key) => {\n        if (key !== 'rows') {\n          ErrorText.push(<FormFeedback key={key}>${errors[key]?.message}</FormFeedback>)\n        }\n      })\n    }\n    return ErrorText\n  }\n\n  const getInvoiceItemList = async (id) => {\n    if (id !== undefined) {\n      const res = await dispatch(getInvoiceItems(id))\n      setValue('rows', res.payload)\n      ItemFinalTotalAmount()\n    }\n  }\n\n  useEffect(async () => {\n    if (Object.keys(data).length > 0) {\n      const invoice = data\n      reset({\n        contactId: invoice.contactid,\n        uniqueIdentity: invoice.uniqueno,\n        contactEmail: invoice.contactemail,\n        contactName: invoice.contactname,\n        invoiceDate: moment(invoice.invoicedate, 'x').toDate(),\n        paymentDue: moment(invoice.paymentdue, 'x').toDate(),\n        placeOfSupplyId: invoice.placeofsupplyid,\n        subTotalAmount: invoice.subtotalamount,\n        totalAmount: invoice.totalamount,\n        totalTaxAmount: invoice.totaltaxamount,\n        isRcmApplicable: invoice.isrcmapplicable,\n        dueAmount: invoice.dueamount,\n        billingAddressLine1: invoice.billingaddressline1 || '',\n        billingAddressLine2: invoice.billingaddressline2 || '',\n        billingAddressState: invoice.billingaddressstate || '',\n        billingAddressCity: invoice.billingaddresscity || '',\n        billingAddressZipCode: invoice.billingaddresszipcode || '',\n        billingCurrencyId: invoice.billingcurrencyid || '',\n        bankAccountBankName: invoice.bankaccountbankname,\n        bankAccountBranchName: invoice.bankaccountbranchname,\n        bankAccountHolderName: invoice.bankaccountholdername,\n        bankAccountId: invoice.bankaccountid,\n        bankAccountIfscCode: invoice.bankaccountifsccode,\n        bankAccountNumber: invoice.bankaccountnumber,\n        organizationAddressLine1: invoice.organizationaddressline1 === '' ? activeOrg.addressline1 : invoice.organizationaddressline1,\n        organizationAddressLine2: invoice.organizationaddressline2 === '' ? activeOrg.addressline2 : invoice.organizationaddressline2,\n        organizationCity: invoice.organizationcity === '' ? activeOrg.organizationcity : invoice.organizationcity,\n        organizationState: invoice.organizationstate === '' ? activeOrg.statename : invoice.organizationstate,\n        organizationZipCode: invoice.organizationzipcode === '' ? activeOrg.pinzipcode : invoice.organizationzipcode,\n        organizationName: invoice.organizationname === '' ? activeOrg.name : invoice.organizationname,\n        organizationImageUrl: invoice.organizationimageurl === null ? activeOrg.organizationimageid : invoice.organizationimageurl,\n        organizationStateCode: invoice.organizationstatecode || '',\n        organizationGstin: invoice.organizationgstin === '' ? activeOrg.gstin : invoice.gstin,\n        gstin: invoice.gstin,\n        note: invoice.note,\n        status: invoice.status,\n        paymentStatus: invoice.paymentstatus\n      })\n      setName(parseInt(invoice.status) === 4 ? 'Profoma Invoice' : 'Invoice')\n      await getClientData(invoice.contactid)\n      await getInvoiceItemList(invoice.id)\n    }\n  }, [data])\n\n  const handleUserChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    setSelEmployees(tempArr)\n\n  }\n\n\n  return (\n\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Row className='invoice-add'>\n          <Fragment>\n            <Col xl={10} md={8} sm={12}>\n\n              <Card className='invoice-preview-card'>\n\n                {/* Header */}\n                <CardBody className='invoice-padding pb-0'>\n                  {\n                    renderError()\n                  }\n                  <div className='d-flex justify-content-between flex-md-row flex-column invoice-spacing mt-0'>\n                    <div>\n                      <div className='logo-wrapper'>\n                        {activeOrg.imageid === null ? <Avatar color={'primary'} className='me-50' content={activeOrg.name !== null ? activeOrg.name?.charAt(0) : ''} /> : <img referrerPolicy=\"no-referrer\" className='rounded me-50' height={75} width={75} src={`https://drive.google.com/thumbnail?id=${activeOrg.imageid}&authuser=0`} alt=\"Organisation Logo\" />}\n                      </div>\n                      <h3 className='text-primary invoice-logo'>{activeOrg.name}</h3>\n                      <p className='card-text mb-25'>{activeOrg.addressline1}</p>\n                      <p className='card-text mb-25'>{activeOrg.addressline2}</p>\n                      <p className='card-text mb-0'>{activeOrg.organizationcity} - {activeOrg.pinzipcode}</p>\n                      <p className='card-text mb-0'>{activeOrg.statename}</p>\n                    </div>\n                    <div className='invoice-number-date mt-md-0 mt-2'>\n                      <div className='d-flex align-items-center justify-content-md-end mb-1'>\n                        <h4 className='invoice-title'>{name}</h4>\n                        <InputGroup className='input-group-merge invoice-edit-input-group disabled'>\n                          <InputGroupText>\n                            <Hash size={15} />\n                          </InputGroupText>\n                          <Input\n                            type='number'\n                            className='invoice-edit-input'\n                            value={3171}\n                            placeholder='53634'\n                            disabled\n                          />\n                        </InputGroup>\n                      </div>\n                      <div className='d-flex align-items-center justify-content-md-between mb-1'>\n                        <span className='title required'>Profoma Invoice Date</span>\n                        <Controller\n                          control={control}\n                          name={`invoiceDate`}\n                          id='invoiceDate'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true }}\n                              className='form-control invoice-edit-input date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                      <div className='d-flex align-items-center justify-content-md-between'>\n                        <span className='title required'>Due Date</span>\n                        <Controller\n                          control={control}\n                          name={`paymentDue`}\n                          id='paymentDue'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true }}\n                              className='form-control invoice-edit-input due-date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </CardBody>\n                {/* /Header */}\n\n                <hr className='invoice-spacing' />\n\n                {/* Address and Contact */}\n                <CardBody className='invoice-padding pt-0'>\n                  <Row className='row-bill-to invoice-spacing'>\n                    <Col className='col-bill-to ps-0' xl='6'>\n                      <h6 className='invoice-to-title required'>Profoma Invoice To</h6>\n                      <div className='invoice-customer'>\n                        <Controller\n                          control={control}\n                          name={`contactId`}\n                          id={`contactId`}\n                          render={({ field, ref }) => (\n                            <Select\n                              inputRef={ref}\n                              className={classnames('react-select', { 'is-invalid': errors['contactId'] })}\n                              {...field}\n                              classNamePrefix='select'\n                              options={clientOptions}\n                              value={clientOptions.find(c => { return c.id === field.value })}\n                              onChange={val => { field.onChange(val.id); getClientData(val.id) }}\n                              getOptionLabel={(option) => option.name}\n                              getOptionValue={(option) => option.id}\n                            />\n                          )}\n                        />\n                      </div>\n                      <Col className='pe-0 mt-xl-2' xl='4'>\n                        <table>\n                          <tbody>\n                            <tr>\n                              <td>{selectedClient.billingaddressline1}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddressline2}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddresscity} {selectedClient.billingaddresszip && `-`}  {selectedClient.billingaddresszip}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddressstatesname ?? selectedClient.billingaddressstateothers}</td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </Col>\n                    </Col>\n                    <Col className='col-bill-to ps-0' xl='2'></Col>\n                    <Col className='pe-0 mt-xl-0 mt-2' xl='4'>\n                      <h6 className='mb-2'>Payment Details:</h6>\n                      <table>\n                        <tbody>\n                          <tr>\n                            <td className='pe-1'>Bank Name:</td>\n                            <td>\n                              {accDetails.bankName && <span className='fw-bolder'>{accDetails.bankName}</span>}\n                            </td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Account name:</td>\n                            <td>{accDetails.accountHolderName && <span className='fw-bolder'>{accDetails.accountHolderName}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Branch Name:</td>\n                            <td> {accDetails.branchAddress && <span className='fw-bolder'>{accDetails.branchAddress}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>IFSC Code:</td>\n                            <td>{accDetails.ifscCode && <span className='fw-bolder'>{accDetails.ifscCode} </span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Account Type:</td>\n                            <td>{accDetails.accountType && <span className='fw-bolder'>{accountTypeArr[accDetails.accountType]} </span>}</td>\n                          </tr>\n\n                        </tbody>\n                      </table>\n                    </Col>\n                  </Row>\n                  {(activeOrg?.isgstregistered) &&\n                    <Row className='row-bill-to invoice-spacing'>\n                      <Col className='col-bill-to ps-0' xl='6'>\n                        <h6 className='invoice-to-title mt-2 required'>Place Of Supply</h6>\n                        <div className='invoice-customer'>\n\n                          {(activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN') &&\n                            <Controller\n                              control={control}\n                              name={`placeOfSupplyId`}\n                              id={`placeOfSupplyId`}\n                              render={({ field, ref }) => (\n                                <Select\n                                  inputRef={ref}\n                                  className={classnames('react-select', { 'is-invalid': errors['placeOfSupplyId'] })}\n                                  {...field}\n                                  classNamePrefix='select'\n                                  options={stateOptions}\n                                  value={stateOptions.find(c => { return c.id === field.value })}\n                                  onChange={val => { field.onChange(val.id); taxvaluefn() }}\n                                  getOptionLabel={(option) => option.name}\n                                  getOptionValue={(option) => option.id}\n                                />\n                              )}\n                            />\n                          }\n                          {(activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode !== 'IN') &&\n                            selectedClient?.placeofsupplyothers\n                          }\n                        </div>\n                        {((activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN')) && <div className='mt-1'> GSTIN : {selectedClient.gstin}</div>}\n                      </Col>\n                      <Col className='col-bill-to ps-0' xl='2'></Col>\n                      <Col className='pe-0 mt-xl-0 mt-2' xl='4'>\n                        <table>\n                          <tbody>\n                            <tr>\n                              <td className='invoice-to-title mt-2 '>Currency Code:</td>\n                              <td>\n                                {selectedClient.currenciescode}\n                              </td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </Col>\n                    </Row>\n                  }\n                </CardBody>\n                {/* /Address and Contact */}\n\n                {/* Product Details */}\n                <CardBody className='invoice-padding invoice-product-details'>\n                  {fields.map((item, index) => {\n                    return (\n                      <div key={item.id} className='repeater-wrapper'>\n                        <Row>\n                          <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                            <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                              <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-4 col-sm-12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Item</CardText>\n                                <Controller\n                                  control={control}\n                                  name={`rows[${index}].serviceId`}\n                                  rules={{ required: true }}\n                                  render={({ field, ref }) => (\n                                    <Select\n                                      {...field}\n                                      inputRef={ref}\n                                      className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.serviceId })}\n                                      classNamePrefix='select'\n                                      options={serviceOptions}\n                                      value={serviceOptions.find(c => c.id === field.value)}\n                                      onChange={val => { field.onChange(val.id); loadItemData(index, false, false, false, false, true) }}\n                                      getOptionLabel={(option) => option.name}\n                                      getOptionValue={(option) => option.id}\n                                    />\n                                  )}\n                                />\n                                {errors.rows?.[index]?.serviceId && <FormFeedback>{errors.rows?.[index]?.serviceId.message}</FormFeedback>}\n                                <Controller\n                                  id={`rows_${index}_description`}\n                                  name={`rows[${index}].description`}\n                                  control={control}\n                                  render={({ field }) => <Input className='mt-1' invalid={errors.rows?.[index]?.description && true} onInput={(val) => { field.onChange(val); loadItemData(index, true, false, false, false, false) }} {...field} />}\n                                />\n                              </Col>\n                              {(item.isTaxApplicable) &&\n                                <Col className='my-lg-0 my-2 col-lg-2 col-sm-12'>\n                                  <CardText className='col-title mb-md-2 mb-0'>SAC Code</CardText>\n                                  <Controller\n                                    id={`rows_${index}_sacCode`}\n                                    name={`rows[${index}].sacCode`}\n                                    control={control}\n                                    render={({ field }) => <Input type='text' invalid={errors.rows?.[index]?.sacCode && true} onInput={(val) => { field.onChange(val); loadItemData(index, false, true, true, false, false) }} {...field} />}\n                                  />\n                                  {errors.rows?.[index]?.sacCode && <FormFeedback>{errors.rows?.[index]?.sacCode.message}</FormFeedback>}\n                                </Col>\n                              }\n                              <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                                <CardText className='col-title mb-md-2 mb-0'>Price</CardText>\n                                <Controller\n                                  id={`rows_${index}_price`}\n                                  name={`rows[${index}].price`}\n                                  control={control}\n                                  render={({ field }) => <Input type='number' id={`input_rows_${index}_price`} onInput={(val) => { field.onChange(val); loadItemData(index, false, true, false, false, false) }} {...field} invalid={errors.rows?.[index]?.price && true} />}\n                                />\n                                {errors.rows?.[index]?.price && <FormFeedback>{errors.rows?.[index]?.price.message}</FormFeedback>}\n                              </Col>\n                              {(item.isTaxApplicable) &&\n                                <Col className='my-lg-0 mt-2' lg='2' sm='12'>\n                                  <CardText className='col-title mb-md-50 mb-0'>Tax Rate</CardText>\n                                  <Controller\n                                    control={control}\n                                    name={`rows[${index}].taxGroupId`}\n                                    rules={{ required: true }}\n                                    render={({ field, ref }) => (\n                                      <Select\n                                        {...field}\n                                        inputRef={ref}\n                                        className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.taxGroupId })}\n                                        classNamePrefix='select'\n                                        options={taxGroupOptions}\n                                        value={taxGroupOptions.find(c => c.id === field.value)}\n                                        onChange={(val) => { field.onChange(val.id); loadItemData(index, false, true, false, true, false) }}\n                                        getOptionLabel={(option) => option.name}\n                                        getOptionValue={(option) => option.id}\n                                      />\n                                    )}\n                                  />\n                                  {errors.rows?.[index]?.taxGroupId && <FormFeedback>{errors.rows?.[index]?.taxGroupId.message}</FormFeedback>}\n\n                                  {\n                                    !item.isTaxApplicable && <Controller\n                                      control={control}\n                                      name={`rows[${index}].exemptionReasonId`}\n                                      rules={{ required: true }}\n                                      render={({ field, ref }) => (\n                                        <Select\n                                          {...field}\n                                          inputRef={ref}\n                                          className={classnames('react-select mt-1', { 'is-invalid': errors.rows?.[index]?.taxGroupId })}\n                                          classNamePrefix='select'\n                                          options={exemptionReasonOptions}\n                                          value={exemptionReasonOptions.find(c => c.id === field.value)}\n                                          onChange={(val) => { field.onChange(val.id) }}\n                                          getOptionLabel={(option) => option.name}\n                                          getOptionValue={(option) => option.id}\n                                        />\n                                      )}\n                                    />\n                                  }\n\n                                </Col>\n                              }\n                              <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Amount</CardText>\n                                {control._formValues.rows[index].subTotalAmount} {selectedClient?.currenciessymbol}\n                              </Col>\n                            </Row>\n                            <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                              <X size={18} className='cursor-pointer' onClick={() => { removeItem(index) }} />\n                            </div>\n                          </Col>\n                        </Row>\n                      </div>\n                    )\n                  })}\n                  <Row className='mt-1'>\n                    <Col sm='12' className='px-0'>\n                      <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                        <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                      </Button>\n                    </Col>\n                  </Row>\n                </CardBody>\n\n                {/* /Product Details */}\n\n                {/* Invoice Total */}\n                <CardBody className='invoice-padding'>\n                  <Row className='invoice-sales-total-wrapper'>\n                    <Col className='mt-md-0 mt-3' md={{ size: '6', order: 1 }} xs={{ size: 12, order: 2 }}>\n                      {selectedClient.billingaddresscountriesname !== 'IN' &&\n\n                        <p>Amount in {activeOrg.currencycode} : {convertedAmount} </p>\n                      }\n                    </Col>\n                    <Col className='d-flex justify-content-end' md={{ size: '6', order: 2 }} xs={{ size: 12, order: 1 }}>\n                      <div className='invoice-total-wrapper'>\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>\n                            {(activeOrg?.isgstregistered && (activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN')) && 'Pre Tax'}  Amount:</p>\n                          <p className='invoice-total-amount'>{finalSubTotal} {selectedClient?.currenciessymbol}</p>\n                        </div>\n                        {(activeOrg?.isgstregistered && (activeOrg?.isgstregistered && selectedClient.billingaddresscountriesshorcode === 'IN')) && <div>\n                          {\n                            invoiceTaxes.map((obj, ind) => {\n                              return (<div key={ind} className='invoice-total-item'>\n                                <p className='invoice-total-title'>{obj?.taxName}</p>\n                                <p className='invoice-total-amount'>{obj?.taxAmount} {selectedClient?.currenciessymbol}</p>\n                              </div>)\n                            })\n                          }\n                        </div>\n                        }\n                        <hr className='my-50' />\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>Total Payable:</p>\n                          <p className='invoice-total-amount'>{finalTotal} {selectedClient?.currenciessymbol}</p>\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Total */}\n\n                <hr className='invoice-spacing mt-0' />\n\n                {/* Invoice Note */}\n                <CardBody className='invoice-padding py-0'>\n                  <Row>\n                    <Col>\n                      <div className='mb-2'>\n                        <Label for='note' className='form-label fw-bold'>\n                          Note:\n                        </Label>\n                        <Controller\n                          id='note'\n                          name='note'\n                          control={control}\n                          render={({ field }) => <Input type=\"textarea\" value={field.value} invalid={errors.note && true} {...field} />}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Note */}\n              </Card>\n\n            </Col>\n            <Col xl={2} md={4} sm={12}>\n              <Card className='invoice-action-wrapper'>\n                <CardBody>\n                  <Button color='primary' type='submit' block outline className='mb-75'>\n                    Save\n                  </Button>\n                  <Button color='warning' block outline tag={Link} to='/invoice/list'>\n                    Cancel\n                  </Button>\n                </CardBody>\n              </Card>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50 required'>Accept payments via</p>\n                  <Controller\n                    control={control}\n                    name={`bankAccountId`}\n                    rules={{ required: true }}\n                    render={({ field, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select mt-1', { 'is-invalid': errors.bankAccountId })}\n                        classNamePrefix='select'\n                        options={accountOptions}\n                        value={accountOptions.find(c => c.id === field.value)}\n                        onChange={(val) => { field.onChange(val.id); bankAccountfn(val.id) }}\n                        getOptionLabel={(option) => option.accountHolderName}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n                  />\n                </div>\n              </div>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50'>Select Employee</p>\n\n                  <Controller\n                    control={control}\n                    name=\"reviewer\"\n                    id=\"reviewer\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.reviewer })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={userOptions}\n                        isMulti={true}\n                        value={value} // set selected values\n                        onChange={handleUserChange}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                        styles={colourStyles}\n                      />\n                    )}\n\n                  />\n                </div>\n              </div>\n            </Col>\n          </Fragment >\n        </Row>\n      </form >\n    </UILoader>\n  )\n}\n\nexport default AddCard\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\nimport Avatar from '@components/avatar'\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { PlusCircle, Plus, Hash, Trash2 } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n// ** Reactstrap Imports\nimport { Row, Col, Card, Input, Label, Button, CardBody, CardText, InputGroup, InputGroupText, FormFeedback } from 'reactstrap'\nimport classnames from 'classnames'\n\nimport { updateInvoice, updateInvoiceItems, getClient, getInvoiceItems, deleteInvoiceItem, addInvoiceParticipant } from '../store/index'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { activeOrganizationid, activeOrganization, orgUserId } from '@src/helper/sassHelper'\nimport { calculateTax } from '../helper/hepler'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport moment from 'moment'\n\nconst activeOrgId = activeOrganizationid()\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\n\nconst TaxComponent = ({ mainInd, refreshTax, taxGroupOptions, itemAmount, parentaxCallback, control }) => {\n\n  const { fields, append, remove } = useFieldArray({ control, name: `rows[${mainInd}].taxes` })\n\n  const addTaxItem = () => {\n    append({ taxGroupId: '', taxAmount: 0, taxName: '' })\n  }\n\n  const removeItem = (i) => {\n    remove(i)\n  }\n\n  useEffect(() => {\n    if (control._formValues.rows[mainInd]?.taxes.length === 0) {\n      addTaxItem()\n    }\n  }, [])\n\n  const calTax = (id, ind) => {\n    const tax = taxGroupOptions.find((obj) => obj.id === id)\n    const taxamount = calculateTax(itemAmount, tax.percentage, 2)\n    parentaxCallback({ taxAmount: taxamount, taxName: tax.name, taxGroupId: tax.id }, mainInd, ind)\n  }\n  useEffect(() => {\n    if (refreshTax) {\n      control._formValues.rows[mainInd].taxes.forEach((tax, i) => {\n        if (tax.taxGroupId !== '') {\n          calTax(tax.taxGroupId, i)\n        }\n      })\n    }\n  }, [refreshTax])\n  return (\n\n    fields.map((item, j) => {\n      return (\n\n        <Row className='d-flex align-items-center justify-content-between pe-lg-0 pe-1 py-50' md={12} key={item.id}>\n          <Col md={6}></Col>\n          <Col md={1} className='d-flex justify-content-end'>\n            {j === fields.length - 1 &&\n              <PlusCircle size={'16'} className='text-primary' onClick={() => addTaxItem()} />\n            }\n          </Col>\n          <Col className='my-lg-0 mt-2' lg='3' sm='12'>\n            <Controller\n              control={control}\n              name={`rows[${mainInd}].taxes[${j}].taxGroupId`}\n              rules={{ required: true }}\n              render={({ field, ref }) => (\n                <Select\n                  {...field}\n                  inputRef={ref}\n                  className={classnames('react-select')}\n                  classNamePrefix='select'\n                  options={taxGroupOptions}\n                  placeholder='Select Tax Rate'\n                  value={taxGroupOptions.find(c => c.id === field.value)}\n                  onChange={(val) => { field.onChange(val.id); calTax(val.id, j) }}\n                  getOptionLabel={(option) => option.name}\n                  getOptionValue={(option) => option.id}\n                />\n              )}\n            />\n\n          </Col>\n          <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n            {control._formValues.rows[mainInd].taxes[j].taxAmount}\n          </Col>\n          <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n            {control._formValues.rows[mainInd].taxes.length > 1 &&\n              <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                <Trash2 size={16} onClick={() => removeItem(j)} />\n              </div>\n            }\n          </Col>\n        </Row>\n      )\n    })\n  )\n}\n\nconst AddCard = ({ data }) => {\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const colourStyles = {\n    multiValue: (styles, { }) => {\n\n      return {\n        ...styles,\n        backgroundColor: '#7367f0'\n      }\n    }\n  }\n  const { id } = useParams()\n  const MySwal = withReactContent(Swal)\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  const [taxGroupOptions, setTaxGroupOptions] = useState([])\n  const [accountOptions, setAccountOptions] = useState([])\n  const [finalTotal, setFinalTotal] = useState(0.00)\n  const [finalSubTotal, setFinalSubTotal] = useState(0.00)\n  const [refreshTax, setRefresTax] = useState(false)\n  const [invoiceItems, setInvoiceItems] = useState([])\n  const [selectedClient, setSelectedClient] = useState({})\n  const [name, setName] = useState('Profoma Invoice')\n  const [accDetails, setAccDetails] = useState([])\n  const [invoiceTaxes, setInvoiceTaxes] = useState([])\n  const [userOptions, setuserOptions] = useState([])\n  const [selEmployees, setSelEmployees] = useState([])\n  const [participants, setParticipants] = useState([])\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n\n  const store = useSelector(state => state.invoice)\n  const getClients = () => {\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getServices = async () => {\n    await axios.post('/services/dropdown', { status: 1 }).then(async response => {\n      const arr = response.data\n      await setServiceOptions(arr.services)\n    })\n  }\n\n  const getTaxGroups = () => {\n    axios.post('/taxgroups/dropdown', { country: activeOrg.countryshortname }).then(response => {\n      const arr = response.data\n      setTaxGroupOptions(arr.taxgroups)\n    })\n  }\n\n  const getBankAccounts = () => {\n    axios.post('/transactionaccounts/dropdown').then(response => {\n      const arr = response.data\n      setAccountOptions(arr.transactionaccounts)\n    })\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown').then(response => {\n      const arr = response.data.organizationusers\n      setuserOptions(arr)\n    }).catch((err) => {\n      console.log(err)\n    })\n  }\n\n  const getParticipants = () => {\n\n    axios.post('/taskinvoices/getparticipants', { invoiceId: id })\n      .then((res) => {\n        const temp = res.data.taskinvoiceparticipants.map((obj) => obj.id)\n        setSelEmployees(temp)\n        setParticipants(res.data.taskinvoiceparticipants)\n      })\n      .catch((err) => { console.log(err) })\n\n  }\n\n  const deletefun = (id) => {\n\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteInvoiceItem(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'Conatct has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  useEffect(() => {\n    // ** Get Clients\n    getClients()\n    getTaxGroups()\n    getServices()\n    getBankAccounts()\n    getOrganizationUsers()\n    getParticipants()\n\n  }, [])\n\n  const getClientData = async (id) => {\n    const res = await dispatch(getClient(id))\n    setSelectedClient(res.payload)\n  }\n  const accountTypeArr = ['', 'Saving', 'Checking']\n  const schema = yup.object().shape({\n    updatedBy: yup.string().default(userId),\n    id: yup.string().default(id),\n    contactId: yup.string().required(\"Please select a Client\"),\n    uniqueIdentity: yup.string(),\n    contactEmail: yup.string(),\n    contactName: yup.string(),\n    invoiceDate: yup.string(),\n    paymentDue: yup.string(),\n    placeOfSupplyOthers: yup.string().default(activeOrg.stateothers).required(\"Please select a Place Of Supply\"),\n    subTotalAmount: yup.string(),\n    totalAmount: yup.string(),\n    totalTaxAmount: yup.string(),\n    organizationId: yup.string().default(activeOrgId),\n    isRcmApplicable: yup.boolean().default(false),\n    dueAmount: yup.string(),\n    billingAddressLine1: yup.string(),\n    billingAddressLine2: yup.string(),\n    billingAddressState: yup.string(),\n    billingAddressCity: yup.string(),\n    billingAddressZipCode: yup.string(),\n    billingCurrencyId: yup.string().default(activeOrg.currencyid),\n    bankAccountBankName: yup.string(),\n    bankAccountType: yup.string(),\n    bankAccountHolderName: yup.string(),\n    bankAccountId: yup.string().required('Please Select Account'),\n    bankAccountNumber: yup.string(),\n    organizationAddressLine1: yup.string().default(activeOrg.addressline1),\n    organizationAddressLine2: yup.string().default(activeOrg.addressline2),\n    organizationCity: yup.string().default(activeOrg.organizationcity),\n    organizationStateOther: yup.string().default(activeOrg.stateothers || ''),\n    organizationZipCode: yup.string().default(activeOrg.pinzipcode),\n    organizationName: yup.string().default(activeOrg.name),\n    organizationImageUrl: yup.string().default(activeOrg.organizationimageid || ''),\n    organizationStateCode: yup.string().default(activeOrg.stateothers),\n    organizationGstin: yup.string().default(activeOrg.gstin),\n    gstin: yup.string(),\n    note: yup.string().default(''),\n    status: yup.number().default(4),\n    calculateTaxes: yup.string(),\n    paymentStatus: yup.number().default(5),\n    rows: yup.array().of(\n      yup.object().shape({\n        serviceId: yup.string().required(\"Please Select Service Item\"),\n        invoiceId: yup.string(),\n        price: yup.string(),\n        organizationId: yup.string().default(activeOrgId),\n        isTaxApplicable: yup.boolean().default(true),\n        actualPrice: yup.string().required(),\n        subTotalAmount: yup.string().required(1),\n        taxes: yup.array().of(\n          yup.object().shape({\n            taxGroupId: yup.string().required(\"Pleace Select Tax\"),\n            taxAmount: yup.string().required(1),\n            taxName: yup.string()\n          })\n        )\n      })\n    )\n  })\n  const { handleSubmit, formState: { errors }, control, setValue, reset } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, append, remove } = useFieldArray({ control, name: 'rows', keyName: 'rowid' })\n\n  const InvoiceItems = async (id) => {\n    invoiceItems.forEach((obj, key) => {\n      invoiceItems[key].invoiceId = id\n      invoiceItems[key].updatedBy = userId\n    })\n    await dispatch(updateInvoiceItems(invoiceItems))\n\n    if (selEmployees.length > 0) {\n      const temp = []\n      selEmployees.forEach((id) => {\n        const ind = participants.findIndex(obj => obj.id === id)\n        if (ind !== -1 && participants.length > 0) {\n          temp.push(participants[ind].id)\n        }\n      })\n      const obj = { users: selEmployees, organizationId: activeOrgId, invoiceId: id, deletedUser: temp }\n      await dispatch(addInvoiceParticipant(obj))\n    }\n    if (data.status === 4) {\n      navigate(`/proposal/view/${store.invoiceId}`)\n    } else {\n      navigate(`/invoice/view/${store.invoiceId}`)\n    }\n  }\n\n  const onSubmit = async data => {\n\n    data.invoiceDate = moment(data.invoiceDate).valueOf()\n    data.paymentDue = moment(data.paymentDue).valueOf()\n\n    setBlock(true)\n    const temp = data.rows\n    setInvoiceItems(temp)\n    delete data.rows\n    await dispatch(updateInvoice(data))\n\n  }\n\n  useEffect(async () => {\n    if (store.invoiceId !== null && invoiceItems.length > 0) {\n      await InvoiceItems(store.invoiceId)\n    }\n  }, [store.invoiceId, invoiceItems])\n\n  const addItem = (() => {\n    append({ invoiceId: 0, organizationId: activeOrgId, serviceId: '', exemptionReasonId: 0, isTaxApplicable: true, sacCode: '', actualPrice: 0, taxGroupId: '', subTotalAmount: 0, taxPrice: 0, description: '' })\n  })\n\n  useEffect(() => {\n    addItem()\n  }, [])\n\n  const calculateInvoiceTax = () => {\n\n    const inputArray = control._formValues.rows.map(a => {\n      if (a.taxes) {\n        return a.taxes\n      } else {\n        return []\n      }\n    })\n\n    let temp = []\n    temp = inputArray.flat()\n    let output = []\n    output = temp.reduce((acc, item) => {\n      if (item !== undefined) {\n        const existItem = acc.find((obj) => {\n          return item.taxName === obj.taxName\n        })\n        if (existItem) {\n          existItem.taxAmount = parseFloat(existItem.taxAmount) + parseFloat(item.taxAmount)\n        } else {\n          acc.push(Object.assign({}, item))\n        }\n      }\n      return acc\n    }, [])\n\n    setInvoiceTaxes(output)\n    setValue('calculateTaxes', JSON.stringify(output))\n\n  }\n\n  const ItemFinalTotalAmount = () => {\n\n    const items = control._formValues.rows\n    let finalTotal = 0\n    let finalsubTotalAmount = 0\n    let finalTaxAmount = 0\n    items.forEach(obj => {\n      finalTotal = parseFloat(obj.subTotalAmount) + parseFloat(finalTotal)\n      finalsubTotalAmount = parseFloat(obj.price) + parseFloat(finalsubTotalAmount)\n      finalTaxAmount = parseFloat(finalTaxAmount) + parseFloat(obj.taxPrice)\n    })\n\n    control._formValues.subTotalAmount = finalsubTotalAmount\n    control._formValues.totalAmount = finalTotal\n    control._formValues.dueAmount = finalTotal\n    control._formValues.totalTaxAmount = finalTaxAmount\n\n    setFinalTotal(finalTotal)\n    setFinalSubTotal(finalsubTotalAmount)\n    calculateInvoiceTax()\n  }\n\n  const removeItem = async (ind) => {\n    const tempid = control._formValues.rows[ind].id\n    let flg\n    if (tempid !== undefined) {\n      flg = await deletefun(tempid)\n    }\n    if (flg) {\n      remove(ind)\n    }\n    ItemFinalTotalAmount()\n  }\n\n  const loadItemData = (ind, desFlg = false, priceFlg = false, taxFlg = false, itemFlg = false, taxes = {}, subInd = 0) => {\n    const eachObj = control._formValues.rows[ind]\n    if (eachObj.serviceId === undefined || eachObj.serviceId === '') {\n      return false\n    }\n    let service_price\n    const selectedService = serviceOptions.find((a) => a.id === eachObj.serviceId)\n    setValue(`rows[${ind}].serviceId`, eachObj.serviceId)\n    if (itemFlg) {\n      service_price = selectedService?.sellingprice || 0\n      setValue(`rows[${ind}].actualPrice`, service_price)\n      setValue(`rows[${ind}].price`, String(selectedService?.sellingprice) || 0)\n      setValue(`rows[${ind}].description`, selectedService?.description)\n\n    } else {\n      service_price = priceFlg ? eachObj.price : selectedService?.sellingprice || 0\n      setValue(`rows[${ind}].price`, service_price)\n      setValue(`rows[${ind}].actualPrice`, String(selectedService?.sellingprice) || 0)\n      setValue(`rows[${ind}].description`, desFlg ? eachObj.description : selectedService?.description)\n    }\n\n    let calculateTaxAmount = 0\n\n    if (Object.keys(taxes).length > 0 && taxFlg) {\n\n      control._formValues.rows[ind].taxes[subInd] = taxes\n      const temp = control._formValues.rows[ind].taxes\n\n      setValue(`rows[${ind}].taxes`, temp)\n    }\n    control._formValues.rows[ind].taxes.forEach((obj) => {\n      calculateTaxAmount += parseFloat(obj.taxAmount)\n    })\n\n    setValue(`rows[${ind}].isTaxApplicable`, true)\n    setValue(`rows[${ind}].subTotalAmount`, parseFloat(parseFloat(calculateTaxAmount || 0.00) + parseFloat(service_price || 0.00)).toFixed(2))\n    setValue(`rows[${ind}].taxPrice`, parseFloat(calculateTaxAmount).toFixed(2))\n    setValue(`rows[${ind}].updatedBy`, userId)\n\n    ItemFinalTotalAmount()\n\n  }\n\n  const parentaxCallback = (props, main, subind) => {\n    if (props) {\n      setRefresTax(false)\n      loadItemData(main, true, true, true, false, props, subind)\n    }\n  }\n\n  const bankAccountfn = (id) => {\n    const acc = accountOptions.find((obj) => obj.id === id)\n    if (acc !== undefined) {\n      setAccDetails(acc)\n      setValue('bankAccountBankName', acc.bankName)\n      setValue('bankAccountBranchName', acc.branchAddress)\n      setValue('bankAccountHolderName', acc.accountHolderName)\n      setValue('bankAccountIfscCode', acc.ifscCode)\n      setValue('bankAccountNumber', acc.accountNumber)\n    }\n  }\n\n  useEffect(() => {\n    if (accountOptions.length > 0) {\n      bankAccountfn(control._formValues.bankAccountId)\n    }\n  }, [accountOptions])\n\n  useEffect(() => {\n    if (Object.keys(selectedClient).length > 0) {\n      setValue('billingAddressCity', selectedClient.billingaddresscity || '')\n      setValue('billingAddressLine1', selectedClient.billingaddressline1 || '')\n      setValue('billingAddressLine2', selectedClient.billingaddressline2 || '')\n      setValue('billingAddressState', selectedClient.billingaddressstatesname || '')\n      setValue('billingAddressZipCode', selectedClient.billingaddresszip || '')\n      setValue('billingCurrencyId', selectedClient.currencyid || activeOrg.currencyid)\n      setValue('billingCurrencySymbol', selectedClient.currenciessymbol || '')\n      setValue('billingCurrencyShortName', selectedClient.currenciescode || '')\n      setValue('billingCurrencyName', selectedClient.currenciesname || '')\n      setValue('contactEmail', selectedClient.email || '')\n      setValue('gstin', selectedClient.gstin || '')\n      setValue('contactName', selectedClient.name || '')\n      setValue('placeOfSupplyId', selectedClient.placeofsupplyid || '')\n\n    }\n\n  }, [selectedClient])\n\n  const renderError = () => {\n    const keys = Object.keys(errors)\n    const ErrorText = []\n    if (Array.isArray(keys)) {\n      keys.forEach((key) => {\n        if (key !== 'rows') {\n          ErrorText.push(<FormFeedback key={key}>${errors[key]?.message}</FormFeedback>)\n        }\n      })\n    }\n    return ErrorText\n  }\n\n  const getInvoiceItemList = async (id) => {\n    if (id !== undefined) {\n      const res = await dispatch(getInvoiceItems(id))\n      setValue('rows', res.payload)\n      const datatemp = [...res.payload]\n      await datatemp.forEach((obj, main) => {\n        obj.taxes.forEach((props, subind) => {\n          loadItemData(main, true, true, true, false, props, subind)\n        })\n      })\n    }\n  }\n\n  useEffect(async () => {\n    if (serviceOptions.length > 0) {\n      await getInvoiceItemList(data.id)\n    }\n  }, [serviceOptions])\n\n  useEffect(async () => {\n    if (Object.keys(data).length > 0) {\n      const invoice = data\n      reset({\n        contactId: invoice.contactid,\n        uniqueIdentity: invoice.uniqueno,\n        contactEmail: invoice.contactemail,\n        contactName: invoice.contactname,\n        invoiceDate: moment(invoice.invoicedate, 'x').toDate(),\n        paymentDue: moment(invoice.paymentdue, 'x').toDate(),\n        placeOfSupplyId: invoice.placeofsupplyid,\n        subTotalAmount: invoice.subtotalamount,\n        totalAmount: invoice.totalamount,\n        totalTaxAmount: invoice.totaltaxamount,\n        isRcmApplicable: invoice.isrcmapplicable,\n        dueAmount: invoice.dueamount,\n        billingAddressLine1: invoice.billingaddressline1 || '',\n        billingAddressLine2: invoice.billingaddressline2 || '',\n        billingAddressState: invoice.billingaddressstate || '',\n        billingAddressCity: invoice.billingaddresscity || '',\n        billingAddressZipCode: invoice.billingaddresszipcode || '',\n        billingCurrencyId: invoice.billingcurrencyid || '',\n        bankAccountBankName: invoice.bankaccountbankname,\n        bankAccountBranchName: invoice.bankaccountbranchname,\n        bankAccountHolderName: invoice.bankaccountholdername,\n        bankAccountId: invoice.bankaccountid,\n        bankAccountIfscCode: invoice.bankaccountifsccode,\n        bankAccountNumber: invoice.bankaccountnumber,\n        organizationAddressLine1: invoice.organizationaddressline1 === '' ? activeOrg.addressline1 : invoice.organizationaddressline1,\n        organizationAddressLine2: invoice.organizationaddressline2 === '' ? activeOrg.addressline2 : invoice.organizationaddressline2,\n        organizationCity: invoice.organizationcity === '' ? activeOrg.organizationcity : invoice.organizationcity,\n        organizationState: invoice.organizationstate === '' ? activeOrg.statename : invoice.organizationstate,\n        organizationZipCode: invoice.organizationzipcode === '' ? activeOrg.pinzipcode : invoice.organizationzipcode,\n        organizationName: invoice.organizationname === '' ? activeOrg.name : invoice.organizationname,\n        organizationImageUrl: invoice.organizationimageurl === null ? activeOrg.organizationimageid : invoice.organizationimageurl,\n        organizationStateCode: invoice.organizationstatecode || '',\n        organizationGstin: invoice.organizationgstin === '' ? activeOrg.gstin : invoice.gstin,\n        gstin: invoice.gstin,\n        note: invoice.note,\n        status: invoice.status,\n        paymentStatus: invoice.paymentstatus\n      })\n      setName('Profoma Invoice')\n      await getClientData(invoice.contactid)\n    }\n  }, [data])\n\n  const handleUserChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    setSelEmployees(tempArr)\n\n  }\n\n\n  return (\n\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Row className='invoice-add'>\n          <Fragment>\n            <Col xl={10} md={8} sm={12}>\n\n              <Card className='invoice-preview-card'>\n\n                {/* Header */}\n                <CardBody className='invoice-padding pb-0'>\n                  {\n                    renderError()\n                  }\n                  <div className='d-flex justify-content-between flex-md-row flex-column invoice-spacing mt-0'>\n                    <div>\n                      <div className='logo-wrapper'>\n                      {activeOrg.imageid === null ? <Avatar color={'primary'} className='me-50' content={activeOrg.name !== null ? activeOrg.name?.charAt(0) : ''} /> : <img className='rounded me-50' height={75} width={75} referrerPolicy=\"no-referrer\" src={`https://drive.google.com/thumbnail?id=${activeOrg.imageid}&authuser=0`} alt=\"Organisation Logo\" />}\n                        <h6 className='text-primary invoice-logo'>{activeOrg.name}</h6>\n                      </div>\n                      <p className='card-text mb-25'>{activeOrg.addressline1}</p>\n                      <p className='card-text mb-25'>{activeOrg.addressline2}</p>\n                      <p className='card-text mb-0'>{activeOrg.organizationcity} - {activeOrg.pinzipcode}</p>\n                      <p className='card-text mb-0'>{activeOrg.statename}</p>\n                      <p className='card-text mb-0'>{activeOrg.gstin}</p>\n                    </div>\n                    <div className='invoice-number-date mt-md-0 mt-2'>\n                      <div className='d-flex align-items-center justify-content-md-end mb-1'>\n                        <h4 className='invoice-title'>{name}</h4>\n                        <InputGroup className='input-group-merge invoice-edit-input-group disabled'>\n                          <InputGroupText>\n                            <Hash size={15} />\n                          </InputGroupText>\n                          <Input\n                            type='number'\n                            className='invoice-edit-input'\n                            value={3171}\n                            placeholder='53634'\n                            disabled\n                          />\n                        </InputGroup>\n                      </div>\n                      <div className='d-flex align-items-center mb-1'>\n                        <span className='title '>{name} Date:</span>\n                        <Controller\n                          control={control}\n                          name={`invoiceDate`}\n                          id='invoiceDate'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true }}\n                              className='form-control invoice-edit-input date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                      <div className='d-flex align-items-center'>\n                        <span className='title required'>Due Date:</span>\n                        <Controller\n                          control={control}\n                          name={`paymentDue`}\n                          id='paymentDue'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true }}\n                              className='form-control invoice-edit-input due-date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </CardBody>\n                {/* /Header */}\n\n                <hr className='invoice-spacing' />\n\n                {/* Address and Contact */}\n                <CardBody className='invoice-padding pt-0'>\n                  <Row className='row-bill-to invoice-spacing'>\n                    <Col className='col-bill-to ps-0' xl='6'>\n                      <h6 className='invoice-to-title required'>Profoma Invoice To</h6>\n                      <div className='invoice-customer'>\n                        <Controller\n                          control={control}\n                          name={`contactId`}\n                          id={`contactId`}\n                          render={({ field, ref }) => (\n                            <Select\n                              inputRef={ref}\n                              className={classnames('react-select', { 'is-invalid': errors['contactId'] })}\n                              {...field}\n                              classNamePrefix='select'\n                              options={clientOptions}\n                              value={clientOptions.find(c => { return c.id === field.value })}\n                              onChange={val => { field.onChange(val.id); getClientData(val.id) }}\n                              getOptionLabel={(option) => option.name}\n                              getOptionValue={(option) => option.id}\n                            />\n                          )}\n                        />\n                      </div>\n                      <Col className='pe-0 mt-xl-2' xl='4'>\n                        <table>\n                          <tbody>\n                            <tr>\n                              <td>{selectedClient.billingaddressline1}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddressline2}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddresscity} {selectedClient.billingaddresszip && `-`}  {selectedClient.billingaddresszip}</td>\n                            </tr>\n                            <tr>\n                              <td>{selectedClient.billingaddressstateothers}</td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </Col>\n                    </Col>\n                    <Col className='col-bill-to ps-0' xl='2'></Col>\n                    <Col className='pe-0 mt-xl-0 mt-2' xl='4'>\n                      <h6 className='mb-2'>Payment Details:</h6>\n                      <table>\n                        <tbody>\n                          <tr>\n                            <td className='pe-1'>Bank Name:</td>\n                            <td>\n                              {accDetails.bankName && <span className='fw-bolder'>{accDetails.bankName}</span>}\n                            </td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Account name:</td>\n                            <td>{accDetails.accountHolderName && <span className='fw-bolder'>{accDetails.accountHolderName}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Branch Name:</td>\n                            <td> {accDetails.branchAddress && <span className='fw-bolder'>{accDetails.branchAddress}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Account Type:</td>\n                            <td>{accDetails.accountType && <span className='fw-bolder'>{accountTypeArr[accDetails.accountType]} </span>}</td>\n                          </tr>\n                          {selectedClient.currenciescode &&\n                            <tr>\n                              <td className='pe-1'>Currency code:</td>\n                              <td>{selectedClient.currenciescode}</td>\n                            </tr>\n                          }\n                        </tbody>\n                      </table>\n                    </Col>\n                  </Row>\n                  <Row className='row-bill-to invoice-spacing'>\n                    <Col className='col-bill-to ps-0' xl='6'>\n                      <h6 className='invoice-to-title mt-2 required'>Place Of Supply</h6>\n                      <Col className='invoice-customer' lg={12} >\n                        <Controller\n                          control={control}\n                          name={`placeOfSupplyOthers`}\n                          id={`placeOfSupplyOthers`}\n                          render={({ field }) => (\n                            <Input className='form-control col-12' {...field} />\n                          )}\n                        />\n                      </Col>\n                      {(selectedClient.gstin !== '' && selectedClient.gstin !== undefined) && <div className='mt-1'> GSTIN : {selectedClient.gstin}</div>}\n                    </Col>\n                    <Col className='col-bill-to ps-0' xl='2'></Col>\n                  </Row>\n                </CardBody>\n                {/* /Address and Contact */}\n\n                {/* Product Details */}\n                <CardBody className='invoice-padding invoice-product-details'>\n                  {fields.map((item, index) => {\n                    return (\n                      <div key={item.id} className='repeater-wrapper'>\n                        <Row className='product-details-border'>\n                          <Row className='d-lg-flex position-relative w-100 pe-lg-0 pe-1 py-50' md={12}>\n                            <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2' md={3} sm={12}>\n                              <CardText className='col-title mb-md-50 mb-0'>Item</CardText>\n                              <Controller\n                                control={control}\n                                name={`rows[${index}].serviceId`}\n                                rules={{ required: true }}\n                                render={({ field, ref }) => (\n                                  <Select\n                                    {...field}\n                                    inputRef={ref}\n                                    className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.serviceId })}\n                                    classNamePrefix='select'\n                                    options={serviceOptions}\n                                    value={serviceOptions.find(c => c.id === field.value)}\n                                    onChange={async val => { field.onChange(val.id); await loadItemData(index, false, false, false, false, true); await setRefresTax(true) }}\n                                    getOptionLabel={(option) => option.name}\n                                    getOptionValue={(option) => option.id}\n                                  />\n                                )}\n                              />\n                              {errors.rows?.[index]?.serviceId && <FormFeedback>{errors.rows?.[index]?.serviceId.message}</FormFeedback>}\n\n                            </Col>\n                            <Col lg={4}>\n                              <Controller\n                                id={`rows_${index}_description`}\n                                name={`rows[${index}].description`}\n                                control={control}\n                                render={({ field }) => <Input placeholder='Description' invalid={errors.rows?.[index]?.description && true} onInput={(val) => { field.onChange(val); loadItemData(index, true, false, false, false, false) }} {...field} />}\n                              />\n                            </Col>\n                            <Col className='my-lg-0 my-2' lg='3' sm='12'>\n                              <CardText className='col-title mb-md-2 mb-0'>Price</CardText>\n                              <Controller\n                                id={`rows_${index}_price`}\n                                name={`rows[${index}].price`}\n                                control={control}\n                                render={({ field }) => <Input type='number' id={`input_rows_${index}_price`} onInput={async (val) => { field.onChange(val); await loadItemData(index, false, true, false, false, false); await setRefresTax(true) }} {...field} invalid={errors.rows?.[index]?.price && true} />}\n                              />\n                              {errors.rows?.[index]?.price && <FormFeedback>{errors.rows?.[index]?.price.message}</FormFeedback>}\n                            </Col>\n                            <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                              <CardText className='col-title mb-md-50 mb-0'>Amount</CardText>\n                              {control._formValues.rows[index].subTotalAmount}\n                            </Col>\n                            <Col md={1}>\n                              <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                                <Trash2 size={18} className='cursor-pointer' onClick={() => { removeItem(index) }} />\n                              </div>\n                            </Col>\n                          </Row>\n                          <TaxComponent parentaxCallback={parentaxCallback} refreshTax={refreshTax} taxGroupOptions={taxGroupOptions} mainInd={index} itemAmount={control._formValues.rows[index].price} errors={errors} control={control} />\n                        </Row>\n                      </div>\n                    )\n                  })}\n                  <Row className='mt-1'>\n                    <Col sm='12' className='px-0'>\n                      <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                        <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                      </Button>\n                    </Col>\n                  </Row>\n                </CardBody>\n\n                {/* /Product Details */}\n\n                {/* Invoice Total */}\n                <CardBody className='invoice-padding'>\n                  <Row className='invoice-sales-total-wrapper'>\n                    <Col className='mt-md-0 mt-3' md={{ size: '6', order: 1 }} xs={{ size: 12, order: 2 }}>\n\n                    </Col>\n                    <Col className='d-flex justify-content-end' md={{ size: '6', order: 2 }} xs={{ size: 12, order: 1 }}>\n                      <div className='invoice-total-wrapper'>\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>Pre Tax Amount:</p>\n                          <p className='invoice-total-amount'>{finalSubTotal}</p>\n                        </div>\n\n                        {\n                          invoiceTaxes.map((obj, ind) => {\n                            return (<div key={ind} className='invoice-total-item'>\n                              <p className='invoice-total-title'>{obj?.taxName}</p>\n                              <p className='invoice-total-amount'>{obj?.taxAmount}</p>\n                            </div>)\n                          })\n                        }\n\n                        <hr className='my-50' />\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>Total Payable:</p>\n                          <p className='invoice-total-amount'>{finalTotal}</p>\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Total */}\n\n                <hr className='invoice-spacing mt-0' />\n\n                {/* Invoice Note */}\n                <CardBody className='invoice-padding py-0'>\n                  <Row>\n                    <Col>\n                      <div className='mb-2'>\n                        <Label for='note' className='form-label fw-bold'>\n                          Note:\n                        </Label>\n                        <Controller\n                          id='note'\n                          name='note'\n                          control={control}\n                          render={({ field }) => <Input type=\"textarea\" value={field.value} invalid={errors.note && true} {...field} />}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Note */}\n              </Card>\n\n            </Col>\n            <Col xl={2} md={4} sm={12}>\n              <Card className='invoice-action-wrapper'>\n                <CardBody>\n                  {/* <Button color='primary' block className='mb-75' disabled>\n            Send Invoice\n          </Button>\n          <Button tag={Link} to='/invoice/preview' color='primary' block outline className='mb-75'>\n            Preview\n          </Button> */}\n                  <Button color='primary' type='submit' block outline className='mb-75'>\n                    Save\n                  </Button>\n                  <Button color='warning' block outline tag={Link} to={`/invoice/view/${id}`}>\n                    Cancel\n                  </Button>\n                </CardBody>\n              </Card>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50 required'>Accept payments via</p>\n                  <Controller\n                    control={control}\n                    name={`bankAccountId`}\n                    rules={{ required: true }}\n                    render={({ field, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select mt-1', { 'is-invalid': errors.bankAccountId })}\n                        classNamePrefix='select'\n                        options={accountOptions}\n                        value={accountOptions.find(c => c.id === field.value)}\n                        onChange={(val) => { field.onChange(val.id); bankAccountfn(val.id) }}\n                        getOptionLabel={(option) => option.accountHolderName}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n                  />\n                </div>\n              </div>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50'>Select Employee</p>\n                  <Controller\n                    control={control}\n                    name=\"reviewer\"\n                    id=\"reviewer\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.reviewer })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={userOptions}\n                        isMulti={true}\n                        defaultValue={participants}\n                        value={value} // set selected values\n                        onChange={handleUserChange}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                        styles={colourStyles}\n                      />\n                    )}\n\n                  />\n                </div>\n              </div>\n            </Col>\n          </Fragment >\n        </Row>\n      </form >\n    </UILoader>\n  )\n}\n\nexport default AddCard\n","// ** React Imports\nimport { useEffect, useState } from 'react'\nimport { useParams, Link } from 'react-router-dom'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\n\n// ** Reactstrap Imports\nimport { Alert, Row, Col } from 'reactstrap'\nimport { activeOrganization } from '@src/helper/sassHelper'\n// ** Invoice Edit Components\nimport EditCard from './EditCard'\nimport EditCardINT from './EditCardINT.js'\nconst activeOrg = activeOrganization()\nconst InvoiceEdit = () => {\n  // ** Hooks\n  const { id } = useParams()\n\n  // ** States\n  const [data, setData] = useState(null)\n\n  // ** Get invoice on mount based on id\n  const getInvoice = async () => {\n    axios.post('/taskinvoices/get', { id }).then((res) => {\n      setData(res.data.taskinvoices)\n    }).catch((err) => { console.log(err) })\n\n  }\n\n  useEffect(() => {\n    getInvoice()\n  }, [])\n\n  return data !== null && data !== undefined ? (\n    <div className='invoice-edit-wrapper'>\n      <Row className='invoice-edit'>\n        <Col xl={12} md={8} sm={12}>\n          {activeOrg.countryshortname === 'IN' ? <EditCard data={data} /> : <EditCardINT data={data} />}\n        </Col>\n      </Row>\n    </div>\n  ) : (\n    <Alert color='danger'>\n      <h4 className='alert-heading'>Invoice not found</h4>\n      <div className='alert-body'>\n        Invoice with id: {id} doesn't exist. Check list of all invoices:{' '}\n        <Link to='/apps/invoice/list'>Invoice List</Link>\n      </div>\n    </Alert>\n  )\n}\n\nexport default InvoiceEdit\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","export const calculateTax = (amount, taxRateInPercentage, TaxType) => {\n    let calculatedTax = 0\n    if (TaxType === 1) { //Inclusive\n        calculatedTax = parseFloat(amount) - (parseFloat(amount) * (100 / (100 + parseFloat(taxRateInPercentage))))\n        // calculatedTax = parseFloat(amount) - parseFloat(calculatedTax);\n\n    } else if (TaxType === 2) { //Exclusive\n        calculatedTax = (parseFloat(amount) * parseFloat(taxRateInPercentage)) / 100\n    }\n    return parseFloat(calculatedTax)\n}\n\nexport const parser = (str) => {\n\n    return JSON.parse(Array.isArray(str) ? JSON.stringify(str).replace(/\\\\/g, '') : str.replace(/\\\\/g, ''))\n\n}"],"sourceRoot":""}