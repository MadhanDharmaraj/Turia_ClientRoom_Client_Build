{"version":3,"sources":["views/pages/account-settings/Invoice/store/index.js","views/pages/account-settings/Invoice/TaxRateSetting.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["getData","createAsyncThunk","organizationId","axios","post","response","data","organizationprefernces","addOrgPreference","createSlice","name","initialState","accounts","total","params","allData","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","activeOrgId","activeOrganizationid","userId","orgUserId","activeOrg","activeOrganization","MySwal","withReactContent","Swal","taxRate","useState","formModal","setFormModal","selected","setSelected","block","setBlock","Loader","schema","yup","shape","required","percentage","id","createdby","default","updatedby","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","setValue","dispatch","useDispatch","setData","defaulttaxid","setDefaultTaxId","getTaxList","country","countryshortname","then","res","taxgroups","catch","err","console","log","useEffect","resetForm","closeModal","getRow","fieldLabel","fieldName","reqflag","md","sm","className","classnames","for","render","field","invalid","message","onSubmit","toast","success","position","blocking","loader","size","color","outline","onClick","map","item","index","type","value","defaultChecked","onChange","updatedBy","defaultTaxId","error","card","groupname","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","result","dismiss","DismissReason","cancel","length","isOpen","toggle","Object","keys","key","tag","Form","xs","UILoader","props","children","overlayColor","Tag","style","backgroundColor","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/110.45700440.chunk.js","sourcesContent":["// ** Redux Imports\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\n// ** Axios Imports\nimport axios from '@src/configs/axios/axiosConfig'\n\nexport const getData = createAsyncThunk('appInvoiceSetting/getData', async organizationId => {\n  const response = await axios.post(`/organizationprefernces/get`, { organizationId })\n  return {\n    data: response.data.organizationprefernces\n  }\n})\nexport const addOrgPreference = createAsyncThunk('appInvoiceSetting/addOrgPreference', async (data, { }) => {\n\n  await axios.post(`/organizationprefernces/createandupdate`, data)\n  return ''\n\n})\n\nexport const appInvoiceAccountSlice = createSlice({\n  name: 'appInvoiceSetting',\n  initialState: {\n    accounts: [],\n    total: 1,\n    params: {},\n    allData: []\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(getData.fulfilled, (state, action) => {\n        state.accounts = action.payload.data\n        state.params = action.payload.params\n      })\n\n  }\n})\n\nexport default appInvoiceAccountSlice.reducer\n","// ** React Imports\nimport {\n  Button,\n  Card,\n  CardBody,\n  Col,\n  Form,\n  FormFeedback,\n  Input,\n  Label,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  Row,\n  Table\n} from 'reactstrap'\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport axios from '@src/configs/axios/axiosConfig'\nimport { useEffect, Fragment, useState } from 'react'\nimport toast from 'react-hot-toast'\nimport { getData } from './store/index'\nimport { useForm, Controller } from \"react-hook-form\"\nimport { useDispatch } from 'react-redux'\nimport classnames from 'classnames'\nimport { Edit, Trash } from 'react-feather'\nimport { activeOrganizationid, orgUserId, activeOrganization } from '@src/helper/sassHelper'\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\nconst activeOrg = activeOrganization()\nconst MySwal = withReactContent(Swal)\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n\nconst taxRate = () => {\n  // ** States\n  const [formModal, setFormModal] = useState(false)\n  const [selected, setSelected] = useState(null)\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const schema = yup.object().shape({\n    name: yup.string().required(\"Please Enter Name\"),\n    percentage: yup.string().required(\"Please Enter Tax Percentage\"),\n    id: yup.string(),\n    createdby: yup.string().default(userId),\n    updatedby: yup.string().default(userId),\n    organizationId: yup.string().default(activeOrgId)\n  })\n\n  const { handleSubmit, formState: { errors }, control, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const setDefaultTax = (id) => {\n    setBlock(true)\n    axios.post('/organizationprefernces/createandupdate', { organizationId: activeOrgId, updatedBy: userId, defaultTaxId: id })\n      .then(() => {\n        setBlock(false)\n        toast.success('Tax Rate Upated Successfully', { position: 'bottom-right' })\n      })\n      .catch(() => {\n        toast.error('Event Failed!', { position: 'bottom-right' })\n      })\n  }\n  const dispatch = useDispatch()\n  const [data, setData] = useState([])\n  const [defaulttaxid, setDefaultTaxId] = useState(null)\n\n  const getTaxList = () => {\n    axios.post('/taxgroups/list', { country: activeOrg.countryshortname })\n      .then((res) => {\n        setData(res.data.taxgroups)\n      })\n      .catch((err) => { console.log(err) })\n  }\n\n  const deletefn = (id) => {\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await axios.post('/taxgroups/delete', { id, updatedBy: userId })\n        getTaxList()\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'Document Status has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  useEffect(async () => {\n    const response = await dispatch(getData(activeOrgId))\n    const res = response.payload?.data\n    setDefaultTaxId(res?.defaulttaxid || '')\n\n    await getTaxList()\n\n  }, [])\n\n  const resetForm = () => {\n    setValue('name', '')\n    setValue('percentge', '')\n    setValue('id', '')\n    setValue('organizationId', activeOrgId)\n    setValue('createdby', userId)\n    setValue('updatedby', userId)\n  }\n\n  const closeModal = () => {\n    setFormModal(false)\n    resetForm()\n  }\n\n  const getRow = (fieldLabel, fieldName, reqflag = true) => {\n    return (\n      <Col md={12}>\n        <Label sm='12' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Col>\n    )\n  }\n\n  const openModal = () => {\n    setFormModal(true)\n    resetForm()\n  }\n\n  const openEditModal = card => {\n    setSelected(card)\n    setFormModal(true)\n    setValue('name', card.groupname)\n    setValue('id', card.id)\n    setValue('percentage', card.percentage)\n    setValue('organizationId', activeOrgId)\n    setValue('createdby', userId)\n    setValue('updatedby', userId)\n\n  }\n\n  const onSubmit = async data => {\n    if (selected !== null) {\n      axios.post('/taxgroups/update', data)\n        .then(() => {\n          getTaxList()\n          closeModal()\n          toast.success('Documents Place Updated Successfully', { position: 'bottom-right' })\n        })\n        .catch((err) => { console.log(err) })\n      setSelected(null)\n    } else {\n      axios.post('/taxgroups/create', data)\n        .then(() => {\n          getTaxList()\n          closeModal()\n          toast.success('Document Place Added Successfully', { position: 'bottom-right' })\n        })\n        .catch((err) => { console.log(err) })\n    }\n\n  }\n\n  return (\n    <UILoader blocking={block} loader={<Loader />}>\n      <Card>\n        <CardBody className='py-25'>\n          <Col className='d-flex justify-content-between'>\n            <h5>Tax Rates</h5>\n            {activeOrg.countryshortname !== 'IN' &&\n              <Button size='sm' color='primary' outline onClick={() => openModal()}>Add</Button>\n            }\n          </Col>\n        </CardBody>\n        <CardBody>\n          <Table>\n            <thead>\n              <tr>\n                <th>Default</th>\n                <th>Tax Rate</th>\n                <th>Percentage</th>\n                {activeOrg.countryshortname !== 'IN' &&\n                  <th>Actions</th>\n                }\n              </tr>\n            </thead>\n            <tbody>\n              {data.map((item, index) => {\n                return (\n                  <tr key={index}>\n                    <td>\n                      <Input type='radio' value={item.id} name='taxrate' defaultChecked={defaulttaxid === item.id} onChange={() => { setDefaultTax(item.id) }} />\n                    </td>\n                    <td>{item.name}</td>\n                    <td>{item.percentage || 0} %</td>\n                    {activeOrg.countryshortname !== 'IN' &&\n                      <td>\n                        <div className='d-flex'>\n                          <Col onClick={() => { openEditModal(item) }} className='cursor-pointer'>\n                            <Edit size={16} />\n                          </Col>\n                          <Col onClick={() => { deletefn(item.id) }} className='cursor-pointer'>\n                            <Trash size={16} />\n                          </Col>\n                        </div>\n                      </td>\n                    }\n                  </tr>\n                )\n              })\n              }\n            </tbody>\n          </Table>\n          {data.length === 0 &&\n            <Row className='text-center mt-1'>\n              <h5>No Records</h5>\n            </Row>\n          }\n\n          <Modal isOpen={formModal} toggle={() => setFormModal(!formModal)} className='modal-dialog-centered'>\n            <ModalHeader toggle={() => closeModal()}>Document In - Out</ModalHeader>\n            <ModalBody>\n              {\n                Object.keys(errors).map((key) => {\n\n                  return <FormFeedback key={key}>${errors[key]?.message}</FormFeedback>\n\n                })\n              }\n              <Row tag={Form} className='gx-2 gy-1' onSubmit={handleSubmit(onSubmit)}>\n\n                {getRow('Tax Name', 'name', true)}\n\n                {getRow('Tax Percentage', 'percentage', true)}\n\n                <Col className='mt-2 pt-1' xs={12}>\n                  <Button type='submit' className='me-1' color='primary'>\n                    Submit\n                  </Button>\n                  <Button className='me-1' color='warning' onClick={() => closeModal()}>\n                    Cancel\n                  </Button>\n                </Col>\n\n              </Row>\n            </ModalBody>\n          </Modal>\n\n        </CardBody>\n      </Card>\n    </UILoader>\n  )\n}\n\nexport default taxRate\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}