{"version":3,"sources":["views/pages/account-settings/Invoice/store/invoiceaccount.js","views/pages/account-settings/Invoice/InvoiceAccounts.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["userId","orgUserId","getInvoiceAccount","createAsyncThunk","params","axios","post","response","data","transactionaccounts","addAccount","dispatch","getState","invoiceaccount","updateAccount","deleteAccount","id","updatedBy","updatePrimary","createSlice","name","initialState","total","allData","accounts","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","activeOrg","activeOrganization","activeOrgId","activeOrganizationid","InvoiceAccounts","MySwal","withReactContent","Swal","useState","setData","selected","setSelected","block","setBlock","Loader","formModal","setFormModal","store","useSelector","useDispatch","schema","yup","shape","organizationId","default","bankName","required","accountBusinessName","countryCode","countryshortname","ifscCode","when","is","then","accountNumber","branchAddress","accountType","description","isPrimary","bankCode","accountHolderName","createdBy","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","reset","setValue","closeModal","onSubmit","eventname","toast","success","position","useEffect","primaryAcc","find","acc","Object","keys","length","formatAccountName","_formValues","num","temp","substr","accountTypeOptions","getRow","fieldLabel","fieldName","reqflag","md","sm","className","classnames","for","render","field","invalid","onInput","message","blocking","loader","lg","color","size","onClick","Array","isArray","map","card","index","parseInt","openEditModal","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","result","value","dismiss","DismissReason","cancel","tag","isOpen","toggle","key","Form","options","ref","inputRef","classNamePrefix","c","onChange","val","getOptionLabel","option","getOptionValue","getSelectRow","type","xs","UILoader","props","children","overlayColor","Tag","style","backgroundColor","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/77.9ca63446.chunk.js","sourcesContent":["// ** Redux Imports\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\n// ** Axios Imports\nimport axios from '@src/configs/axios/axiosConfig'\nimport { orgUserId } from '@src/helper/sassHelper'\nconst userId = orgUserId()\n\nexport const getInvoiceAccount = createAsyncThunk('appInvoiceSetting/getInvoiceAccount', async params => {\n  const response = await axios.post(`/transactionaccounts/list`, params)\n  return {\n    params,\n    data: response.data.transactionaccounts\n  }\n})\n\nexport const addAccount = createAsyncThunk('appInvoiceSetting/addAccount', async (data, { dispatch, getState }) => {\n\n  await axios.post(`/transactionaccounts/create`, data)\n  await dispatch(getInvoiceAccount(getState().invoiceaccount.params))\n  return []\n\n})\n\nexport const updateAccount = createAsyncThunk('appInvoiceSetting/updateAccount', async (data, { dispatch, getState }) => {\n  await axios.post(`/transactionaccounts/update`, data)\n  await dispatch(getInvoiceAccount(getState().invoiceaccount.params || {}))\n  return []\n})\n\nexport const deleteAccount = createAsyncThunk('appInvoiceSetting/updateAccount', async (id, { dispatch, getState }) => {\n  await axios.post('/transactionaccounts/delete', { id, updatedBy: userId })\n  await dispatch(getInvoiceAccount(getState().invoiceaccount.params || {}))\n  return ''\n})\n\nexport const updatePrimary = createAsyncThunk('appInvoiceSetting/updatePrimary', async (id, { dispatch, getState }) => {\n  await axios.post('/transactionaccounts/updateprimary', { id, updatedBy: userId })\n  await dispatch(getInvoiceAccount(getState().invoiceaccount?.params || {}))\n  return ''\n})\n\nexport const appInvoiceAccountSlice = createSlice({\n  name: 'appInvoiceSetting',\n  initialState: {\n    data: [],\n    total: 1,\n    params: {},\n    allData: [],\n    accounts: []\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(getInvoiceAccount.fulfilled, (state, action) => {\n        state.accounts = action.payload.data\n        state.params = action.payload.params || {}\n      })\n\n  }\n})\n\nexport default appInvoiceAccountSlice.reducer\n","// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\n\n// ** Reactstrap Imports\nimport {\n  Row,\n  Col,\n  Card,\n  Form,\n  Badge,\n  Label,\n  Input,\n  Button,\n  CardBody,\n  FormFeedback,\n  Table,\n  Modal,\n  ModalBody,\n  ModalHeader,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from 'reactstrap'\nimport Select from 'react-select'\nimport { useForm, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { getInvoiceAccount, addAccount, updateAccount, deleteAccount, updatePrimary } from './store/invoiceaccount'\nimport { activeOrganizationid, orgUserId, activeOrganization } from '@src/helper/sassHelper'\n\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nconst activeOrg = activeOrganization()\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { useDispatch, useSelector } from 'react-redux'\nimport toast from 'react-hot-toast'\nimport { CheckCircle, Edit, MoreVertical, Plus, Trash } from 'react-feather'\n\nconst InvoiceAccounts = () => {\n  const MySwal = withReactContent(Swal)\n  const [data, setData] = useState([])\n  const [selected, setSelected] = useState(null)\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const [formModal, setFormModal] = useState(false)\n  const store = useSelector(state => state.invoiceaccount)\n  const dispatch = useDispatch()\n\n  const schema = yup.object().shape({\n    organizationId: yup.string().default(activeOrgId),\n    bankName: yup.string().required('Please Enter Bank Name'),\n    accountBusinessName: yup.string().required('Please Enter Account Name'),\n    countryCode: yup.string().default(activeOrg.countryshortname),\n    ifscCode: yup.string().default('').when(\"countryCode\", { is: (countryCode) => countryCode === 'IN', then: yup.string().required('Please IFSC Code') }),\n    accountNumber: yup.string().required('Please Enter Account Number'),\n    branchAddress: yup.string().default('').when(\"countryCode\", { is: (countryCode) => countryCode === 'IN', then: yup.string().required('Please Enter Branch Name') }),\n    accountType: yup.string().required('Please Select Account Type'),\n    description: yup.string(),\n    isPrimary: yup.boolean().default(false),\n    bankCode: yup.string().default('1'),\n    accountHolderName: yup.string(),\n    updatedBy: yup.string().default(userId),\n    createdBy: yup.string().default(userId)\n  })\n\n  const { handleSubmit, formState: { errors }, control, reset, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const deletefn = (id) => {\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteAccount(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'Account has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        await dispatch(getInvoiceAccount({}))\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  const closeModal = () => {\n    setFormModal(false)\n    reset({\n      organizationId: activeOrgId,\n      bankName: '',\n      id: null,\n      accountBusinessName: '',\n      ifscCode: '',\n      accountNumber: '',\n      branchAddress: '',\n      accountType: 1,\n      description: '',\n      isPrimary: '',\n      bankCode: '',\n      accountHolderName: ''\n    })\n  }\n\n  const onSubmit = async data => {\n    setBlock(true)\n    let eventname = ''\n    if (selected !== null) {\n      await dispatch(updateAccount(data))\n      setSelected(null)\n      eventname = 'Added'\n    } else {\n      await dispatch(addAccount(data))\n      eventname = 'Updated'\n    }\n    setBlock(false)\n    closeModal()\n    toast.success(`Bank Account ${eventname} Succesfully`, { position: 'bottom-right' })\n    await dispatch(getInvoiceAccount({}))\n\n  }\n\n  useEffect(async () => {\n    await dispatch(getInvoiceAccount({}))\n  }, [])\n\n  useEffect(() => {\n    const primaryAcc = store.accounts.find((acc) => acc.isPrimary) ?? {}\n    setValue('isPrimary', Object.keys(primaryAcc).length === 0)\n    setData(store.accounts)\n  }, [store.accounts])\n\n  const formatAccountName = () => {\n    const name = control._formValues.bankName\n    const num = control._formValues.accountNumber\n    if (num) {\n      const temp = `${name} - XXXX${num.substr(-4, 4)}`\n      setValue('accountHolderName', temp)\n    }\n\n  }\n\n  const accountTypeOptions = [{ id: 1, name: \"Savings\" }, { id: 2, name: `${activeOrg.countryshortname === 'IN' ? 'Current' : 'Checking'}` }]\n\n  const getRow = (fieldLabel, fieldName, reqflag = true) => {\n    return (\n      <Col md={6}>\n        <Label sm='12' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field}\n              onInput={() => { if (fieldName === 'bankName' || fieldName === 'accountNumber') { formatAccountName() } }} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Col>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false) => {\n    return (\n\n      <Col md={6}>\n        <Label sm='12' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName} >\n          {fieldLabel}\n        </Label>\n        <Col>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                classNamePrefix='select'\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                onChange={val => { return field.onChange(val.id) }}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Col>\n\n    )\n  }\n\n  const openEditModal = card => {\n    setSelected(card)\n    setFormModal(true)\n    reset({\n      organizationId: activeOrgId,\n      bankName: card.bankName,\n      id: card.id,\n      accountBusinessName: card.accountBusinessName,\n      ifscCode: card.ifscCode,\n      accountNumber: card.accountNumber,\n      branchAddress: card.branchAddress,\n      accountType: parseInt(card.accountType),\n      description: card.description,\n      isPrimary: card.isPrimary,\n      bankCode: card.bankCode,\n      accountHolderName: card.accountHolderName\n    })\n  }\n\n  const updateprimary = (id) => {\n    dispatch(updatePrimary(id))\n  }\n\n  return (\n    <Fragment>\n      <UILoader blocking={block} loader={<Loader />}>\n        <Card>\n          <CardBody className='py-25'>\n            <Row className='gx-4'>\n              <Col lg='12' className='mt-2 mt-lg-0'>\n                <Row className='mb-50'>\n                  <Col>\n                    <Button color='primary' size='sm' onClick={() => { setFormModal(true) }}> <Plus size={15} />Add Account</Button>\n                  </Col>\n                </Row>\n                <Table className='table table-hover table-bordered'>\n                  <thead>\n                    <tr>\n                      <th>Bank Name</th>\n                      <th>Account Holder Name</th>\n                      <th>Status</th>\n                      <th>Account Name </th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {Array.isArray(data) && data.map((card, index) => {\n                      return (\n                        <tr\n                          key={index}\n                        >\n                          <td className='text-primary'>{card.bankName}</td>\n                          <td>\n                            {card.accountBusinessName}</td>\n                          <td>\n                            {card.isPrimary && (\n                              <Badge color='light-primary' className='ms-50'>\n                                Primary\n                              </Badge>\n                            )}\n                          </td>\n                          <td className='card-number '>\n                            {card.accountHolderName}\n                          </td>\n                          <td className='text-start text-lg-end'>\n                            <div className='d-flex align-items-center order-sm-0 order-1 mt-1 mt-sm-0'>\n                              {card.accountHolderName !== 'Cash' &&\n                                <div className='d-flex order-sm-0 order-1 mt-1 mt-sm-0'>\n                                  <Edit onClick={() => openEditModal(card)} size={14} />\n                                  {!card.isPrimary &&\n                                    <div className='d-flex'>\n                                      <Trash className='ms-1 me-1' onClick={() => { deletefn(card.id) }} size={14}></Trash>\n                                    </div>\n                                  }\n                                </div>\n                              }\n                              {!card.isPrimary &&\n                                <UncontrolledDropdown>\n                                  <DropdownToggle tag='div' className='btn btn-sm p-0'>\n                                    <MoreVertical size={14} className='cursor-pointer' />\n                                  </DropdownToggle>\n                                  <DropdownMenu>\n                                    <DropdownItem className='w-100' onClick={() => { updateprimary(card.id) }}>\n                                      <CheckCircle size={14} className='me-50' />\n                                      <span className='align-middle'>Mark as Primary</span>\n                                    </DropdownItem>\n                                  </DropdownMenu>\n                                </UncontrolledDropdown>\n                              }\n                            </div>\n                          </td>\n                        </tr>\n                      )\n                    })}\n                  </tbody>\n                </Table>\n              </Col>\n\n              <Modal isOpen={formModal} toggle={() => setFormModal(!formModal)} className='modal-dialog-centered'>\n                <ModalHeader toggle={() => closeModal()}>Invoice Account</ModalHeader>\n                <ModalBody>\n                  <Col lg='12'>\n                    {\n                      Object.keys(errors).map((key) => {\n\n                        return <FormFeedback key={key}>${errors[key]?.message}</FormFeedback>\n\n                      })\n                    }\n                    <Row tag={Form} className='gx-2 gy-1' onSubmit={handleSubmit(onSubmit)}>\n\n                      {getRow('Bank Name', 'bankName')}\n                      {getRow('Account Name', 'accountBusinessName')}\n                      {getRow('Account Number', 'accountNumber')}\n\n                      {activeOrg.countryshortname === 'IN' &&\n                        getRow('IFSC Code', 'ifscCode')\n                      }\n                      {activeOrg.countryshortname === 'IN' ? getRow('Branch Name', 'branchAddress') : getRow('Branch Name', 'branchAddress', false)}\n\n                      {getSelectRow('Account Type', 'accountType', accountTypeOptions, true)}\n\n                      <Col md={12}>\n                        <Label className='form-label' for='description'>\n                          Description\n                        </Label>\n                        <Controller\n                          id='description'\n                          name='description'\n                          control={control}\n                          render={({ field }) => <Input type=\"textarea\" invalid={errors.description && true} {...field} />}\n                        />\n                        {errors.description && <FormFeedback>{errors.description.message}</FormFeedback>}\n\n                      </Col>\n                      <Col className='mt-2 pt-1' xs={12}>\n                        <Button type='submit' className='me-1' color='primary'>\n                          Submit\n                        </Button>\n                        <Button type='button' className='me-1' color='warning' onClick={() => closeModal()}>\n                          Cancel\n                        </Button>\n                      </Col>\n\n                    </Row>\n                  </Col>\n                </ModalBody>\n              </Modal>\n            </Row>\n          </CardBody>\n        </Card>\n      </UILoader>\n    </Fragment>\n  )\n}\n\nexport default InvoiceAccounts\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}