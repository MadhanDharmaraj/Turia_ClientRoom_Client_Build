{"version":3,"sources":["views/apps/client/edit/EditCard.js","views/apps/client/edit/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["activeOrg","activeOrganization","userId","orgUserId","EditCard","useState","block","setBlock","Loader","colourStyles","multiValue","styles","backgroundColor","MySwal","withReactContent","Swal","phoneRegExp","navigate","useNavigate","store","useSelector","state","client","dispatch","useDispatch","businessEntityOptions","setBusinessEntityOptions","stateOptions","setStateOptions","countryOptions","setCountryOptions","currencyOptions","setCurrencyOptions","gstRegistrationTypeOptions","setGstRegistrationTypeOptions","clientInfo","setClientInfo","contactId","setConatctId","clientDetails","setClientDetails","userOptions","setUserOptions","employeeDefaultValue","setEmployeeDefaultValue","countryshortname","countryCode","setCountryCode","schema","yup","shape","updatedBy","default","organization","id","contactPersonName","required","registrationNo","nullable","employeeList","name","referredby","contactNumber","matches","message","excludeEmptyString","email","organizationName","businessEntity","when","is","then","gstRegistrationType","gstin","placeOfSupply","placeOfSupplyOther","stateothers","currency","currencyid","billingCountryCode","billingAddressLine1","billingAddressLine2","billingAddressCity","billingAddressState","billingAddressStateOthers","billingAddressCountry","countryid","billingAddressZip","contact_info","of","createdBy","designation","adharnumber","dinnumber","pannumber","contactnumber","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","reset","control","errors","formState","setValue","useParams","useFieldArray","keyName","fields","append","remove","saveContactInfo","data","rows","updateContactInfo","onSubmit","temp","updateClient","predata","deletefun","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","result","value","deleteContactInfo","dismiss","DismissReason","cancel","removeItem","ind","undefined","tempid","_formValues","flg","getOrganizationUsers","axios","post","response","arr","organizationusers","catch","err","console","log","getClientInfo","getConatctInfo","getClientData","getClient","payload","handleEmployeeChange1","e","temparr","Array","isArray","map","x","filter","id1","some","id2","useEffect","Object","keys","length","uniqueIdentity","uniqueidentity","contactpersonname","organizationid","registrationno","businessentityid","gstregistrationtypeid","placeofsupplyid","stateid","billingaddressline1","billingaddressline2","billingaddresscountry","billingaddressstate","billingaddresszip","billingaddresscity","billingaddressstateothers","placeofsupplyothers","billingaddresscountriesshorcode","list","tempArr","handleEmployeeChange","employeelist","clientInformations","forEach","obj","businessentities","countries","currencies","gstregistrationtypes","states","getRow","fieldLabel","fieldName","reqflag","colFlag","className","sm","size","classnames","for","render","field","invalid","getSelectRow","options","ref","inputRef","classNamePrefix","find","c","getOptionLabel","option","getOptionValue","onChange","val","shortname","setPrimaryDetails","index","target","checked","primarystatus","blocking","loader","ErrorText","key","push","renderError","md","lg","isMulti","item","i","type","placeholder","onInput","defaultChecked","onClick","color","contactid","outline","tag","Link","to","ClientEdit","xl","UILoader","props","children","overlayColor","Tag","style","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/65.b1a595c6.chunk.js","sourcesContent":["// ** React Imports\nimport { useState, useEffect, Fragment } from 'react'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport classnames from 'classnames'\nimport { useDispatch, useSelector } from 'react-redux'\n// ** Custom Components\nimport { updateClient, updateContactInfo, getClient, getConatctInfo, deleteContactInfo } from '../store'\nimport axios from '@src/configs/axios/axiosConfig'\n\nimport { X, Plus } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { activeOrganization, orgUserId } from '@src/helper/sassHelper'\n// ** Reactstrap Imports\nimport { Row, Col, Card, Label, Button, CardBody, CardText, Input, FormFeedback, CardTitle, CardHeader } from 'reactstrap'\n\n// ** Styles\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\nconst EditCard = () => {\n\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const colourStyles = {\n    multiValue: (styles, { }) => {\n\n      return {\n        ...styles,\n        backgroundColor: '#7367f0'\n      }\n    }\n  }\n\n  // ** States\n  const MySwal = withReactContent(Swal)\n  const phoneRegExp = /^[0-9\\- ]{10,10}$/\n  const zipcodeExp = /^[0-9\\- ]{6,6}$/\n  const navigate = useNavigate({})\n  const store = useSelector(state => state.client)\n  const dispatch = useDispatch()\n  const [businessEntityOptions, setBusinessEntityOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [countryOptions, setCountryOptions] = useState([])\n  const [currencyOptions, setCurrencyOptions] = useState([])\n  const [gstRegistrationTypeOptions, setGstRegistrationTypeOptions] = useState([])\n  const [clientInfo, setClientInfo] = useState([])\n  const [contactId, setConatctId] = useState(null)\n  const [clientDetails, setClientDetails] = useState({})\n  const [userOptions, setUserOptions] = useState([])\n  const [employeeDefaultValue, setEmployeeDefaultValue] = useState([])\n  const [countryCode, setCountryCode] = useState(activeOrg.countryshortname)\n\n  const schema = yup.object().shape({\n    updatedBy: yup.string().default(userId),\n    organization: yup.string().default(activeOrg.id),\n    contactPersonName: yup.string().required(\"Please Enter a Contact Person Name\"),\n    registrationNo: yup.string().default(\"\").nullable(),\n    employeeList: yup.array().default([]),\n    name: yup.string().required(\"Please Enter Business Name.\").default(''),\n    referredby: yup.string().nullable().default(''),\n    contactNumber: yup.string().default('').matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true }).nullable(),\n    email: yup.string().email(\"Please Enter valid Email\").default(\"\").nullable(),\n    countryCode: yup.string().default(activeOrg.countryshortname),\n    organizationName: yup.string().default(activeOrg.name),\n    businessEntity: yup.string().when(\"countryCode\", { is: (countryCode) => countryCode === 'IN', then: yup.string().required('Please Select Business Entity') }),\n    gstRegistrationType: yup.string().nullable(),\n    gstin: yup.string().nullable(),\n    placeOfSupply: yup.string().default(''),\n    placeOfSupplyOther: yup.string().default(activeOrg.stateothers || ''),\n    currency: yup.string().default(activeOrg.currencyid),\n    billingCountryCode: yup.string().default(''),\n    billingAddressLine1: yup.string().nullable(),\n    billingAddressLine2: yup.string().nullable(),\n    billingAddressCity: yup.string().nullable(),\n    billingAddressState: yup.string().default(''),\n    billingAddressStateOthers: yup.string().default(activeOrg.stateothers || ''),\n    billingAddressCountry: yup.string().default(activeOrg.countryid),\n    billingAddressZip: yup.string().matches(zipcodeExp, { message: 'Zip Code is not valid', excludeEmptyString: true }).nullable(''),\n    contact_info: yup.array().of(\n      yup.object().shape({\n        createdBy: yup.string().default(userId),\n        name: yup.string().nullable(),\n        email: yup.string().email().nullable(),\n        designation: yup.string().nullable(),\n        adharnumber: yup.string().nullable(),\n        dinnumber: yup.string().nullable(),\n        pannumber: yup.string().nullable(),\n        contactnumber: yup.string().nullable().matches(phoneRegExp, { message: 'Phone number is not valid', excludeEmptyString: true })\n      })\n    )\n  })\n\n  const { handleSubmit, reset, control, formState: { errors }, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n  const { id } = useParams()\n  const { fields, append, remove } = useFieldArray({ name: 'contact_info', control, keyName: 'rowid' })\n\n  const saveContactInfo = async () => {\n\n    const data = { rows: clientInfo }\n    await dispatch(updateContactInfo(data))\n    navigate(`/clients/view/${contactId}`)\n\n  }\n\n  const onSubmit = async (data) => {\n\n    setBlock(true)\n\n    const temp = data.contact_info || []\n    delete data.contact_info\n    const id = clientDetails.id\n    await dispatch(updateClient({ data, id }))\n\n    setClientInfo(predata => ([...predata, ...temp]))\n\n  }\n\n  const deletefun = (id) => {\n\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteContactInfo(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'Contact has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  const addItem = (() => {\n    append({ id: '', name: '', email: '', contactnumber: '', contactid: id, organizationid: activeOrg.id, designation: '', primarystatus: false, adharnumber: '', dinnumber: '', pannumber: '' })\n  })\n\n  const removeItem = async (ind) => {\n    const tempid = control._formValues.contact_info[ind].id\n    let flg\n    if (tempid !== undefined) {\n      flg = await deletefun(tempid)\n    }\n    if (flg) {\n      remove(ind)\n    }\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown').then(response => {\n      const arr = response.data\n      setUserOptions(arr.organizationusers)\n    }).catch((err) => {\n      console.log(err)\n    })\n\n  }\n\n  const getBusineessEntity = () => {\n    axios.post('/businessentities/list').then(response => {\n      const arr = response.data\n      setBusinessEntityOptions(arr.businessentities)\n    })\n  }\n\n  const getCountries = () => {\n    axios.post('/countries/dropdown').then(response => {\n      const arr = response.data\n      setCountryOptions(arr.countries)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getCurrency = () => {\n    axios.post('/currencies/dropdown').then(response => {\n      const arr = response.data\n      setCurrencyOptions(arr.currencies)\n    })\n  }\n\n  const getGSTRegType = () => {\n    axios.post('/gstregistrationtypes/list').then(response => {\n      const arr = response.data\n      setGstRegistrationTypeOptions(arr.gstregistrationtypes)\n    })\n  }\n\n  const getClientInfo = async () => {\n    await dispatch(getConatctInfo(contactId))\n\n  }\n\n  const getClientData = async () => {\n    const client = await dispatch(getClient(id))\n    setClientDetails(client.payload)\n  }\n\n  // handle onChange event of the dropdown\n  const handleEmployeeChange = (list) => {\n    const tempArr = list ?? []\n    const temp = userOptions.filter(({ id: id1 }) => tempArr.some(id2 => id2 === id1))\n    setEmployeeDefaultValue(temp)\n  }\n\n  const handleEmployeeChange1 = (e) => {\n    const temparr = Array.isArray(e) ? e.map(x => x.id) : []\n    const temp = userOptions.filter(({ id: id1 }) => temparr.some(id2 => id2 === id1))\n    setEmployeeDefaultValue(temp)\n    setValue('employeeList', temparr)\n  }\n\n  useEffect(() => {\n\n    if (Object.keys(clientDetails).length > 0) {\n      reset({\n        updatedBy: userId,\n        uniqueIdentity: clientDetails.uniqueidentity,\n        contactPersonName: clientDetails.contactpersonname,\n        organization: clientDetails.organizationid,\n        name: clientDetails.name,\n        referredby: clientDetails.referredby,\n        registrationNo: clientDetails.registrationno,\n        contactNumber: clientDetails.contactnumber,\n        businessEntity: clientDetails.businessentityid,\n        email: clientDetails.email,\n        gstRegistrationType: clientDetails.gstregistrationtypeid,\n        gstin: clientDetails.gstin || '',\n        placeOfSupply: clientDetails.placeofsupplyid || activeOrg.stateid,\n        currency: clientDetails.currencyid || activeOrg.currencyid || '',\n        billingAddressLine1: clientDetails.billingaddressline1 || '',\n        billingAddressLine2: clientDetails.billingaddressline2 || '',\n        billingAddressCountry: clientDetails.billingaddresscountry || activeOrg.countryid,\n        billingAddressState: clientDetails.billingaddressstate || activeOrg.stateid,\n        billingAddressZip: clientDetails.billingaddresszip || '',\n        billingAddressCity: clientDetails.billingaddresscity || '',\n        billingAddressStateOthers: clientDetails.billingaddressstateothers || '',\n        placeOfSupplyOther: clientDetails.placeofsupplyothers || ''\n      })\n      setConatctId(clientDetails.id)\n      setCountryCode(clientDetails.billingaddresscountriesshorcode)\n\n      handleEmployeeChange(clientDetails?.employeelist)\n    }\n\n    if (contactId !== null) {\n      getClientInfo()\n    }\n\n  }, [contactId, clientDetails])\n\n  useEffect(() => {\n    store.clientInformations.forEach((obj) => {\n      append(obj)\n    })\n  }, [store.clientInformations])\n\n  useEffect(() => {\n    if (clientInfo.length) {\n      saveContactInfo()\n    } else if (contactId !== null) {\n      navigate(`/clients/view/${contactId}`)\n    }\n  }, [clientInfo])\n\n  useEffect(() => {\n    getBusineessEntity()\n    getOrganizationUsers()\n    getCountries()\n    getCurrency()\n    getGSTRegType()\n    getStates()\n\n    getClientData()\n\n  }, [])\n\n\n  const getRow = (fieldLabel, fieldName, reqflag = false, colFlag = true) => {\n    return (\n      <Row className='mb-0 mb-lg-1'>\n        <Label sm={colFlag ? '4' : '12'} size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm={colFlag ? '8' : '12'}>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Row>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false, colFlag = true) => {\n    return (\n\n      <Row className='mb-0 mb-lg-1'>\n        <Label sm={colFlag ? '4' : '12'} size='lg' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col sm={colFlag ? '8' : '12'}>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                classNamePrefix='select'\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n                onChange={val => {\n                  if (fieldName === 'billingAddressCountry') {\n                    setCountryCode(val.shortname)\n                    setValue('billingAddressState', null)\n                    setValue('placeOfSupply', null)\n                    setValue('billingCountryCode', val.shortname)\n                  }\n                  return field.onChange(val.id)\n                }}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Row>\n\n    )\n  }\n  const renderError = () => {\n    const keys = Object.keys(errors)\n    const ErrorText = []\n    if (Array.isArray(keys)) {\n      keys.forEach((key) => {\n        if (key !== 'rows') {\n          ErrorText.push(<FormFeedback key={key}>${errors[key]?.message}</FormFeedback>)\n        }\n      })\n    }\n    return ErrorText\n  }\n\n  const setPrimaryDetails = (fieldName, value, index) => {\n\n    if (fieldName === 'primarystatus' && value.target.checked) {\n      setValue('contactPersonName', control._formValues.contact_info[index].name)\n      setValue('contactNumber', control._formValues.contact_info[index].contactnumber)\n      setValue('email', control._formValues.contact_info[index].email)\n    } else {\n      if (control._formValues.contact_info[index].primarystatus) {\n        if (fieldName === 'primaryStatus') {\n          setValue(fieldName, value.target.checked)\n        } else {\n          setValue(fieldName, value)\n        }\n      }\n    }\n  }\n\n  return (\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Card className='invoice-preview-card'>\n          {/* Header */}\n          <CardHeader>\n            <CardTitle> Edit Client</CardTitle>\n            {\n              renderError()\n            }\n          </CardHeader>\n          <CardBody className='pb-0'>\n            <Row>\n              <Col md='4' className='mb-0 mb-lg-1'>\n                {getRow('Business Name', 'name', true, false)}\n              </Col>\n              <Col md='4' className='mb-0 mb-lg-1'>\n                {getSelectRow('Business Entity', 'businessEntity', businessEntityOptions, true, false)}\n              </Col>\n              <Col md='4' className='mb-0 mb-lg-1'>\n                {getRow('Registration No', 'registrationNo', false, false)}\n              </Col>\n            </Row>\n            <Row className=''>\n              <Col md='4' className='mb-0 mb-lg-1'>\n                <Label sm={'12'} lg='12' size='lg' className={classnames(`form-label`)} >\n                  Assign User\n                </Label>\n                <Col sm={'12'} lg='12' >\n                  <Controller\n                    control={control}\n                    name=\"employeeList\"\n                    id=\"employeeList\"\n                    render={({ field, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.employeeList })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={userOptions}\n                        isMulti={true}\n                        onChange={handleEmployeeChange1}\n                        value={employeeDefaultValue}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                        styles={colourStyles}\n                      />\n                    )}\n\n                  />\n                  {errors.employeeList && <FormFeedback className='text-danger'>{errors.employeeList?.message}</FormFeedback>}\n                </Col>\n              </Col>\n            </Row>\n            {/* {referredBy &&\n              <Row>\n                <Col md='4' className='mb-0 mb-lg-1'>\n                  {getRow('Referred By', 'referredby', false, false)}\n                </Col>\n              </Row>\n            } */}\n            {/* <Row>\n              <Col md='4' className='mb-0 mb-lg-1'>\n                {getRow('Contact Person Name', 'contactPersonName', true, false)}\n              </Col>\n              <Col md='4' className='mb-0 mb-lg-1'>\n                {getRow('Mobile Number', 'contactNumber', false, false)}\n              </Col>\n              <Col md='4' className='mb-0 mb-lg-1'>\n                {getRow('Email ID', 'email', false, false)}\n              </Col>\n            </Row> */}\n          </CardBody>\n          {/* /Header */}\n\n          <hr className='invoice-spacing' />\n          {errors.contact_info && <p className='text-danger ms-2'>{errors.contact_info?.message}</p>}\n          {/* Product Details */}\n          <CardBody className='invoice-padding invoice-product-details p-3'>\n            {fields.map((item, i) => (\n\n              <div key={item.id} className='repeater-wrapper'>\n                <Row >\n                  <Col className='d-lg-flex justify-content-between product-details-border position-relative' sm='12' lg='12' md='12' >\n                    <Row className='align-items-center p-75'>\n                      <Col className='p-50 col-6 col-lg-2 col-md-2' >\n                        <Label className='form-label mt-1'>PAN</Label>\n                        <Controller\n                          control={control}\n                          id='contact_info_pannumber'\n                          name={`contact_info[${i}].pannumber`}\n                          render={({ field }) => (\n                            <Input type='text' placeholder='PAN' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.pannumber && true} {...field} />\n                          )}\n                        />\n                        {errors.contact_info?.[i]?.pannumber && <FormFeedback>{errors.contact_info?.[i]?.pannumber.message}</FormFeedback>}\n                      </Col>\n                      <Col className='p-50 col-6 col-lg-2 col-md-2'>\n                        <Label className='form-label mt-1'>Name</Label>\n                        <Controller\n                          control={control}\n                          id='contact_info_firstName'\n                          name={`contact_info[${i}].name`}\n                          render={({ field }) => (\n                            <Input type='text' placeholder='Name' onInput={(e) => { setPrimaryDetails('contactPersonName', e.target.value, i) }} onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.name && true} {...field} />\n                          )}\n                        />\n                        {errors.contact_info?.[i]?.name && <FormFeedback>{errors.contact_info?.[i]?.name.message}</FormFeedback>}\n                      </Col>\n                      <Col className='p-50 col-6 col-lg-2 col-md-2'>\n                        <Label className='form-label mt-1'>Mobile</Label>\n                        <Controller\n                          control={control}\n                          id='contact_info_contactnumber'\n                          name={`contact_info[${i}].contactnumber`}\n                          render={({ field }) => (\n                            <Input type='number' placeholder='Mobile' onInput={(e) => { setPrimaryDetails('contactnumber', e.target.value, i) }} onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.contactnumber && true} {...field} />\n                          )}\n                        />\n                        {errors.contact_info?.[i]?.contactnumber && <FormFeedback>{errors.contact_info?.[i]?.contactnumber.message}</FormFeedback>}\n                      </Col>\n                      <Col className='p-50 col-6 col-lg-2 col-md-2'>\n                        <Label className='form-label mt-1'>Email</Label>\n                        <Controller\n                          control={control}\n                          id='contact_info_email'\n                          name={`contact_info[${i}].email`}\n                          render={({ field }) => (\n                            <Input type='email' placeholder='Email' onInput={(e) => { setPrimaryDetails('email', e.target.value, i) }} onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.email && true} {...field} />\n                          )}\n                        />\n                        {errors.contact_info?.[i]?.email && <FormFeedback>{errors.contact_info?.[i]?.email.message}</FormFeedback>}\n                      </Col>\n                      <Col className='p-50 col-6 col-lg-2 col-md-2'>\n                        <Label className='form-label mt-1'>Designation</Label>\n                        <Controller\n                          control={control}\n                          id='contact_info_designation'\n                          name={`contact_info[${i}].designation`}\n                          render={({ field }) => (\n                            <Input type='text' placeholder='Designation' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.designation && true} {...field} />\n                          )}\n                        />\n                        {errors.contact_info?.[i]?.designation && <FormFeedback>{errors.contact_info?.[i]?.designation.message}</FormFeedback>}\n                      </Col>\n                      <Col className='p-50 col-6 col-lg-2 col-md-2'>\n                        <Label className='form-label mt-1'>Aadhaar</Label>\n                        <Controller\n                          control={control}\n                          id='contact_info_adharnumber'\n                          name={`contact_info[${i}].adharnumber`}\n                          render={({ field }) => (\n                            <Input type='text' placeholder='Adhaar' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.adharnumber && true} {...field} />\n                          )}\n                        />\n                        {errors.contact_info?.[i]?.adharnumber && <FormFeedback>{errors.contact_info?.[i]?.adharnumber.message}</FormFeedback>}\n                      </Col>\n                      <Col className='p-50 col-6 col-lg-2 col-md-2'>\n                        <Label className='form-label mt-1'>DIN</Label>\n                        <Controller\n                          control={control}\n                          id='contact_info_dinnumber'\n                          name={`contact_info[${i}].dinnumber`}\n                          render={({ field }) => (\n                            <Input type='text' placeholder='DIN' onChange={(val) => { field.onChange(val) }} invalid={errors.contact_info?.[i]?.dinnumber && true} {...field} />\n                          )}\n                        />\n                        {errors.contact_info?.[i]?.dinnumber && <FormFeedback>{errors.contact_info?.[i]?.dinnumber.message}</FormFeedback>}\n                      </Col>\n                      <Col className='p-50 col-6 col-lg-2 col-md-2'>\n                        <Label className='form-label mt-1'>Primary</Label>\n                        \n                        <div className='form-switch form-check-primary'>\n                          <Controller\n                            control={control}\n                            id='contact_info_primaryStatus'\n                            name={`contact_info[${i}].primarystatus`}\n                            render={({ field }) => (\n                              \n                              <Input type='switch' value={field.value} onInput={(val) => { setPrimaryDetails('primarystatus', val, i) }} {...field} defaultChecked={field.value} />\n                            )}\n                          />\n                        </div>\n                      </Col>\n                      {\n                        control._formValues.contact_info.length > 1 &&\n                        <div className='d-lg-flex width-50 justify-content-center border-start invoice-product-actions py-50 px-25'>\n                          <X size={18} className='cursor-pointer' onClick={() => { removeItem(i) }} />\n                        </div>\n                      }\n                    </Row>\n                  </Col>\n                </Row>\n              </div>\n            ))}\n\n            <Row className='mt-1'>\n              <Col sm='12' className='px-0'>\n                <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                  <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                </Button>\n              </Col>\n            </Row>\n\n          </CardBody>\n\n          <hr className='invoice-spacing' />\n          {/* Product Details */}\n          <CardBody>\n            {countryCode === 'IN' &&\n              <Row>\n                <Col md='6' className='mb-0 mb-lg-1'>\n                  {getSelectRow('GST Type', 'gstRegistrationType', gstRegistrationTypeOptions)}\n                </Col>\n                <Col md='6' className='mb-0 mb-lg-1'>\n                  {getRow('GSTIN', 'gstin')}\n                </Col>\n              </Row>\n            }\n            <Row>\n              <Col md='6' className='mb-0 mb-lg-1'>\n                {countryCode === 'IN' ? getSelectRow('Place of Supply', 'placeOfSupply', stateOptions) : getRow('Place of Supply', 'placeOfSupplyOther')}\n              </Col>\n              <Col md='6' className='mb-0 mb-lg-1'>\n                {getSelectRow('Currency', 'currency', currencyOptions, true)}\n              </Col>\n            </Row>\n          </CardBody>\n          {/* Invoice Total */}\n          <CardBody className=''>\n            <h4 className='text-primary mt-50 mt-lg-0'>Billing Address</h4>\n            <Row>\n              <Col md='6' className='mb-0 mb-lg-1'>\n                {getRow('Address Line1', 'billingAddressLine1')}\n              </Col>\n              <Col md='6' className='mb-0 mb-lg-1'>\n                {getRow('Address Line2', 'billingAddressLine2')}\n              </Col>\n            </Row>\n\n            <Row>\n              <Col md='6' className='mb-0 mb-lg-1'>\n                {getRow('City', 'billingAddressCity')}\n              </Col>\n              <Col md='6' className='mb-0 mb-lg-1'>\n                {countryCode === 'IN' ? getSelectRow('State', 'billingAddressState', stateOptions) : getRow('State', 'billingAddressStateOthers')}\n              </Col>\n            </Row>\n\n            <Row>\n              <Col md='6' className='mb-0 mb-lg-1'>\n                {getSelectRow('Country', 'billingAddressCountry', countryOptions, true)}\n              </Col>\n              <Col md='6' className='mb-0 mb-lg-1'>\n                {getRow('Zip Code', 'billingAddressZip')}\n              </Col>\n            </Row>\n          </CardBody>\n        </Card>\n        <Card>\n          <CardBody>\n            <div className='modal-footer border-0'>\n              <Button color='warning' outline tag={Link} to={`/clients/view/${id}`}>\n                Cancel\n              </Button>\n              <Button color='primary' type=\"submit\" >\n                Save\n              </Button>\n            </div>\n          </CardBody>\n        </Card>\n      </form >\n    </UILoader>\n  )\n}\n\nexport default EditCard\n","// ** Invoice Add Components\nimport EditCard from './EditCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst ClientEdit = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <EditCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ClientEdit\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}