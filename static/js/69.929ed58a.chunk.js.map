{"version":3,"sources":["views/apps/reimbursement/clone/EditCard.js","views/apps/reimbursement/clone/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["activeOrgId","activeOrganizationid","activeOrg","activeOrganization","userId","orgUserId","AddCard","invoice","useState","block","setBlock","Loader","colourStyles","multiValue","styles","backgroundColor","id","useParams","MySwal","withReactContent","Swal","clientOptions","setClientOptions","serviceOptions","setServiceOptions","stateOptions","setStateOptions","accountOptions","setAccountOptions","finalTotal","setFinalTotal","finalSubTotal","setFinalSubTotal","invoiceItems","setInvoiceItems","userOptions","setuserOptions","selectedClient","setSelectedClient","accDetails","setAccDetails","selEmployees","setSelEmployees","participants","setParticipants","navigate","useNavigate","dispatch","useDispatch","schema","yup","shape","createdBy","default","contactId","required","uniqueIdentity","contactEmail","contactName","invoiceDate","dueDate","paymentDue","subTotalAmount","totalAmount","totalTaxAmount","organizationId","dueAmount","accountDetails","bankAccountId","organizationDetails","clientdDetails","note","status","paymentStatus","rows","of","serviceId","invoiceId","price","description","actualPrice","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","setValue","reset","useFieldArray","name","keyName","fields","append","remove","store","useSelector","state","reimbursementInvoice","getOrganizationUsers","axios","post","then","response","arr","data","organizationusers","catch","err","console","log","deletefun","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","result","value","deleteInvoiceItem","dismiss","DismissReason","cancel","useEffect","clients","reimbursements","states","transactionaccounts","acc","find","obj","isPrimary","accountBusinessName","bankName","branchAddress","accountHolderName","ifscCode","accountNumber","res","temp","taskinvoiceparticipants","map","getClientData","getClient","payload","onSubmit","moment","startOf","valueOf","addInvoice","InvoiceItems","forEach","key","updatedBy","addInvoiceItems","length","ind","findIndex","push","users","deletedUser","addInvoiceParticipant","addItem","exemptionReasonId","isTaxApplicable","sacCode","taxGroupId","taxPrice","ItemFinalTotalAmount","items","_formValues","finalsubTotalAmount","parseFloat","removeItem","undefined","tempid","flg","loadItemData","service_price","desFlg","itemFlg","eachObj","selectedService","a","toFixed","bankAccountfn","Object","keys","client","city","billingaddresscity","addressLine1","billingaddressline1","addressLine2","billingaddressline2","billingaddressstatesname","zipCode","billingaddresszip","email","placeOfSupplyId","placeofsupplyid","placeOfSupply","placeofsupplyname","currency","currencyId","currencyid","currencySymbol","currenciessymbol","currencyShortName","currenciescode","currencyName","currenciesname","getInvoiceItemList","getInvoiceItems","reimbursementinvoiceitems","clientid","uniqueno","contactemail","contactname","invoicedate","toDate","paymentdue","subtotalamount","totalamount","totaltaxamount","dueamount","paymentstatus","orgdetails","accountdetails","clientdetails","handleUserChange","e","tempArr","Array","isArray","x","blocking","loader","className","xl","md","sm","ErrorText","message","renderError","imageUrl","Avatar","color","content","charAt","height","width","referrerPolicy","src","alt","zipcode","size","type","placeholder","disabled","render","field","onChange","date","dateStr","options","altInput","ref","inputRef","classnames","classNamePrefix","c","val","getOptionLabel","option","getOptionValue","isgstregistered","gstin","item","index","defaultValue","rules","invalid","onInput","lg","onClick","rowid","order","xs","for","outline","tag","Link","to","reviewer","isMulti","InvoiceEdit","setData","getInvoice","reimbursementinvoice","EditCard","UILoader","props","children","overlayColor","Tag","style","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/69.929ed58a.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\nimport Flatpickr from 'react-flatpickr'\nimport { X, Plus, Hash } from 'react-feather'\nimport Select from 'react-select'\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n// ** Reactstrap Imports\nimport { Row, Col, Card, Input, Label, Button, CardBody, CardText, InputGroup, InputGroupText, FormFeedback } from 'reactstrap'\nimport classnames from 'classnames'\n\nimport { addInvoice, addInvoiceItems, getClient, getInvoiceItems, deleteInvoiceItem, addInvoiceParticipant } from '../store/index'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** Styles\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { activeOrganizationid, activeOrganization, orgUserId } from '@src/helper/sassHelper'\nimport { Link, useNavigate, useParams } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport moment from 'moment'\n\nconst activeOrgId = activeOrganizationid()\nconst activeOrg = activeOrganization()\nconst userId = orgUserId()\n\nconst AddCard = ({ invoice }) => {\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const colourStyles = {\n    multiValue: (styles, { }) => {\n\n      return {\n        ...styles,\n        backgroundColor: '#7367f0'\n      }\n    }\n  }\n  const { id } = useParams()\n  const MySwal = withReactContent(Swal)\n  const [clientOptions, setClientOptions] = useState([])\n  const [serviceOptions, setServiceOptions] = useState([])\n  const [stateOptions, setStateOptions] = useState([])\n  const [accountOptions, setAccountOptions] = useState([])\n  const [finalTotal, setFinalTotal] = useState(0)\n  const [finalSubTotal, setFinalSubTotal] = useState(0)\n  const [invoiceItems, setInvoiceItems] = useState([])\n  const [userOptions, setuserOptions] = useState([])\n  const [selectedClient, setSelectedClient] = useState({})\n  const [accDetails, setAccDetails] = useState([])\n  const [selEmployees, setSelEmployees] = useState([])\n  const [participants, setParticipants] = useState([])\n\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n\n  const schema = yup.object().shape({\n    createdBy: yup.string().default(userId),\n    contactId: yup.string().required(\"Please select a Client\"),\n    uniqueIdentity: yup.string(),\n    contactEmail: yup.string(),\n    contactName: yup.string(),\n    invoiceDate: yup.string(),\n    dueDate: yup.string(),\n    paymentDue: yup.string(),\n    subTotalAmount: yup.string(),\n    totalAmount: yup.string(),\n    totalTaxAmount: yup.string(),\n    organizationId: yup.string().default(activeOrgId),\n    dueAmount: yup.string(),\n    accountDetails: yup.object(),\n    bankAccountId: yup.string().required('Please select Bank Account'),\n    organizationDetails: yup.object(),\n    clientdDetails: yup.object(),\n    note: yup.string().default(''),\n    status: yup.number().default(11),\n    paymentStatus: yup.number().default(5),\n    rows: yup.array().of(\n      yup.object().shape({\n        createdBy: yup.string().default(userId),\n        serviceId: yup.string().required(\"Please Select Service Item\"),\n        invoiceId: yup.string(),\n        price: yup.string(),\n        description: yup.string().default(''),\n        organizationId: yup.string().default(activeOrgId),\n        actualPrice: yup.string().required(),\n        subTotalAmount: yup.string().required(1)\n      })\n    )\n  })\n\n  const { handleSubmit, formState: { errors }, control, setValue, reset } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, append, remove } = useFieldArray({ control, name: 'rows', keyName: 'rowid' })\n\n  const store = useSelector(state => state.reimbursementInvoice)\n  const getClients = () => {\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getServices = () => {\n    axios.post('/reimbursement/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setServiceOptions(arr.reimbursements)\n    })\n  }\n\n  const getStates = () => {\n    axios.post('/states/list').then(response => {\n      const arr = response.data\n      setStateOptions(arr.states)\n    })\n  }\n\n  const getBankAccounts = () => {\n    axios.post('/transactionaccounts/dropdown').then(response => {\n      const arr = response.data\n      setAccountOptions(arr.transactionaccounts)\n      let acc = arr.transactionaccounts.find((obj) => obj.isPrimary)\n      if (!acc) {\n        acc = arr.transactionaccounts.find((obj) => obj.accountBusinessName === 'Cash')\n      }\n      setAccDetails(acc)\n      setValue('bankAccountBankName', acc.bankName)\n      setValue('bankAccountBranchName', acc.branchAddress)\n      setValue('bankAccountHolderName', acc.accountHolderName)\n      setValue('bankAccountId', acc.id)\n      setValue('bankAccountIfscCode', acc.ifscCode)\n      setValue('bankAccountNumber', acc.accountNumber)\n    })\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown').then(response => {\n      const arr = response.data.organizationusers\n      setuserOptions(arr)\n    }).catch((err) => {\n      console.log(err)\n    })\n  }\n\n  const getParticipants = () => {\n\n    axios.post('/reimbursementinvoice/getparticipants', { invoiceId: id })\n      .then((res) => {\n        const temp = res.data.taskinvoiceparticipants.map((obj) => obj.id)\n        setSelEmployees(temp)\n        setParticipants(res.data.taskinvoiceparticipants)\n      })\n      .catch((err) => { console.log(err) })\n\n  }\n\n  const deletefun = (id) => {\n\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteInvoiceItem(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'Conatct has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  useEffect(() => {\n    // ** Get Clients\n    getClients()\n    getServices()\n    getStates()\n    getBankAccounts()\n    getOrganizationUsers()\n    getParticipants()\n\n  }, [])\n\n  const getClientData = async (id) => {\n    const res = await dispatch(getClient(id))\n    setSelectedClient(res.payload)\n  }\n\n  const onSubmit = async data => {\n\n    data.invoiceDate = moment(data.invoiceDate).startOf('D').valueOf()\n    data.paymentDue = moment(data.paymentDue).startOf('D').valueOf()\n\n    setBlock(true)\n    const temp = data.rows\n    setInvoiceItems(temp)\n    delete data.rows\n    await dispatch(addInvoice(data))\n\n  }\n\n  const InvoiceItems = async (id) => {\n    invoiceItems.forEach((obj, key) => {\n      invoiceItems[key].invoiceId = id\n      invoiceItems[key].updatedBy = userId\n    })\n    await dispatch(addInvoiceItems(invoiceItems))\n\n    if (selEmployees.length > 0) {\n      const temp = []\n      selEmployees.forEach((id) => {\n        const ind = participants.findIndex(obj => obj.id === id)\n        if (ind !== -1) {\n          temp.push(participants[ind].id)\n        }\n      })\n      const obj = { users: selEmployees, organizationId: activeOrgId, invoiceId: id, deletedUser: temp }\n      await dispatch(addInvoiceParticipant(obj))\n    }\n\n    navigate(`/reimbursement/view/${store.invoiceId}`)\n  }\n\n  useEffect(async () => {\n    if (store.invoiceId !== null && invoiceItems.length > 0) {\n      await InvoiceItems(store.invoiceId)\n    }\n  }, [store.invoiceId, invoiceItems])\n\n  const addItem = (() => {\n    append({ invoiceId: 0, organizationId: activeOrgId, serviceId: '', exemptionReasonId: 0, isTaxApplicable: true, sacCode: '', actualPrice: 0, taxGroupId: '', subTotalAmount: 0, taxPrice: 0, description: '' })\n  })\n\n  useEffect(() => {\n    addItem()\n  }, [])\n\n\n  const ItemFinalTotalAmount = () => {\n\n    const items = control._formValues.rows\n    let finalTotal = 0\n    let finalsubTotalAmount = 0\n    items.forEach(obj => {\n      finalTotal = parseFloat(obj.subTotalAmount) + parseFloat(finalTotal)\n      finalsubTotalAmount = parseFloat(obj.price) + parseFloat(finalsubTotalAmount)\n    })\n\n    control._formValues.subTotalAmount = finalsubTotalAmount\n    control._formValues.totalAmount = finalTotal\n    control._formValues.dueAmount = finalTotal\n\n    setFinalTotal(finalTotal)\n    setFinalSubTotal(finalsubTotalAmount)\n\n  }\n\n  const removeItem = async (ind) => {\n    const tempid = control._formValues.rows[ind].id\n    let flg\n    if (tempid !== undefined) {\n      flg = await deletefun(tempid)\n    }\n    if (flg) {\n      remove(ind)\n    }\n    ItemFinalTotalAmount()\n  }\n\n  const loadItemData = (ind, desFlg = false, itemFlg = false) => {\n    const eachObj = control._formValues.rows[ind]\n    if (eachObj.serviceId === undefined || eachObj.serviceId === '') {\n      return false\n    }\n    let service_price\n    const selectedService = serviceOptions.find((a) => a.id === eachObj.serviceId)\n    setValue(`rows[${ind}].serviceId`, eachObj.serviceId)\n    if (itemFlg) {\n      service_price = eachObj.price || 0\n      setValue(`rows[${ind}].price`, service_price)\n      setValue(`rows[${ind}].description`, selectedService.description)\n    } else {\n      service_price = eachObj.price\n      setValue(`rows[${ind}].price`, service_price)\n      setValue(`rows[${ind}].description`, desFlg ? eachObj.description : selectedService.description)\n    }\n\n    setValue(`rows[${ind}].subTotalAmount`, parseFloat(service_price || 0.00).toFixed(2))\n    setValue(`rows[${ind}].createdBy`, userId)\n\n    ItemFinalTotalAmount()\n\n  }\n\n  const bankAccountfn = (id) => {\n    const acc = accountOptions.find((obj) => obj.id === id)\n    setAccDetails(acc)\n    setValue('accountDetails', acc)\n    setValue('bankAccountId', acc?.id)\n  }\n\n\n  useEffect(() => {\n    if (accountOptions.length > 0) {\n      bankAccountfn(control._formValues.bankAccountId)\n    }\n  }, [accountOptions])\n\n  useEffect(() => {\n    if (Object.keys(selectedClient).length > 0) {\n      const client = {\n        city: selectedClient.billingaddresscity || '',\n        addressLine1: selectedClient.billingaddressline1 || '',\n        addressLine2: selectedClient.billingaddressline2 || '',\n        state: selectedClient.billingaddressstatesname || '',\n        zipCode: selectedClient.billingaddresszip || '',\n        contactEmail: selectedClient.email,\n        contactName: selectedClient.name,\n        placeOfSupplyId: selectedClient.placeofsupplyid,\n        placeOfSupply: selectedClient.placeofsupplyname ?? ''\n      }\n      setValue('placeOfSupplyId', selectedClient.placeofsupplyid)\n      setValue('clientDetails', client)\n      const currency = {\n        currencyId: selectedClient.currencyid || activeOrg.currencyid,\n        currencySymbol: selectedClient.currenciessymbol || '',\n        currencyShortName: selectedClient.currenciescode || '',\n        currencyName: selectedClient.currenciesname || ''\n      }\n      setValue('currencyDetails', currency)\n\n    }\n\n  }, [selectedClient])\n\n  const renderError = () => {\n    const keys = Object.keys(errors)\n    const ErrorText = []\n    if (Array.isArray(keys)) {\n      keys.forEach((key) => {\n        if (key !== 'rows') {\n          ErrorText.push(<FormFeedback key={key}>${errors[key]?.message}</FormFeedback>)\n        }\n      })\n    }\n    return ErrorText\n  }\n\n  const getInvoiceItemList = async (id) => {\n    if (id !== undefined) {\n      const res = await dispatch(getInvoiceItems(id))\n      setValue('rows', res.payload.reimbursementinvoiceitems)\n      ItemFinalTotalAmount()\n    }\n  }\n\n  useEffect(async () => {\n    if (Object.keys(invoice).length > 0) {\n\n      reset({\n        id: invoice.id,\n        contactId: invoice.clientid,\n        uniqueIdentity: invoice.uniqueno,\n        contactEmail: invoice.contactemail,\n        contactName: invoice.contactname,\n        invoiceDate: moment(invoice.invoicedate, 'x').toDate(),\n        paymentDue: moment(invoice.paymentdue, 'x').toDate(),\n        placeOfSupplyId: invoice.placeofsupplyid,\n        subTotalAmount: invoice.subtotalamount,\n        totalAmount: invoice.totalamount,\n        totalTaxAmount: invoice.totaltaxamount,\n        dueAmount: invoice.dueamount,\n        note: invoice.note,\n        status: invoice.status,\n        paymentStatus: invoice.paymentstatus\n      })\n\n      setValue('organizationDetails', invoice.orgdetails)\n      setValue('accountDetails', invoice.accountdetails)\n      setValue('bankAccountId', invoice.accountdetails?.id)\n      setValue('placeOfSupplyId', invoice.clientdetails.placeofsupplyid)\n      setValue('clientDetails', invoice.clientdetails)\n      await getClientData(invoice.clientid)\n      await getInvoiceItemList(invoice.id)\n    }\n  }, [invoice])\n\n  const handleUserChange = (e) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    setSelEmployees(tempArr)\n\n  }\n\n\n  return (\n\n    <UILoader blocking={block} loader={<Loader />}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <Row className='invoice-add'>\n          <Fragment>\n            <Col xl={10} md={8} sm={12}>\n\n              <Card className='invoice-preview-card'>\n\n                {/* Header */}\n                <CardBody className='invoice-padding pb-0'>\n                  {\n                    renderError()\n                  }\n                  <div className='d-flex justify-content-between flex-md-row flex-column invoice-spacing mt-0'>\n                    <div>\n                      <div className='logo-wrapper'>\n                        {invoice.orgdetails.imageUrl === null ? <Avatar color={'primary'} className='me-50' content={invoice.orgdetails.name !== null ? invoice.orgdetails.name?.charAt(0) : ''} /> : <img className='rounded me-50' height={75} width={75} referrerPolicy=\"no-referrer\" src={`https://drive.google.com/thumbnail?id=${invoice.orgdetails.imageUrl}&authuser=0`} alt=\"Organisation Logo\" />}\n                        <h5 className='text-primary invoice-logo'>{invoice.orgdetails.name}</h5>\n                      </div>\n                      <p className='card-text mb-25'>{invoice.orgdetails.addressLine1}</p>\n                      <p className='card-text mb-25'>{invoice.orgdetails.addressLine2}</p>\n                      <p className='card-text mb-0'>{invoice.orgdetails.city} - {invoice.orgdetails.zipcode}</p>\n                      <p className='card-text mb-0'>{invoice.orgdetails.state}</p>\n\n                    </div>\n                    <div className='invoice-number-date mt-md-0 mt-2'>\n                      <div className='d-flex align-items-center justify-content-md-end mb-1'>\n                        <h4 className='invoice-title'>Challan</h4>\n                        <InputGroup className='input-group-merge invoice-edit-input-group disabled'>\n                          <InputGroupText>\n                            <Hash size={15} />\n                          </InputGroupText>\n                          <Input\n                            type='number'\n                            className='invoice-edit-input'\n                            value={3171}\n                            placeholder='53634'\n                            disabled\n                          />\n                        </InputGroup>\n                      </div>\n                      <div className='d-flex align-items-center mb-1'>\n                        <span className='title '>Challan Date:</span>\n                        <Controller\n                          control={control}\n                          name={`invoiceDate`}\n                          id='invoiceDate'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true }}\n                              className='form-control invoice-edit-input date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                      <div className='d-flex align-items-center'>\n                        <span className='title required'>Due Date:</span>\n                        <Controller\n                          control={control}\n                          name={`paymentDue`}\n                          id='paymentDue'\n                          render={({ field }) => (\n                            <Flatpickr\n                              value={field.value}\n                              onChange={(date, dateStr) => { field.onChange(dateStr) }}\n                              options={{ altInput: true }}\n                              className='form-control invoice-edit-input due-date-picker'\n                            />\n                          )}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </CardBody>\n                {/* /Header */}\n\n                <hr className='invoice-spacing' />\n\n                {/* Address and Contact */}\n                <CardBody className='invoice-padding pt-0'>\n                  <Row className='row-bill-to invoice-spacing'>\n                    <Col className='col-bill-to ps-0' xl='6'>\n                      <h6 className='invoice-to-title required'>Challan To</h6>\n                      <div className='invoice-customer'>\n                        <Controller\n                          control={control}\n                          name={`contactId`}\n                          id={`contactId`}\n                          render={({ field, ref }) => (\n                            <Select\n                              inputRef={ref}\n                              className={classnames('react-select', { 'is-invalid': errors['contactId'] })}\n                              {...field}\n                              classNamePrefix='select'\n                              options={clientOptions}\n                              value={clientOptions.find(c => { return c.id === field.value })}\n                              onChange={val => { field.onChange(val.id); getClientData(val.id) }}\n                              getOptionLabel={(option) => option.name}\n                              getOptionValue={(option) => option.id}\n                            />\n                          )}\n                        />\n                      </div>\n                      <Col className='pe-0 mt-xl-2' xl='4'>\n                        <table>\n                          {selectedClient &&\n                            <tbody>\n                              <tr>\n                                <td>{selectedClient.billingaddressline1}</td>\n                              </tr>\n                              <tr>\n                                <td>{selectedClient.billingaddressline2}</td>\n                              </tr>\n                              <tr>\n                                <td>{selectedClient.billingaddresscity} {selectedClient.billingaddresszip && `-`}  {selectedClient.billingaddresszip}</td>\n                              </tr>\n                              <tr>\n                                <td>{selectedClient.billingaddressstatesname}</td>\n                              </tr>\n\n                            </tbody>\n                          }\n                        </table>\n                      </Col>\n                    </Col>\n                    <Col className='col-bill-to ps-0' xl='2'></Col>\n                    <Col className='pe-0 mt-xl-0 mt-2' xl='4'>\n                      <h6 className='mb-2'>Payment Details:</h6>\n                      <table>\n                        <tbody>\n                          <tr>\n                            <td className='pe-1'>Bank Name:</td>\n                            <td>\n                              {accDetails.bankName && <span className='fw-bolder'>{accDetails.bankName}</span>}\n                            </td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Account name:</td>\n                            <td>{accDetails.accountHolderName && <span className='fw-bolder'>{accDetails.accountHolderName}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>Branch Name:</td>\n                            <td> {accDetails.branchAddress && <span className='fw-bolder'>{accDetails.branchAddress}</span>}</td>\n                          </tr>\n                          <tr>\n                            <td className='pe-1'>IFSC Code:</td>\n                            <td>{accDetails.ifscCode && <span className='fw-bolder'>{accDetails.ifscCode} </span>}</td>\n                          </tr>\n                          {selectedClient.currenciescode &&\n                            <tr>\n                              <td className='pe-1'>Currency code:</td>\n                              <td>{selectedClient.currenciescode}</td>\n                            </tr>\n                          }\n                        </tbody>\n                      </table>\n                    </Col>\n                  </Row>\n                  {activeOrg?.isgstregistered &&\n                    <Row className='row-bill-to invoice-spacing'>\n                      <Col className='col-bill-to ps-0' xl='6'>\n                        <h6 className='invoice-to-title mt-2 required'>Place Of Supply</h6>\n                        <div className='invoice-customer'>\n                          <Controller\n                            control={control}\n                            name={`placeOfSupplyId`}\n                            id={`placeOfSupplyId`}\n                            render={({ field, ref }) => (\n                              <Select\n                                inputRef={ref}\n                                className={classnames('react-select', { 'is-invalid': errors['placeOfSupplyId'] })}\n                                {...field}\n                                classNamePrefix='select'\n                                options={stateOptions}\n                                value={stateOptions.find(c => { return c.id === field.value })}\n                                onChange={val => { field.onChange(val.id) }}\n                                getOptionLabel={(option) => option.name}\n                                getOptionValue={(option) => option.id}\n                              />\n                            )}\n                          />\n                        </div>\n                        {(selectedClient.gstin !== '' && selectedClient.gstin !== undefined) && <div className='mt-1'> GSTIN : {selectedClient.gstin}</div>}\n                      </Col>\n\n                      <Col className='col-bill-to ps-0' xl='2'></Col>\n                    </Row>\n                  }\n                </CardBody>\n                {/* /Address and Contact */}\n\n                {/* Product Details */}\n                <CardBody className='invoice-padding invoice-product-details'>\n                  {fields.map((item, index) => {\n                    return (\n                      <div key={item.rowid} className='repeater-wrapper'>\n                        <Row>\n                          <Col className='d-lg-flex product-details-border position-relative pe-0' sm='12'>\n                            <Row className='w-100 pe-lg-0 pe-1 py-2'>\n                              <Col className='mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-4 col-sm-12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Item</CardText>\n                                <Controller\n                                  control={control}\n                                  defaultValue={`${item.serviceId}`}\n                                  name={`rows[${index}].serviceId`}\n                                  rules={{ required: true }}\n                                  render={({ field, ref }) => (\n                                    <Select\n                                      {...field}\n                                      inputRef={ref}\n                                      className={classnames('react-select', { 'is-invalid': errors.rows?.[index]?.serviceId })}\n                                      classNamePrefix='select'\n                                      options={serviceOptions}\n                                      value={serviceOptions.find(c => c.id === field.value)}\n                                      onChange={val => { field.onChange(val.id); loadItemData(index, false, true) }}\n                                      getOptionLabel={(option) => option.name}\n                                      getOptionValue={(option) => option.id}\n                                    />\n                                  )}\n                                />\n                                {errors.rows?.[index]?.serviceId && <FormFeedback>{errors.rows?.[index]?.serviceId.message}</FormFeedback>}\n                                <Controller\n                                  id={`rows_${index}_description`}\n                                  defaultValue={`${item.description}`}\n                                  name={`rows[${index}].description`}\n                                  control={control}\n                                  render={({ field }) => <Input className='mt-1' invalid={errors.rows?.[index]?.description && true} onInput={(val) => { field.onChange(val); loadItemData(index, true, false) }} {...field} />}\n                                />\n                              </Col>\n                              <Col className='my-lg-0 my-2' lg='2' sm='12'>\n                                <CardText className='col-title mb-md-2 mb-0'>Price</CardText>\n                                <Controller\n                                  defaultValue={item.price}\n                                  id={`rows_${index}_price`}\n                                  name={`rows[${index}].price`}\n                                  control={control}\n                                  render={({ field }) => <Input type='number' id={`input_rows_${index}_price`} onInput={(val) => { field.onChange(val); loadItemData(index, false, false) }} {...field} invalid={errors.rows?.[index]?.price && true} />}\n                                />\n                                {errors.rows?.[index]?.price && <FormFeedback>{errors.rows?.[index]?.price.message}</FormFeedback>}\n                              </Col>\n                              <Col className='my-lg-0 mt-2' lg='1' sm='12'>\n                                <CardText className='col-title mb-md-50 mb-0'>Amount</CardText>\n                                {control._formValues.rows[index].subTotalAmount}\n                              </Col>\n                            </Row>\n                            <div className='d-lg-flex justify-content-center border-start invoice-product-actions py-50 px-25'>\n                              <X size={18} className='cursor-pointer' onClick={() => { removeItem(index) }} />\n                            </div>\n                          </Col>\n                        </Row>\n                      </div>\n                    )\n                  })}\n                  <Row className='mt-1'>\n                    <Col sm='12' className='px-0'>\n                      <Button color='primary' size='sm' className='btn-add-new' onClick={() => addItem()}>\n                        <Plus size={14} className='me-25'></Plus> <span className='align-middle'>Add Item</span>\n                      </Button>\n                    </Col>\n                  </Row>\n                </CardBody>\n\n                {/* /Product Details */}\n\n                {/* Invoice Total */}\n                <CardBody className='invoice-padding'>\n                  <Row className='invoice-sales-total-wrapper'>\n                    <Col className='mt-md-0 mt-3' md={{ size: '6', order: 1 }} xs={{ size: 12, order: 2 }}>\n\n                    </Col>\n                    <Col className='d-flex justify-content-end' md={{ size: '6', order: 2 }} xs={{ size: 12, order: 1 }}>\n                      <div className='invoice-total-wrapper'>\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>Amount:</p>\n                          <p className='invoice-total-amount'>{finalSubTotal}</p>\n                        </div>\n\n                        <hr className='my-50' />\n                        <div className='invoice-total-item'>\n                          <p className='invoice-total-title'>Total Payable:</p>\n                          <p className='invoice-total-amount'>{finalTotal}</p>\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Total */}\n\n                <hr className='invoice-spacing mt-0' />\n\n                {/* Invoice Note */}\n                <CardBody className='invoice-padding py-0'>\n                  <Row>\n                    <Col>\n                      <div className='mb-2'>\n                        <Label for='note' className='form-label fw-bold'>\n                          Note:\n                        </Label>\n                        <Controller\n                          id='note'\n                          name='note'\n                          control={control}\n                          render={({ field }) => <Input type=\"textarea\" value={field.value} invalid={errors.note && true} {...field} />}\n                        />\n                      </div>\n                    </Col>\n                  </Row>\n                </CardBody>\n                {/* /Invoice Note */}\n              </Card>\n\n            </Col>\n            <Col xl={2} md={4} sm={12}>\n              <Card className='invoice-action-wrapper'>\n                <CardBody>\n                  {/* <Button color='primary' block className='mb-75' disabled>\n          Send Invoice\n        </Button>\n        <Button tag={Link} to='/invoice/preview' color='primary' block outline className='mb-75'>\n          Preview\n        </Button> */}\n                  <Button color='primary' type='submit' block outline className='mb-75'>\n                    Save\n                  </Button>\n                  <Button color='warning' block outline tag={Link} to={`/reimbursement/view/${id}`}>\n                    Cancel\n                  </Button>\n                </CardBody>\n              </Card>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50 required'>Accept payments via</p>\n                  <Controller\n                    control={control}\n                    name={`bankAccountId`}\n                    rules={{ required: true }}\n                    render={({ field, ref }) => (\n                      <Select\n                        {...field}\n                        inputRef={ref}\n                        className={classnames('react-select mt-1', { 'is-invalid': errors.bankAccountId })}\n                        classNamePrefix='select'\n                        options={accountOptions}\n                        value={accountOptions.find(c => c.id === field.value)}\n                        onChange={(val) => { field.onChange(val.id); bankAccountfn(val.id) }}\n                        getOptionLabel={(option) => option.accountHolderName}\n                        getOptionValue={(option) => option.id}\n                      />\n                    )}\n                  />\n                </div>\n              </div>\n              <div className='mt-2'>\n                <div className='invoice-payment-option'>\n                  <p className='mb-50'>Select Employee</p>\n                  <Controller\n                    control={control}\n                    name=\"reviewer\"\n                    id=\"reviewer\"\n                    render={({ field, value, ref }) => (\n                      <Select\n                        inputRef={ref}\n                        className={classnames('react-select', { 'is-invalid': errors.reviewer })}\n                        {...field}\n                        classNamePrefix='select'\n                        options={userOptions}\n                        isMulti={true}\n                        defaultValue={participants}\n                        value={value} // set selected values\n                        onChange={handleUserChange}\n                        getOptionLabel={(option) => option.name}\n                        getOptionValue={(option) => option.id}\n                        styles={colourStyles}\n                      />\n                    )}\n\n                  />\n                </div>\n              </div>\n            </Col>\n          </Fragment >\n        </Row>\n      </form >\n    </UILoader>\n  )\n}\n\nexport default AddCard\n","// ** React Imports\nimport { useEffect, useState } from 'react'\nimport { useParams, Link } from 'react-router-dom'\n\n// ** Third Party Components\nimport axios from '@src/configs/axios/axiosConfig'\n\n// ** Reactstrap Imports\nimport { Alert, Row, Col } from 'reactstrap'\n\n// ** Reimbursement Edit Components\nimport EditCard from './EditCard'\n\nconst InvoiceEdit = () => {\n  // ** Hooks\n  const { id } = useParams()\n\n  // ** States\n  const [data, setData] = useState(null)\n\n  // ** Get invoice on mount based on id\n  const getInvoice = async () => {\n    axios.post('/reimbursementinvoice/get', { id }).then((res) => {\n      setData(res.data.reimbursementinvoice)\n    }).catch((err) => { console.log(err) })\n\n  }\n\n  useEffect(() => {\n    getInvoice()\n  }, [])\n\n  return data !== null && data !== undefined ? (\n    <div className='invoice-edit-wrapper'>\n      <Row className='invoice-edit'>\n        <Col xl={12} md={8} sm={12}>\n          <EditCard invoice={data} />\n        </Col>\n      </Row>\n    </div>\n  ) : (\n    <Alert color='danger'>\n      <h4 className='alert-heading'>Reimbursement not found</h4>\n      <div className='alert-body'>\n        Reimbursement with id: {id} doesn't exist. Check list of all invoices:{' '}\n        <Link to='/apps/invoice/list'>Reimbursement List</Link>\n      </div>\n    </Alert>\n  )\n}\n\nexport default InvoiceEdit\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}