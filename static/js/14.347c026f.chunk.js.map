{"version":3,"sources":["@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","views/apps/recurring-task/add/AddCard.js"],"names":["UILoader","props","children","blocking","loader","className","tag","overlayColor","Tag","classnames","style","backgroundColor","defaultProps","color","ComponentSpinner","activeOrgId","withReactContent","Swal","activeOrganizationid","userId","orgUserId","priorityOptions","id","name","durationOptions","colourStyles","multiValue","styles","TaskList","index","clientOptions","setValue","userOptions","errors","control","removeItem","useState","dateList","setDateList","dayList","useEffect","Array","fill","map","num","i","assigneeUserOptions","setAssigneeUserOptions","duration","setDuration","reviewerUserOptions","setReviewerUserOptions","handleQuarDateChange","val","ind","fieldName","k","res","moment","startOf","valueOf","handleDateChange","today","format","today_day","parseInt","day","add","set","render","field","ref","inputRef","recurringTasks","classNamePrefix","options","placeholder","value","find","c","onChange","getOptionLabel","option","getOptionValue","clientId","message","priority","isMulti","e","reviewerOptions","tempArr","isArray","x","length","filter","id1","some","id2","handleAssigneeChange","assignee","assigneeOptions","handleReviwerChange","reviewer","type","invoiceAmount","md","date","handleDuration","recurringId","startDate","endDate","rules","required","dateFormat","min","dateStr","altInput","altFormat","setDate","label","item","lg","size","onClick","RecurringTasks","block","setBlock","formModal","setFormModal","Loader","dispatch","useDispatch","addTaskFlag","selectedService","refreshList","schema","yup","shape","of","createdBy","default","organizationId","serviceId","invoiceFlag","when","is","then","assigneeId","reviewerId","nullable","quarterlyDates","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","formState","useFieldArray","keyName","fields","append","remove","addItem","setUserOptions","setClientOptions","getOrganizationUsers","axios","post","response","arr","data","organizationusers","catch","err","console","log","status","clients","onSubmit","addTask","scrollable","isOpen","toggle","Object","keys","obj","sm","rowid","outline"],"mappings":"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","file":"static/js/14.347c026f.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","// ** React Imports\nimport { useEffect, useState, Fragment } from 'react'\nimport { useForm, Controller, useFieldArray } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n// ** Third Party Components\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\nconst MySwal = withReactContent(Swal)\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\n// ** Reactstrap Imports\nimport { Card, CardBody, Row, Col, Label, FormFeedback, Modal, ModalBody, Button, ModalHeader, Input, CardText, ModalFooter } from 'reactstrap'\nimport { useDispatch } from 'react-redux'\nimport Select from 'react-select'\nimport axios from '@src/configs/axios/axiosConfig'\nimport { addTask } from '../store/index'\n//import toast from 'react-hot-toast'\nimport classnames from 'classnames'\n\nimport Flatpickr from 'react-flatpickr'\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { Plus, Trash2 } from 'react-feather'\nimport moment from 'moment'\n\nconst priorityOptions = [\n  { id: 1, name: \"Low\" },\n  { id: 2, name: \"Medium\" },\n  { id: 3, name: \"High\" }\n]\n\nconst durationOptions = [\n  { id: 1, name: \"Monthly\" },\n  { id: 2, name: \"Yearly\" },\n  { id: 3, name: \"Quarterly\" },\n  { id: 4, name: \"Daily\" },\n  { id: 5, name: \"Weekly\" }\n]\n\nconst colourStyles = {\n  multiValue: (styles, { }) => {\n\n    return {\n      ...styles,\n      backgroundColor: '#7367f0'\n    }\n  }\n}\nconst TaskList = ({ index, clientOptions, setValue, userOptions, errors, control, removeItem }) => {\n\n  const [dateList, setDateList] = useState([])\n  const dayList = [{ id: 7, name: 'Sunday' }, { id: 1, name: 'Monday' }, { id: 2, name: 'Tuesday' }, { id: 3, name: 'Wednesday' }, { id: 4, name: 'Thursday' }, { id: 5, name: 'Friday' }, { id: 6, name: 'Saturday' }]\n  useEffect(() => {\n    setDateList(Array(30).fill().map((num, i) => { return { id: i + 1, name: i + 1 } }))\n  }, [])\n\n  const [assigneeUserOptions, setAssigneeUserOptions] = useState(userOptions)\n  const [duration, setDuration] = useState(1)\n  const [reviewerUserOptions, setReviewerUserOptions] = useState(userOptions)\n  const quarterlyDatesList = [\n    {\n      label: \"Quarter (Apr - Jun)\",\n      startDate: null,\n      endDate: null\n    }, {\n      label: \"Quarter (Jul - Sep)\",\n      startDate: null,\n      endDate: null\n    }, {\n      label: \"Quarter (Oct - Dec)\",\n      startDate: null,\n      endDate: null\n    }, {\n      label: \"Quarter (Jan - Mar)\",\n      startDate: null,\n      endDate: null\n    }\n  ]\n  useEffect(() => {\n    setAssigneeUserOptions(userOptions)\n    setReviewerUserOptions(userOptions)\n  }, [userOptions])\n\n  const handleQuarDateChange = (val, ind, fieldName, k) => {\n\n    const res = moment(val[0]).startOf('d').valueOf()\n    setValue(`recurringTasks[${ind}].quarterlyDates[${k}].${fieldName}`, res)\n\n  }\n\n  const handleDateChange = (val, ind, fieldName) => {\n\n    let res = ''\n    const today = moment().format('D')\n    if (duration === 2) {\n      res = moment(val[0]).startOf('d').valueOf()\n    } else if (duration === 5) {\n      const today_day = moment().format('d')\n      if (parseInt(today_day) >= val) {\n        res = moment().day(val).add(1, 'w').startOf('d').valueOf()\n      } else {\n        res = moment().day(val).startOf('d').valueOf()\n      }\n    } else if (duration === 1) {\n      if (parseInt(today) <= val) {\n        res = moment().set('D', val).startOf('d').valueOf()\n      } else {\n        res = moment().set('D', val).add(1, 'M').startOf('d').valueOf()\n      }\n    }\n\n    setValue(`recurringTasks[${ind}].${fieldName}`, res)\n\n  }\n  const handleAssigneeChange = (e, ind) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    let reviewerOptions\n    if (tempArr.length > 0) {\n      reviewerOptions = userOptions.filter(({ id: id1 }) => !tempArr.some(id2 => id2 === id1))\n    } else { reviewerOptions = userOptions }\n\n    setReviewerUserOptions(reviewerOptions)\n    setValue(`recurringTasks[${ind}].assigneeId`, tempArr)\n  }\n\n  const handleReviwerChange = (e, ind) => {\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    let assigneeOptions\n    if (tempArr.length > 0) {\n      assigneeOptions = userOptions.filter(({ id: id1 }) => !tempArr.some(id2 => id2 === id1))\n    } else { assigneeOptions = userOptions }\n\n    setAssigneeUserOptions(assigneeOptions)\n    setValue(`recurringTasks[${ind}].reviewerId`, tempArr)\n  }\n\n  const handleDuration = (id, ind) => {\n    setDuration(id)\n    if (id === 4) {\n      const date = moment().add(1, 'd').startOf('d').valueOf()\n      setValue(`recurringTasks[${ind}].startDate`, date)\n      setValue(`recurringTasks[${ind}].endDate`, date)\n    }\n    if (id === 4 || id === 5) {\n      setValue(`recurringTasks[${ind}].invoiceAmount`, 0)\n      setValue(`recurringTasks[${ind}].invoiceFlag`, false)\n    }\n  }\n\n  return (\n    <Fragment>\n\n      <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-3'>\n        <CardText className='col-title mb-md-50 mb-0'>Client</CardText>\n        <Controller\n          control={control}\n          name={`recurringTasks[${index}].clientId`}\n          id={`recurringTasks[${index}].clientId`}\n          render={({ field, ref }) => (\n            <Select\n              {...field}\n              inputRef={ref}\n              className={classnames('react-select', { 'is-invalid': errors?.recurringTasks })}\n              {...field}\n              classNamePrefix='select'\n              options={clientOptions}\n              placeholder='Select Client'\n              value={clientOptions.find(c => { return c.id === field.value })}\n              onChange={val => { field.onChange(val.id) }}\n              getOptionLabel={(option) => option.name}\n              getOptionValue={(option) => option.id}\n              styles={colourStyles}\n            />\n          )}\n\n        />\n        {errors?.recurringTasks && <FormFeedback className='text-danger'>{errors?.recurringTasks[index]?.clientId?.message}</FormFeedback>}\n      </Col>\n\n      <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-1 col-sm-3'>\n        <CardText className='col-title mb-md-50 mb-0'>Priority</CardText>\n        <Controller\n          control={control}\n          name={`recurringTasks[${index}].priority`}\n          id={`recurringTasks[${index}].priority`}\n          render={({ field, value, ref }) => (\n            <Select\n              {...field}\n              inputRef={ref}\n              className={classnames('react-select', { 'is-invalid': errors?.recurringTasks })}\n              {...field}\n              classNamePrefix='select'\n              placeholder='Priority'\n              options={priorityOptions}\n              value={priorityOptions.find(c => { return c.id === value })}\n              onChange={val => field.onChange(val.id)}\n              getOptionLabel={(option) => option.name}\n              getOptionValue={(option) => option.id}\n            />\n          )}\n\n        />\n        {errors?.recurringTasks && <FormFeedback className='text-danger'>{errors?.recurringTasks[index]?.priority?.message}</FormFeedback>}\n      </Col>\n      <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-3 col-sm-4'>\n        <CardText className='col-title mb-md-50 mb-0'>Assignee</CardText>\n        <Controller\n          control={control}\n          name=\"assignee\"\n          id=\"assignee\"\n          render={({ field, value, ref }) => (\n            <Select\n              inputRef={ref}\n              className={classnames('react-select', { 'is-invalid': errors?.recurringTasks })}\n              {...field}\n              classNamePrefix='select'\n              options={assigneeUserOptions}\n              isMulti={true}\n              value={value} // set selected values\n              placeholder='Select Assignee'\n              onChange={(e) => { handleAssigneeChange(e, index) }}\n              getOptionLabel={(option) => option.name}\n              getOptionValue={(option) => option.id}\n              styles={colourStyles}\n            />\n          )}\n\n        />\n        {errors?.recurringTasks && <FormFeedback className='text-danger'>{errors?.recurringTasks[index]?.assignee?.message}</FormFeedback>}\n      </Col>\n      <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-3 col-sm-4'>\n        <CardText className='col-title mb-md-50 mb-0'>Reviewer</CardText>\n        <Controller\n          control={control}\n          name=\"reviewer\"\n          id=\"reviewer\"\n          render={({ field, value, ref }) => (\n            <Select\n              inputRef={ref}\n              className={classnames('react-select', { 'is-invalid': errors?.recurringTasks })}\n              {...field}\n              classNamePrefix='select'\n              options={reviewerUserOptions}\n              isMulti={true}\n              value={value} // set selected values\n              placeholder='Select Reviewer'\n              onChange={(e) => { handleReviwerChange(e, index) }}\n              getOptionLabel={(option) => option.name}\n              getOptionValue={(option) => option.id}\n              styles={colourStyles}\n            />\n          )}\n        />\n        {errors.reviewer && <FormFeedback className='text-danger'>{errors?.recurringTasks[index]?.reviewer?.message}</FormFeedback>}\n      </Col>\n      <Col>\n        <CardText className='col-title mb-md-50 mb-0'>Recurring Invoice</CardText>\n        <div className='form-switch form-check-primary'>\n          <Controller\n            control={control}\n            name={`recurringTasks[${index}].invoiceFlag`}\n            id={`recurringTasks[${index}].invoiceFlag`}\n            render={({ field, value }) => (\n              <Input\n                value={value}\n                type='switch'\n                {...field}\n                name={`recurringTasks[${index}]?.invoiceFlag`} />\n            )}\n          />\n        </div>\n      </Col>\n      <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-1 col-sm-2'>\n        <CardText className='col-title mb-md-50 mb-0'>Amount</CardText>\n        <Controller\n          control={control}\n          name={`recurringTasks[${index}].invoiceAmount`}\n          id={`recurringTasks[${index}].invoiceAmount`}\n          render={({ field, value }) => (\n            <Input\n              placeholder='Amount'\n              value={value}\n              type='text'\n              {...field}\n            />\n          )}\n        />\n        {errors?.recurringTasks && <p className='text-danger'>{errors?.recurringTasks[index]?.invoiceAmount?.message}</p>}\n      </Col>\n      <Col className='mt-1 d-flex' md={12}>\n        <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-3'>\n          <Controller\n            control={control}\n            name={`recurringTasks[${index}].recurringId`}\n            id={`recurringTasks[${index}].recurringId`}\n            render={({ field, value, ref }) => (\n              <Select\n                {...field}\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors?.recurringTasks })}\n                {...field}\n                classNamePrefix='select'\n                options={durationOptions}\n                placeholder='Select Frequency'\n                value={durationOptions.find(c => { return c.id === value })}\n                onChange={val => { field.onChange(val.id); handleDuration(val.id, index) }}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors?.recurringTasks && <FormFeedback className='text-danger'>{errors?.recurringTasks[index]?.recurringId?.message}</FormFeedback>}\n        </Col>\n\n        {\n          duration === 1 &&\n          <Fragment>\n            <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-3'>\n              <Controller\n                control={control}\n                name={`recurringTasks[${index}].startDate`}\n                id={`recurringTasks[${index}].startDate`}\n                render={({ field, ref }) => (\n                  <Select\n                    {...field}\n                    inputRef={ref}\n                    className={classnames('react-select', { 'is-invalid': errors?.recurringTasks })}\n                    {...field}\n                    classNamePrefix='select'\n                    options={dateList}\n                    placeholder='Select Date'\n                    value={dateList.find(c => { return c.id === field.value })}\n                    onChange={val => { field.onChange(val.id); handleDateChange(val.id, index, 'startDate') }}\n                    getOptionLabel={(option) => option.name}\n                    getOptionValue={(option) => option.id}\n                  />\n                )}\n\n              />\n              {errors?.recurringTasks && <FormFeedback className='text-danger'>{errors?.recurringTasks[index]?.startDate?.message}</FormFeedback>}\n            </Col>\n\n            <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-3'>\n              <Controller\n                control={control}\n                name={`recurringTasks[${index}].endDate`}\n                id={`recurringTasks[${index}].endDate`}\n                render={({ field, ref }) => (\n                  <Select\n                    {...field}\n                    inputRef={ref}\n                    className={classnames('react-select', { 'is-invalid': errors?.recurringTasks })}\n                    {...field}\n                    classNamePrefix='select'\n                    placeholder='Select Date'\n                    options={dateList}\n                    value={dateList.find(c => { return c.id === field.value })}\n                    onChange={val => { field.onChange(val.id); handleDateChange(val.id, index, 'endDate') }}\n                    getOptionLabel={(option) => option.name}\n                    getOptionValue={(option) => option.id}\n                  />\n                )}\n\n              />\n              {errors?.recurringTasks && <FormFeedback className='text-danger'>{errors?.recurringTasks[index]?.endDate?.message}</FormFeedback>}\n            </Col>\n          </Fragment>\n        }\n        {\n          duration === 5 &&\n          <Fragment>\n            <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-3'>\n              <Controller\n                control={control}\n                name={`recurringTasks[${index}].startDate`}\n                id={`recurringTasks[${index}].startDate`}\n                render={({ field, ref }) => (\n                  <Select\n                    {...field}\n                    inputRef={ref}\n                    className={classnames('react-select', { 'is-invalid': errors?.recurringTasks })}\n                    {...field}\n                    classNamePrefix='select'\n                    options={dayList}\n                    placeholder='Select Date'\n                    value={dayList.find(c => { return c.id === field.value })}\n                    onChange={val => { field.onChange(val.id); handleDateChange(val.id, index, 'startDate') }}\n                    getOptionLabel={(option) => option.name}\n                    getOptionValue={(option) => option.id}\n                  />\n                )}\n\n              />\n              {errors?.recurringTasks && <FormFeedback className='text-danger'>{errors?.recurringTasks[index]?.startDate?.message}</FormFeedback>}\n            </Col>\n            <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-3'>\n              <Controller\n                control={control}\n                name={`recurringTasks[${index}].endDate`}\n                id={`recurringTasks[${index}].endDate`}\n                render={({ field, ref }) => (\n                  <Select\n                    {...field}\n                    inputRef={ref}\n                    className={classnames('react-select', { 'is-invalid': errors?.recurringTasks })}\n                    {...field}\n                    classNamePrefix='select'\n                    placeholder='Select Date'\n                    options={dayList}\n                    value={dayList.find(c => { return c.id === field.value })}\n                    onChange={val => { field.onChange(val.id); handleDateChange(val.id, index, 'endDate') }}\n                    getOptionLabel={(option) => option.name}\n                    getOptionValue={(option) => option.id}\n                  />\n                )}\n\n              />\n              {errors?.recurringTasks && <FormFeedback className='text-danger'>{errors?.recurringTasks[index]?.endDate?.message}</FormFeedback>}\n            </Col>\n          </Fragment>\n        }\n        {\n          duration === 2 &&\n          <Fragment>\n            <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-3'>\n              <Controller\n                name={`recurringTasks[${index}].startDate`}\n                id={`recurringTasks[${index}].startDate`}\n                control={control}\n                rules={{ required: true }}\n                options={{ dateFormat: \"d-m-Y\" }}\n                render={({ field }) => (\n                  <Flatpickr\n                    min={moment().add(1, 'D').format('Y-m-d')}\n                    value={field.value}\n                    placeholder='Select Date'\n                    onChange={(date, dateStr) => { field.onChange(dateStr); handleDateChange(date, index, 'startDate') }}\n                    options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                    className={classnames('due-date-picker', { 'flatpickr-input is-invalid': errors.startDate })} />\n                )}\n              />\n              {errors?.recurringTasks && <FormFeedback className='text-danger'>{errors?.recurringTasks[index]?.startDate?.message}</FormFeedback>}\n            </Col>\n\n            <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-3'>\n              <Controller\n                onChange={date => setDate(date)}\n                name={`recurringTasks[${index}].endDate`}\n                id={`recurringTasks[${index}].endDate`}\n                control={control}\n                rules={{ required: true }}\n                options={{ dateFormat: \"d-m-Y\" }}\n                render={({ field }) => (\n                  <Flatpickr\n                    min={moment().add(1, 'D').format('Y-m-d')}\n                    value={field.value}\n                    placeholder='Select Date'\n                    onChange={(date, dateStr) => { field.onChange(dateStr); handleDateChange(date, index, 'endDate') }}\n                    options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                    className={classnames('due-date-picker', { 'flatpickr-input is-invalid': errors.endDate })} />\n                )}\n              />\n\n              {errors?.recurringTasks && <FormFeedback className='text-danger'>{errors?.recurringTasks[index]?.endDate?.message}</FormFeedback>}\n            </Col>\n\n          </Fragment>\n        }{\n          duration === 3 &&\n          <Col md={6} >\n            {\n              quarterlyDatesList.map((item, k) => {\n                return (\n                  <Col className='d-flex mb-1' key={k}>\n                    <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-4 col-sm-3'>\n                      <Controller\n                        name={`recurringTasks[${index}].quarterlyDates[${k}].startDate`}\n                        id={`recurringTasks[${index}].quarterlyDates[${k}].startDate`}\n                        control={control}\n                        rules={{ required: true }}\n                        options={{ dateFormat: \"d-m-Y\" }}\n                        render={({ field }) => (\n                          <Flatpickr\n                            value={field.value}\n                            placeholder='Select Date'\n                            onChange={(date, dateStr) => { field.onChange(dateStr); handleQuarDateChange(date, index, 'startDate', k) }}\n                            options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                            className={classnames('due-date-picker', { 'flatpickr-input is-invalid': errors.startDate })} />\n                        )}\n                      />\n                      {errors?.recurringTasks && <FormFeedback className='text-danger'>{errors?.recurringTasks[index]?.startDate?.message}</FormFeedback>}\n                    </Col>\n\n                    <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-4 col-sm-3'>\n                      <Controller\n                        onChange={date => setDate(date)}\n                        name={`recurringTasks[${index}].quarterlyDates[${k}].endDate`}\n                        id={`recurringTasks[${index}].quarterlyDates[${k}].endDate`}\n                        control={control}\n                        rules={{ required: true }}\n                        options={{ dateFormat: \"d-m-Y\" }}\n                        render={({ field }) => (\n                          <Flatpickr\n                            value={field.value}\n                            placeholder='Select Date'\n                            onChange={(date, dateStr) => { field.onChange(dateStr); handleQuarDateChange(date, index, 'endDate', k) }}\n                            options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                            className={classnames('due-date-picker', { 'flatpickr-input is-invalid': errors.endDate })} />\n                        )}\n                      />\n\n                      {errors?.recurringTasks && <FormFeedback className='text-danger'>{errors?.recurringTasks[index]?.endDate?.message}</FormFeedback>}\n                    </Col>\n                    <Col>{item.label}</Col>\n                  </Col>\n                )\n              })\n            }\n          </Col>\n        }\n        <Col lg={1}>\n          <div className='d-lg-flex justify-content-center invoice-product-actions pt-1 px-25'>\n            <Trash2 size={16} className='text-danger' onClick={() => { removeItem(index) }} />\n          </div>\n        </Col>\n      </Col>\n    </Fragment>\n\n  )\n}\n\nconst RecurringTasks = (props) => {\n\n  const [block, setBlock] = useState(false)\n  const [formModal, setFormModal] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const dispatch = useDispatch()\n  const { id, addTaskFlag, selectedService, refreshList } = props\n\n  // ** States\n  const schema = yup.object().shape({\n    recurringTasks: yup.array().of(\n      yup.object().shape({\n        clientId: yup.string().required(\"Please Select Client\"),\n        createdBy: yup.string().default(userId),\n        organizationId: yup.string().default(activeOrgId),\n        serviceId: yup.string().default(id),\n        invoiceFlag: yup.boolean().default(false),\n        recurringId: yup.number().default(1).required(\"Please Select Frequency\"),\n        priority: yup.number().default(1).required(\"Please Select Priority\"),\n        startDate: yup.string().when(\"recurringId\", { is: (recurringId) => (recurringId === 1 || recurringId === 2 || recurringId === 5), then: yup.string().required(\"Please Enter Start Date\") }),\n        endDate: yup.string().when(\"recurringId\", { is: (recurringId) => (recurringId === 1 || recurringId === 2 || recurringId === 5), then: yup.string().required(\"Please Enter End Date\") }),\n        assigneeId: yup.array().min(1, 'Atleast require ine Selection'),\n        reviewerId: yup.array(),\n        invoiceAmount: yup.string().default('0.00').nullable(),\n        quarterlyDates: yup.array().of(\n          yup.object().shape({\n            startDate: yup.string().when(\"duration\", { is: (duration) => parseInt(duration) === 3, then: yup.string().required(\"Please Enter Start Date\") }),\n            endDate: yup.string().when(\"duration\", { is: (duration) => parseInt(duration) === 3, then: yup.string().required(\"Please Enter End Date\") })\n          })\n        )\n      })\n    ).min(1, \"Require Atleast one Item to create task.\")\n\n  })\n\n  const { handleSubmit, formState: { errors }, control, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, append, remove } = useFieldArray({ name: 'recurringTasks', control, keyName: \"rowid\" })\n\n  const addItem = () => {\n\n    append({})\n  }\n  const [userOptions, setUserOptions] = useState([])\n  const [clientOptions, setClientOptions] = useState([])\n  const getClients = () => {\n    setBlock(true)\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setBlock(false)\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown').then(response => {\n      const arr = response.data\n      setUserOptions(arr.organizationusers)\n    }).catch((err) => {\n      console.log(err)\n    })\n\n  }\n\n  useEffect(async () => {\n    await getOrganizationUsers()\n    await getClients()\n    await addItem()\n  }, [])\n\n\n  const removeItem = (ind) => {\n    remove(ind)\n  }\n\n  useEffect(() => {\n    setFormModal(addTaskFlag)\n  }, [addTaskFlag])\n\n  const onSubmit = async data => {\n    setBlock(true)\n    await dispatch(addTask(data))\n    setFormModal(false)\n    refreshList(true)\n    setBlock(false)\n    remove()\n  }\n  return (\n\n    <Fragment>\n      <Modal scrollable className='modal-dialog-centered modal-xl' isOpen={formModal} toggle={() => setFormModal(!formModal)}>\n        <ModalBody>\n          <Col className='d-flex justify-content-between'>\n            <Col><h5>Add Recurring Task - <span className='text-primary'>{selectedService?.name}</span></h5></Col>\n          </Col>\n          <form onSubmit={handleSubmit(onSubmit)}>\n\n            {Object.keys(errors).map((obj, k) => {\n              return <FormFeedback key={k}> {obj}</FormFeedback>\n            })}\n            <div className='invoice-add'>\n              <div className='invoice-preview-card'>\n                <UILoader blocking={block} loader={<Loader />}>\n                  <CardBody className='invoice-padding invoice-product-details min-vh-100'>\n                    {\n\n                      fields.map((item, index) => {\n                        return (\n                          <div key={item.rowid} className='repeater-wrapper'>\n                            <Row>\n                              <Col className='d-lg-flex border p-2 position-relative rounded flex-wrap' sm='12'>\n                                <TaskList item={item} index={index} clientOptions={clientOptions} userOptions={userOptions} setValue={setValue} setBlock={setBlock} errors={errors} control={control} removeItem={removeItem} />\n                              </Col>\n                            </Row>\n                          </div>\n                        )\n                      })\n                    }\n                    <Button color='primary' outline size='sm' onClick={() => { addItem() }}>\n                      <Plus size={15} /> Add New\n                    </Button>\n                  </CardBody>\n                </UILoader>\n              </div>\n            </div>\n          </form >\n        </ModalBody>\n        <ModalFooter>\n          <Col className='d-flex justify-content-between'>\n            <Col></Col>\n            <Col className='d-flex justify-content-between'>\n              <Col>\n              </Col>\n              <Col>\n                <Button color='warning' onClick={() => { setFormModal(false); refreshList(false) }}>Cancel</Button>\n                <Button color='primary' className='ms-50' type='submit' onClick={handleSubmit(onSubmit)}>Submit</Button>\n              </Col>\n            </Col>\n          </Col>\n        </ModalFooter>\n      </Modal>\n    </Fragment>\n\n  )\n}\n\nexport default RecurringTasks\n"],"sourceRoot":""}