{"version":3,"sources":["views/extensions/import-export/Import.js","@core/components/extensions-header/index.js"],"names":["Import","useState","name","setName","value","setValue","tableData","setTableData","filteredData","setFilteredData","useDropzone","multiple","onDrop","result","reader","FileReader","onload","fileData","wb","XLSX","read","type","SheetNames","forEach","sheetName","arr","getTableData","utils","sheet_to_row_object_array","Sheets","length","endsWith","readAsBinaryString","toast","error","className","style","minWidth","getRootProps","getInputProps","headArr","map","col","index","Object","keys","dataArr","title","subTitle","link","sm","size","href","onClick","e","preventDefault","tag","for","id","bsSize","onChange","data","target","filter","startsWithCondition","key","toString","toLowerCase","startsWith","includesCondition","includes","handleFilter","responsive","head","renderTd","ExtensionsHeader","props","rel"],"mappings":"0QAmLeA,UAjKA,WAEb,MAAwBC,mBAAS,IAAG,mBAA7BC,EAAI,KAAEC,EAAO,KACpB,EAA0BF,mBAAS,IAAG,mBAA/BG,EAAK,KAAEC,EAAQ,KACtB,EAAkCJ,mBAAS,IAAG,mBAAvCK,EAAS,KAAEC,EAAY,KAC9B,EAAwCN,mBAAS,IAAG,mBAA7CO,EAAY,KAAEC,EAAe,KAOpC,EAAwCC,YAAY,CAClDC,UAAU,EACVC,OAAQ,SAAAC,GACN,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WACd,IAAMC,EAAWH,EAAOD,OAClBK,EAAKC,IAAKC,KAAKH,EAAU,CAAEI,KAAM,WAEvCH,EAAGI,WAAWC,SAAQ,SAAUC,IAbjB,SAACC,EAAKvB,GACzBK,EAAakB,GACbtB,EAAQD,EACV,CAYQwB,CADeP,IAAKQ,MAAMC,0BAA0BV,EAAGW,OAAOL,IACzCX,EAAO,GAAGX,KACjC,GACF,EACIW,EAAOiB,QAAUjB,EAAO,GAAGX,KAAK6B,SAAS,QAC3CjB,EAAOkB,mBAAmBnB,EAAO,IAEjCoB,IAAMC,OACJ,kBACE,oBAAGC,UAAU,OAAM,UAAC,uBACE,sBAAMA,UAAU,YAAW,SAAC,UAAa,KAAC,sBAAMA,UAAU,YAAW,SAAC,SAAW,KAAG,IACxG,sBAAMA,UAAU,YAAW,SAAC,SAAW,aACrC,GAEN,CACEC,MAAO,CACLC,SAAU,UAKpB,IA9BMC,EAAY,EAAZA,aAAcC,EAAa,EAAbA,cA4DhBC,EAAUlC,EAAUwB,OACtBxB,EAAUmC,KAAI,SAACC,EAAKC,GAClB,OAAc,IAAVA,EAAoB,YAAIC,OAAOC,KAAKH,IAC5B,IACd,IACA,GAEEI,EAAU1C,EAAM0B,OAAStB,EAAeF,EAAUwB,SAAW1B,EAAM0B,OAASxB,EAAY,KAwB9F,OACE,eAAC,WAAQ,WACP,cAAC,IAAgB,CACfyC,MAAM,OACNC,SAAS,8DACTC,KAAK,uCAEP,eAAC,KAAG,CAACd,UAAU,mBAAkB,UAC/B,cAAC,IAAG,CAACe,GAAG,KAAI,SACV,cAAC,IAAI,UACH,cAAC,IAAQ,UACP,cAAC,KAAG,UACF,cAAC,IAAG,CAACA,GAAG,KAAI,SACV,gDAASZ,EAAa,CAAEH,UAAW,cAAa,cAC9C,qCAAWI,MACX,sBAAKJ,UAAU,+DAA8D,UAC3E,cAAC,IAAa,CAACgB,KAAM,KACrB,6BAAI,uCACJ,oBAAGhB,UAAU,iBAAgB,UAAC,2BACH,IACzB,mBAAGiB,KAAK,IAAIC,QAAS,SAAAC,GAAC,OAAIA,EAAEC,gBAAgB,EAAC,SAAC,WAEzC,IAAI,4CAUxBjD,EAAUwB,OACT,cAAC,IAAG,CAACoB,GAAG,KAAI,SACV,eAAC,IAAI,WACH,eAAC,IAAU,CAACf,UAAU,oCAAmC,UACvD,cAAC,IAAS,CAACqB,IAAI,KAAI,SAAEtD,IACrB,sBAAKiC,UAAU,gDAA+C,UAC5D,cAAC,IAAK,CAACsB,IAAI,eAAetB,UAAU,OAAM,SAAC,WAG3C,cAAC,IAAK,CAACuB,GAAG,eAAerC,KAAK,OAAOsC,OAAO,KAAKvD,MAAOA,EAAOwD,SAAU,SAAAN,GAAC,OAnGrE,SAAAA,GACnB,IAAMO,EAAOvD,EACTE,EAAe,GACbJ,EAAQkD,EAAEQ,OAAO1D,MAGvB,GAFAC,EAASD,IAELA,EAAM0B,OAiBR,OAAO,KAhBPtB,EAAeqD,EAAKE,QAAO,SAAArB,GACzB,IAAMG,EAAOD,OAAOC,KAAKH,GAEnBsB,EAAsBnB,EAAKkB,QAAO,SAAAE,GACtC,OAAOvB,EAAIuB,GAAKC,WAAWC,cAAcC,WAAWhE,EAAM+D,cAC5D,IAEME,EAAoBxB,EAAKkB,QAAO,SAAAE,GAAG,OAAIvB,EAAIuB,GAAKC,WAAWC,cAAcG,SAASlE,EAAM+D,cAAc,IAE5G,OAAIH,EAAoBlC,OAAeY,EAAIsB,IACjCA,GAAuBK,EAAkBvC,OAAeY,EAAI2B,GAC1D,IACd,IACA5D,EAAgBD,GAChBH,EAASD,EAIb,CA0E8FmE,CAAajB,EAAE,UAGjG,eAAC,KAAK,CAACnB,UAAU,wBAAwBqC,YAAU,YACjD,gCACE,6BAvDVhC,EAAQV,OACHU,EAAQ,GAAGC,KAAI,SAACgC,EAAM9B,GAC3B,OAAO,6BAAiB8B,GAAR9B,EAClB,IAEO,SAoDG,gCArEI,OAAZG,GAAoBA,EAAQhB,OACvBgB,EAAQL,KAAI,SAACC,EAAKC,GACvB,IACM+B,EADO9B,OAAOC,KAAKH,GACHD,KAAI,SAACwB,EAAKtB,GAAK,OAAK,6BAAiBD,EAAIuB,IAAZtB,EAAsB,IACzE,OAAO,6BAAiB+B,GAAR/B,EAClB,IAEO,eAkED,UAIZ,C,mCCjLA,mBAwBegC,IAlBU,SAAAC,GACvB,OACE,cAAC,KAAG,CAACzC,UAAU,OAAM,SACnB,eAAC,IAAG,CAACe,GAAG,KAAKf,UAAU,QAAO,UAC5B,mBAAGA,UAAU,qCAAqC,YAAU,kBAAiB,SAC1EyC,EAAM7B,QAER6B,EAAM3B,KACL,mBAAGG,KAAMwB,EAAM3B,KAAMa,OAAO,SAASe,IAAI,sBAAqB,SAC3DD,EAAM5B,WAGT,mBAAGb,UAAU,eAAc,SAAEyC,EAAM5B,eAK7C,C","file":"static/js/96.032fb112.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport XLSX from 'xlsx'\nimport toast from 'react-hot-toast'\nimport { useDropzone } from 'react-dropzone'\nimport { X, DownloadCloud } from 'react-feather'\n\n// ** Custom Components\nimport ExtensionsHeader from '@components/extensions-header'\n\n// ** Reactstrap Imports\nimport { Row, Col, Card, CardBody, Table, CardHeader, CardTitle, Input, Label } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/file-uploader/file-uploader.scss'\n\nconst Import = () => {\n  // ** States\n  const [name, setName] = useState('')\n  const [value, setValue] = useState('')\n  const [tableData, setTableData] = useState([])\n  const [filteredData, setFilteredData] = useState([])\n\n  const getTableData = (arr, name) => {\n    setTableData(arr)\n    setName(name)\n  }\n\n  const { getRootProps, getInputProps } = useDropzone({\n    multiple: false,\n    onDrop: result => {\n      const reader = new FileReader()\n      reader.onload = function () {\n        const fileData = reader.result\n        const wb = XLSX.read(fileData, { type: 'binary' })\n\n        wb.SheetNames.forEach(function (sheetName) {\n          const rowObj = XLSX.utils.sheet_to_row_object_array(wb.Sheets[sheetName])\n          getTableData(rowObj, result[0].name)\n        })\n      }\n      if (result.length && result[0].name.endsWith('xlsx')) {\n        reader.readAsBinaryString(result[0])\n      } else {\n        toast.error(\n          () => (\n            <p className='mb-0'>\n              You can only upload <span className='fw-bolder'>.xlsx</span>, <span className='fw-bolder'>.xls</span> &{' '}\n              <span className='fw-bolder'>.csv</span> Files!.\n            </p>\n          ),\n          {\n            style: {\n              minWidth: '380px'\n            }\n          }\n        )\n      }\n    }\n  })\n\n  const handleFilter = e => {\n    const data = tableData\n    let filteredData = []\n    const value = e.target.value\n    setValue(value)\n\n    if (value.length) {\n      filteredData = data.filter(col => {\n        const keys = Object.keys(col)\n\n        const startsWithCondition = keys.filter(key => {\n          return col[key].toString().toLowerCase().startsWith(value.toLowerCase())\n        })\n\n        const includesCondition = keys.filter(key => col[key].toString().toLowerCase().includes(value.toLowerCase()))\n\n        if (startsWithCondition.length) return col[startsWithCondition]\n        else if (!startsWithCondition && includesCondition.length) return col[includesCondition]\n        else return null\n      })\n      setFilteredData(filteredData)\n      setValue(value)\n    } else {\n      return null\n    }\n  }\n  /*eslint-disable */\n  const headArr = tableData.length\n    ? tableData.map((col, index) => {\n        if (index === 0) return [...Object.keys(col)]\n        else return null\n      })\n    : []\n  /*eslint-enable */\n  const dataArr = value.length ? filteredData : tableData.length && !value.length ? tableData : null\n\n  const renderTableBody = () => {\n    if (dataArr !== null && dataArr.length) {\n      return dataArr.map((col, index) => {\n        const keys = Object.keys(col)\n        const renderTd = keys.map((key, index) => <td key={index}>{col[key]}</td>)\n        return <tr key={index}>{renderTd}</tr>\n      })\n    } else {\n      return null\n    }\n  }\n\n  const renderTableHead = () => {\n    if (headArr.length) {\n      return headArr[0].map((head, index) => {\n        return <th key={index}>{head}</th>\n      })\n    } else {\n      return null\n    }\n  }\n\n  return (\n    <Fragment>\n      <ExtensionsHeader\n        title='XLSX'\n        subTitle='Xlsx is a parser and writer for various spreadsheet formats'\n        link='https://github.com/SheetJS/sheetjs'\n      />\n      <Row className='import-component'>\n        <Col sm='12'>\n          <Card>\n            <CardBody>\n              <Row>\n                <Col sm='12'>\n                  <div {...getRootProps({ className: 'dropzone' })}>\n                    <input {...getInputProps()} />\n                    <div className='d-flex align-items-center justify-content-center flex-column'>\n                      <DownloadCloud size={64} />\n                      <h5>Drop Files here or click to upload</h5>\n                      <p className='text-secondary'>\n                        Drop files here or click{' '}\n                        <a href='/' onClick={e => e.preventDefault()}>\n                          browse\n                        </a>{' '}\n                        thorough your machine\n                      </p>\n                    </div>\n                  </div>\n                </Col>\n              </Row>\n            </CardBody>\n          </Card>\n        </Col>\n        {tableData.length ? (\n          <Col sm='12'>\n            <Card>\n              <CardHeader className='justify-content-between flex-wrap'>\n                <CardTitle tag='h4'>{name}</CardTitle>\n                <div className='d-flex align-items-center justify-content-end'>\n                  <Label for='search-input' className='me-1'>\n                    Search\n                  </Label>\n                  <Input id='search-input' type='text' bsSize='sm' value={value} onChange={e => handleFilter(e)} />\n                </div>\n              </CardHeader>\n              <Table className='table-hover-animation' responsive>\n                <thead>\n                  <tr>{renderTableHead()}</tr>\n                </thead>\n                <tbody>{renderTableBody()}</tbody>\n              </Table>\n            </Card>\n          </Col>\n        ) : null}\n      </Row>\n    </Fragment>\n  )\n}\n\nexport default Import\n","// ** React Imports\nimport Proptypes from 'prop-types'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\nconst ExtensionsHeader = props => {\n  return (\n    <Row className='mb-2'>\n      <Col sm='12' className='ms-50'>\n        <p className='font-medium-5 mt-1 extension-title' data-tour='extension-title'>\n          {props.title}\n        </p>\n        {props.link ? (\n          <a href={props.link} target='_blank' rel='noopener noreferrer'>\n            {props.subTitle}\n          </a>\n        ) : (\n          <p className='text-primary'>{props.subTitle}</p>\n        )}\n      </Col>\n    </Row>\n  )\n}\nexport default ExtensionsHeader\n\n// ** PropTypes\nExtensionsHeader.propTypes = {\n  link: Proptypes.string,\n  title: Proptypes.string.isRequired,\n  subTitle: Proptypes.string.isRequired\n}\n"],"sourceRoot":""}