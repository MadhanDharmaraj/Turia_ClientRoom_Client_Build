{"version":3,"sources":["views/pages/account-settings/Invoice/Reimbursement.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","InvoiceAccounts","MySwal","withReactContent","Swal","useState","data","setData","selected","setSelected","block","setBlock","Loader","formModal","setFormModal","dispatch","useDispatch","schema","yup","shape","organizationId","default","name","required","updatedBy","createdBy","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","reset","getList","axios","post","then","res","reimbursement","catch","err","console","log","closeModal","id","onSubmit","updateReimbursement","eventname","addReimbursement","toast","success","position","useEffect","blocking","loader","className","color","size","onClick","lg","map","card","index","status","organizationid","openEditModal","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","result","value","deleteReimbursement","dismiss","DismissReason","cancel","isOpen","toggle","Object","keys","key","message","tag","Form","fieldLabel","fieldName","reqflag","md","sm","classnames","for","render","field","invalid","getRow","xs","type","UILoader","props","children","overlayColor","Tag","style","backgroundColor","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/132.19a3a856.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\n\n// ** Reactstrap Imports\nimport {\n  Row,\n  Col,\n  Card,\n  Form,\n  Badge,\n  Label,\n  Input,\n  Button,\n  CardBody,\n  FormFeedback,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Table,\n  CardHeader\n} from 'reactstrap'\nimport axios from '@src/configs/axios/axiosConfig'\nimport { useForm, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\nimport { addReimbursement, updateReimbursement, deleteReimbursement } from './store/reimbursement'\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\n\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { useDispatch } from 'react-redux'\nimport toast from 'react-hot-toast'\nimport { Edit, Trash, Plus } from 'react-feather'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n\nconst InvoiceAccounts = () => {\n  const MySwal = withReactContent(Swal)\n  const [data, setData] = useState([])\n  const [selected, setSelected] = useState(null)\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const [formModal, setFormModal] = useState(false)\n  const dispatch = useDispatch()\n\n  const schema = yup.object().shape({\n    organizationId: yup.string().default(activeOrgId),\n    name: yup.string().required('Please Enter Reimbursement'),\n    updatedBy: yup.string().default(userId),\n    createdBy: yup.string().default(userId)\n  })\n\n  const { handleSubmit, formState: { errors }, control, reset } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n\n  const getList = () => {\n    axios.post('/reimbursement/list')\n      .then((res) => {\n        setData(res.data.reimbursement)\n      })\n      .catch((err) => { console.log(err) })\n  }\n\n\n  const deletefn = (id) => {\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteReimbursement(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'Account has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        getList()\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  const closeModal = () => {\n\n    setFormModal(false)\n    reset({\n      organizationId: activeOrgId,\n      id: '',\n      name: ''\n    })\n  }\n\n  const onSubmit = async data => {\n    setBlock(true)\n    let eventname\n    if (selected !== null) {\n      await dispatch(updateReimbursement(data))\n      reset({ name: '' })\n      eventname = 'Added'\n      setSelected(null)\n    } else {\n      await dispatch(addReimbursement(data))\n      eventname = 'Updated'\n      reset({ name: '' })\n    }\n    closeModal()\n    setBlock(false)\n    toast.success(`Reimbursement Reason ${eventname} Succesfully`, { position: 'bottom-right' })\n    getList()\n  }\n\n  const getRow = (fieldLabel, fieldName, reqflag = true) => {\n    return (\n      <Col md={12}>\n        <Label sm='12' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Col>\n    )\n  }\n\n  useEffect(async () => {\n    getList()\n  }, [])\n\n  const openEditModal = card => {\n    setSelected(card)\n    setFormModal(true)\n    reset({\n      organizationId: activeOrgId,\n      id: card.id,\n      name: card.name\n    })\n  }\n\n  return (\n    <Fragment>\n      <UILoader blocking={block} loader={<Loader />}>\n        <Card>\n          <CardHeader className='d-flex justify-content-between'>\n            <h5>Reimbursement</h5>\n\n            <Button color='primary' size='sm' onClick={() => { setFormModal(true) }}> <Plus size={15} />Add</Button>\n\n          </CardHeader>\n          <CardBody className='py-25'>\n            <Row className='gx-4'>\n              <Col lg='12' className='mt-2 mt-lg-0'>\n                <Table className='table table-hover table-bordered'>\n                  <thead>\n                    <tr>\n                      <th>Name</th>\n                      <th>Status</th>\n                      <th>Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {data.map((card, index) => {\n                      return (\n                        <tr key={index}>\n                          <td className='mb-0'>{card.name}</td>\n                          <td>\n                            {card.status === '1' ? (\n                              <Badge color='light-success' className='ms-50'>\n                                Active\n                              </Badge>\n                            ) : (\n                              <Badge color='light-danger' className='ms-50'>\n                                InActive\n                              </Badge>\n                            )}\n                          </td>\n                          <td className=''>\n                            {card.organizationid !== null &&\n                              <div className='d-flex'>\n                                <Edit size={15} className='me-75' onClick={() => openEditModal(card)}>\n                                  Edit\n                                </Edit>\n                                <Trash size={15} onClick={() => { deletefn(card.id) }}>Delete</Trash>\n                              </div>\n                            }\n                          </td>\n                        </tr>\n                      )\n                    })}\n                  </tbody>\n                </Table>\n              </Col>\n\n              <Modal isOpen={formModal} toggle={() => setFormModal(!formModal)} className='modal-dialog-centered'>\n                <ModalHeader toggle={() => closeModal()}>Reimbursement Name</ModalHeader>\n                <ModalBody>\n                  <Row lg='12'>\n                    {\n                      Object.keys(errors).map((key) => {\n\n                        return <FormFeedback key={key}>${errors[key]?.message}</FormFeedback>\n\n                      })\n                    }\n                    <Row tag={Form} className='gx-2 gy-1' onSubmit={handleSubmit(onSubmit)}>\n\n                      {getRow('Reimbursement Name', 'name')}\n\n                      <Col className='mt-2 pt-1' xs={12}>\n                        <Button type='submit' className='me-1' color='primary'>\n                          Submit\n                        </Button>\n                        <Button type='button' className='me-1' color='warning' onClick={() => closeModal()}>\n                          Cancel\n                        </Button>\n                      </Col>\n\n                    </Row>\n                  </Row>\n                </ModalBody>\n              </Modal>\n            </Row>\n          </CardBody>\n        </Card>\n      </UILoader>\n    </Fragment>\n  )\n}\n\nexport default InvoiceAccounts\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}