{"version":3,"sources":["views/apps/recurring-task/edit/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","views/apps/recurring-task/edit/EditCard.js"],"names":["TaskEdit","className","xl","md","sm","UILoader","props","children","blocking","loader","tag","overlayColor","Tag","classnames","style","backgroundColor","defaultProps","color","ComponentSpinner","activeOrgId","withReactContent","Swal","activeOrganizationid","userId","orgUserId","priorityOptions","id","name","durationOptions","colourStyles","multiValue","styles","RecurringTasks","useState","block","setBlock","formModal","setFormModal","Loader","dispatch","useDispatch","editTaskFlag","selTask","selectedService","setEditClose","refreshTaskList","schema","yup","shape","clientId","required","updatedBy","default","organizationId","serviceId","invoiceFlag","recurringId","priority","startDate","when","is","then","endDate","assigneeId","min","reviewerId","invoiceAmount","nullable","quarterlyDates","of","duration","parseInt","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","setValue","userOptions","setUserOptions","clientOptions","setClientOptions","dateList","setDateList","dayList","useEffect","Array","fill","map","num","i","assigneeUserOptions","setAssigneeUserOptions","setDuration","reviewerUserOptions","setReviewerUserOptions","assigneeDefaultValue","setAssigneeDefaultValue","reviewerDefaultValue","setReviewerDefaultValue","handleQuarDateChange","val","fieldName","k","res","moment","startOf","valueOf","handleDateChange","flg","today","format","today_day","set","add","handleAssigneeChange","e","flag","reviewerOptions","tempArr","isArray","x","userid","length","filter","id1","some","id2","handleReviwerChange","assigneeOptions","getOrganizationUsers","axios","post","response","arr","data","organizationusers","catch","err","console","log","stdate","enddate","clientid","invoiceflag","recurringid","taskprice","nextrecurringstartdate","nextrecurringenddate","String","temp","quarterlydates","oj","t","JSON","parse","assignee","reviewer","status","clients","onSubmit","deletedids","forEach","obj","includes","push","updateTask","customStyles","base","minHeight","height","scrollable","isOpen","toggle","Object","keys","render","field","ref","inputRef","classNamePrefix","options","placeholder","value","find","c","onChange","getOptionLabel","option","getOptionValue","message","isMulti","defaultChecked","type","handleDuration","rules","dateFormat","date","dateStr","altInput","altFormat","setDate","label","item","onClick"],"mappings":"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","file":"static/js/59.7985c5e0.chunk.js","sourcesContent":["// ** Invoice Add Components\nimport EditCard from './EditCard'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\n\nconst TaskEdit = () => {\n  return (\n    <div className='invoice-add-wrapper'>\n      <Row className='invoice-add'>\n        <Col xl={12} md={12} sm={12}>\n          <EditCard />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default TaskEdit\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","// ** React Imports\nimport { useEffect, useState, Fragment } from 'react'\nimport { useForm, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\n// ** Third Party Components\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\nconst MySwal = withReactContent(Swal)\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\n// ** Reactstrap Imports\nimport { Card, CardBody, Row, Col, Label, FormFeedback, Modal, ModalBody, Button, ModalHeader, Input, CardText, ModalFooter } from 'reactstrap'\nimport { useDispatch } from 'react-redux'\nimport Select from 'react-select'\nimport axios from '@src/configs/axios/axiosConfig'\nimport { updateTask } from '../store/index'\n//import toast from 'react-hot-toast'\nimport classnames from 'classnames'\n\nimport Flatpickr from 'react-flatpickr'\nimport 'react-slidedown/lib/slidedown.css'\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/base/pages/app-invoice.scss'\nimport { Plus, Trash2 } from 'react-feather'\nimport moment from 'moment'\n\nconst priorityOptions = [\n  { id: 1, name: \"Low\" },\n  { id: 2, name: \"Medium\" },\n  { id: 3, name: \"High\" }\n]\n\nconst durationOptions = [\n  { id: 1, name: \"Monthly\" },\n  { id: 2, name: \"Yearly\" },\n  { id: 3, name: \"Quarterly\" },\n  { id: 4, name: \"Daily\" },\n  { id: 5, name: \"Weekly\" }\n]\n\nconst colourStyles = {\n  multiValue: (styles, { }) => {\n\n    return {\n      ...styles,\n      backgroundColor: '#7367f0'\n    }\n  }\n}\nconst RecurringTasks = (props) => {\n  const [block, setBlock] = useState(false)\n  const [formModal, setFormModal] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n\n  const dispatch = useDispatch()\n  const { id, editTaskFlag, selTask, selectedService, setEditClose, refreshTaskList } = props\n\n  // ** States\n  const schema = yup.object().shape({\n\n    clientId: yup.string().required(\"Please Select Client\"),\n    updatedBy: yup.string().default(userId),\n    id: yup.string().default(selTask?.id),\n    organizationId: yup.string().default(activeOrgId),\n    serviceId: yup.string().default(id),\n    invoiceFlag: yup.boolean().default(false),\n    recurringId: yup.number().default(1).required(\"Please Select Frequency\"),\n    priority: yup.number().default(1).required(\"Please Select Priority\"),\n    startDate: yup.string().when(\"recurringId\", { is: (recurringId) => (recurringId === 1 || recurringId === 2 || recurringId === 5), then: yup.string().required(\"Please Enter Start Date\") }),\n    endDate: yup.string().when(\"recurringId\", { is: (recurringId) => (recurringId === 1 || recurringId === 2 || recurringId === 5), then: yup.string().required(\"Please Enter End Date\") }),\n    assigneeId: yup.array().min(1, 'Atleast require ine Selection'),\n    reviewerId: yup.array(),\n    invoiceAmount: yup.string().default('0.00').nullable(),\n    quarterlyDates: yup.array().of(\n      yup.object().shape({\n        startDate: yup.string().when(\"duration\", { is: (duration) => parseInt(duration) === 3, then: yup.string().required(\"Please Enter Start Date\") }),\n        endDate: yup.string().when(\"duration\", { is: (duration) => parseInt(duration) === 3, then: yup.string().required(\"Please Enter End Date\") })\n      })\n    )\n\n  })\n\n  const { handleSubmit, formState: { errors }, control, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n  const [userOptions, setUserOptions] = useState([])\n  const [clientOptions, setClientOptions] = useState([])\n\n  const [dateList, setDateList] = useState([])\n  const dayList = [{ id: 0, name: 'Sunday' }, { id: 1, name: 'Monday' }, { id: 2, name: 'Tuesday' }, { id: 3, name: 'Wednesday  ' }, { id: 4, name: 'Thursday' }, { id: 5, name: 'Friday' }, { id: 6, name: 'Saturday' }]\n  useEffect(() => {\n    setDateList(Array(30).fill().map((num, i) => { return { id: i + 1, name: i + 1 } }))\n  }, [])\n\n  const [assigneeUserOptions, setAssigneeUserOptions] = useState([])\n  const [duration, setDuration] = useState(1)\n  const [reviewerUserOptions, setReviewerUserOptions] = useState([])\n  const [assigneeDefaultValue, setAssigneeDefaultValue] = useState()\n  const [reviewerDefaultValue, setReviewerDefaultValue] = useState()\n  const quarterlyDatesList = [\n    {\n      label: \"Quarter (Apr - Jun)\",\n      startDate: null,\n      endDate: null\n    }, {\n      label: \"Quarter (Jul - Sep)\",\n      startDate: null,\n      endDate: null\n    }, {\n      label: \"Quarter (Oct - Dec)\",\n      startDate: null,\n      endDate: null\n    }, {\n      label: \"Quarter (Jan - Mar)\",\n      startDate: null,\n      endDate: null\n    }\n  ]\n  useEffect(() => {\n    setAssigneeUserOptions(userOptions)\n    setReviewerUserOptions(userOptions)\n  }, [userOptions])\n\n  const handleQuarDateChange = (val, fieldName, k) => {\n\n    const res = moment(val[0]).startOf('d').valueOf()\n    setValue(`quarterlyDates[${k}].${fieldName}`, res)\n  }\n\n  const handleDateChange = (val, fieldName, flg) => {\n\n    let res = ''\n    const today = moment().format('D')\n    if (duration === 2) {\n      res = moment(val[0]).startOf('d').valueOf()\n    } else if (duration === 5) {\n      const today_day = moment().format('d')\n      if (parseInt(today_day) >= val) {\n        res = moment().set(val, 'd').add(1, 'w').startOf('d').valueOf()\n      } else {\n        res = moment().set(val, 'd').startOf('d').valueOf()\n      }\n    } else if (duration === 1) {\n      if (parseInt(today) <= val) {\n        res = moment().set('D', val).startOf('d').valueOf()\n      } else {\n        res = moment().set('D', val).add(1, 'M').startOf('d').valueOf()\n      }\n    }\n\n    setValue(`${fieldName}`, res)\n    if (flg) return res\n  }\n\n  const handleAssigneeChange = (e, flag = false) => {\n    setAssigneeDefaultValue(e)\n    let tempArr = []\n    if (!flag) {\n      tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    } else {\n      tempArr = Array.isArray(e) ? e.map(x => x.userid) : []\n    }\n    let reviewerOptions\n    if (tempArr.length > 0) {\n      reviewerOptions = userOptions.filter(({ id: id1 }) => !tempArr.some(id2 => id2 === id1))\n    } else { reviewerOptions = userOptions }\n\n    setReviewerUserOptions(reviewerOptions)\n    setValue(\"assigneeId\", tempArr)\n  }\n\n  const handleReviwerChange = (e, flag = false) => {\n    setReviewerDefaultValue(e)\n    let tempArr = []\n    if (!flag) {\n      tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    } else {\n      tempArr = Array.isArray(e) ? e.map(x => x.userid) : []\n    }\n    let assigneeOptions\n    if (tempArr.length > 0) {\n      assigneeOptions = userOptions.filter(({ id: id1 }) => !tempArr.some(id2 => id2 === id1))\n    } else { assigneeOptions = userOptions }\n\n    setAssigneeUserOptions(assigneeOptions)\n    setValue(\"reviewerId\", tempArr)\n  }\n\n\n  const handleDuration = (id) => {\n    setDuration(id)\n    setValue(`startDate`, null)\n    setValue(`endDate`, null)\n  }\n\n  const getClients = () => {\n    setBlock(true)\n    axios.post('/clients/dropdown', { status: 1 }).then(response => {\n      const arr = response.data\n      setBlock(false)\n      setClientOptions(arr.clients)\n    })\n  }\n\n  const getOrganizationUsers = async () => {\n    axios.post('/organizationusers/dropdown').then(response => {\n      const arr = response.data\n      setUserOptions(arr.organizationusers)\n      setReviewerUserOptions(arr.organizationusers)\n      setAssigneeUserOptions(arr.organizationusers)\n    }).catch((err) => {\n      console.log(err)\n    })\n  }\n\n  useEffect(() => {\n    if (selTask) {\n      setValue('clientId', selTask?.clientid)\n      setValue('id', selTask?.id)\n      setValue('invoiceFlag', selTask?.invoiceflag)\n      setValue('recurringId', parseInt(selTask?.recurringid))\n      setValue('priority', parseInt(selTask?.priority))\n      setValue('invoiceAmount', selTask?.taskprice)\n      setDuration(parseInt(selTask?.recurringid))\n      let stdate, enddate\n      if (parseInt(selTask?.recurringid) === 1) {\n        stdate = moment(selTask?.nextrecurringstartdate, 'x').format('D')\n        enddate = moment(selTask?.nextrecurringenddate, 'x').format('D')\n        setValue('startDate', parseInt(stdate))\n        setValue('endDate', parseInt(enddate))\n      } else if (parseInt(selTask?.recurringid) === 5) {\n        stdate = moment(selTask?.nextrecurringstartdate, 'x').format('d')\n        enddate = moment(selTask?.nextrecurringenddate, 'x').format('d')\n        setValue('startDate', parseInt(stdate))\n        setValue('endDate', parseInt(enddate))\n      } else {\n        stdate = String(selTask?.nextrecurringstartdate / 1000)\n        enddate = String(selTask?.nextrecurringenddate / 1000)\n        setValue('startDate', stdate)\n        setValue('endDate', enddate)\n        let temp = []\n        if (selTask?.quarterlydates?.length > 0) {\n          temp = selTask?.quarterlydates.map((oj) => {\n            const t = JSON.parse(oj)\n            t['startDate'] = String(t?.startDate / 1000)\n            t['endDate'] = String(t?.endDate / 1000)\n            return t\n          }\n          )\n        }\n        setValue('quarterlyDates', temp)\n      }\n\n      handleAssigneeChange(selTask?.assignee, true)\n      handleReviwerChange(selTask?.reviewer, true)\n    }\n  }, [selTask])\n\n  useEffect(async () => {\n    await getOrganizationUsers()\n    await getClients()\n  }, [])\n\n  useEffect(() => {\n    setFormModal(editTaskFlag)\n  }, [editTaskFlag])\n\n  const onSubmit = async data => {\n\n    const deletedids = []\n    selTask?.assignee.forEach((obj) => {\n      if (!data.assigneeId.includes(obj.id)) {\n        deletedids.push(obj.id)\n      }\n    })\n\n    selTask?.reviewer.forEach((obj) => {\n      if (!data.reviewerId.includes(obj.id)) {\n        deletedids.push(obj.id)\n      }\n    })\n    data['deletedIds'] = deletedids\n    setBlock(true)\n    if (duration === 3) {\n      data['quarterlyDates'] = data?.quarterlyDates.map((oj) => {\n        const t = oj\n        t['startDate'] = String(t?.startDate).length === 10 ? (t?.startDate * 1000) : t?.startDate\n        t['endDate'] = String(t?.endDate).length === 10 ? (t?.endDate * 1000) : t?.endDate\n        return t\n      })\n\n    } else {\n      if (data.startDate.length !== 13 && data.startDate.length !== 10) {\n        data.startDate = handleDateChange(parseInt(data.startDate), 'startDate', true)\n        data.endDate = handleDateChange(parseInt(data.endDate), 'endDate', true)\n      }\n    }\n\n    await dispatch(updateTask(data))\n    setFormModal(false)\n    setEditClose(false)\n    refreshTaskList(true)\n    setBlock(false)\n  }\n  const customStyles = {\n    control: base => ({\n      ...base,\n      minHeight: '30px',\n      height: '30px'\n    })\n  }\n  return (\n\n    <Fragment>\n      <Modal scrollable className='modal-dialog-centered modal-xl' isOpen={formModal} toggle={() => setFormModal(!formModal)}>\n        <ModalBody>\n          <Col className='d-flex justify-content-between'>\n            <Col><h5>Add Recurring Task - <span className='text-primary'>{selectedService?.name}</span></h5></Col>\n          </Col>\n          <form onSubmit={handleSubmit(onSubmit)}>\n\n            {Object.keys(errors).map((obj, k) => {\n              return <FormFeedback key={k}> {obj}</FormFeedback>\n            })}\n            <div className='invoice-add'>\n              <div className='invoice-preview-card'>\n                <UILoader blocking={block} loader={<Loader />}>\n                  <CardBody className='invoice-padding invoice-product-details'>\n\n                    <div className='repeater-wrapper'>\n                      <Row>\n                        <Col className='d-lg-flex border p-2 position-relative rounded flex-wrap' sm='12'>\n                          <Fragment>\n\n                            <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-3'>\n                              <CardText className='col-title mb-md-50 mb-0'>Client</CardText>\n                              <Controller\n                                control={control}\n                                name={`clientId`}\n                                id={`clientId`}\n                                render={({ field, ref }) => (\n                                  <Select\n                                    {...field}\n                                    inputRef={ref}\n                                    className={classnames('react-select', { 'is-invalid': errors?.clientId })}\n                                    classNamePrefix='select'\n                                    options={clientOptions}\n                                    placeholder='Select Client'\n                                    value={clientOptions.find(c => { return c.id === field.value })}\n                                    onChange={val => { field.onChange(val.id) }}\n                                    getOptionLabel={(option) => option.name}\n                                    getOptionValue={(option) => option.id}\n                                    styles={colourStyles}\n                                  />\n                                )}\n\n                              />\n                              {errors?.clientId && <FormFeedback className='text-danger'>{errors?.clientId?.message}</FormFeedback>}\n                            </Col>\n\n                            <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-1 col-sm-3'>\n                              <CardText className='col-title mb-md-50 mb-0'>Priority</CardText>\n                              <Controller\n                                control={control}\n                                name={`priority`}\n                                id={`priority`}\n                                render={({ field, ref }) => (\n                                  <Select\n                                    {...field}\n                                    inputRef={ref}\n                                    className={classnames('react-select', { 'is-invalid': errors?.priority })}\n                                    classNamePrefix='select'\n                                    placeholder='Priority'\n                                    options={priorityOptions}\n                                    value={priorityOptions.find(c => { return c.id === field.value })}\n                                    onChange={val => field.onChange(val.id)}\n                                    getOptionLabel={(option) => option.name}\n                                    getOptionValue={(option) => option.id}\n                                  />\n                                )}\n\n                              />\n                              {errors?.priority && <FormFeedback className='text-danger'>{errors?.priority?.message}</FormFeedback>}\n                            </Col>\n                            <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-3 col-sm-4'>\n                              <CardText className='col-title mb-md-50 mb-0'>Assignee</CardText>\n                              <Controller\n                                control={control}\n                                name=\"assignee\"\n                                id=\"assignee\"\n                                render={({ field, ref }) => (\n                                  <Select\n                                    inputRef={ref}\n                                    className={classnames('react-select', { 'is-invalid': errors?.assignee })}\n                                    {...field}\n                                    classNamePrefix='select'\n                                    options={assigneeUserOptions}\n                                    isMulti={true}\n                                    value={assigneeDefaultValue} // set selected values\n                                    placeholder='Select Assignee'\n                                    onChange={(e) => { handleAssigneeChange(e) }}\n                                    getOptionLabel={(option) => option.name}\n                                    getOptionValue={(option) => option.id}\n                                    styles={colourStyles}\n                                  />\n                                )}\n\n                              />\n                              {errors?.assignee && <FormFeedback className='text-danger'>{errors?.assignee?.message}</FormFeedback>}\n                            </Col>\n                            <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-3 col-sm-4'>\n                              <CardText className='col-title mb-md-50 mb-0'>Reviewer</CardText>\n                              <Controller\n                                control={control}\n                                name=\"reviewer\"\n                                id=\"reviewer\"\n                                render={({ field, ref }) => (\n                                  <Select\n                                    inputRef={ref}\n                                    className={classnames('react-select', { 'is-invalid': errors?.reviewer })}\n                                    {...field}\n                                    classNamePrefix='select'\n                                    options={reviewerUserOptions}\n                                    isMulti={true}\n                                    value={reviewerDefaultValue} // set selected values\n                                    placeholder='Select Reviewer'\n                                    onChange={(e) => { handleReviwerChange(e) }}\n                                    getOptionLabel={(option) => option.name}\n                                    getOptionValue={(option) => option.id}\n                                    styles={colourStyles}\n                                  />\n                                )}\n                              />\n                              {errors?.reviewer && <FormFeedback className='text-danger'>{errors?.reviewer?.message}</FormFeedback>}\n                            </Col>\n                            <Col>\n                              <CardText className='col-title mb-md-50 mb-0'>Recurring Invoice</CardText>\n                              <div className='form-switch form-check-primary'>\n                                <Controller\n                                  control={control}\n                                  name={`invoiceFlag`}\n                                  id={`invoiceFlag`}\n                                  render={({ field }) => (\n                                    <Input\n                                      defaultChecked={selTask?.invoiceflag}\n                                      type='switch'\n                                      {...field}\n                                      name={`invoiceFlag`} />\n                                  )}\n                                />\n                              </div>\n                            </Col>\n                            <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-1 col-sm-2'>\n                              <CardText className='col-title mb-md-50 mb-0'>Amount</CardText>\n                              <Controller\n                                control={control}\n                                name={`invoiceAmount`}\n                                id={`invoiceAmount`}\n                                render={({ field, value }) => (\n                                  <Input\n                                    placeholder='Amount'\n                                    value={value}\n                                    type='text'\n                                    {...field}\n                                  />\n                                )}\n                              />\n                              {errors?.invoiceAmount && <p className='text-danger'>{errors?.invoiceAmount?.message}</p>}\n                            </Col>\n                            <Col className='mt-1 d-flex' md={12}>\n                              <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-3'>\n                                <Controller\n                                  control={control}\n                                  name={`recurringId`}\n                                  id={`recurringId`}\n                                  render={({ field, ref }) => (\n                                    <Select\n                                      {...field}\n                                      inputRef={ref}\n                                      className={classnames('react-select', { 'is-invalid': errors?.recurringId })}\n                                      classNamePrefix='select'\n                                      options={durationOptions}\n                                      placeholder='Select Frequency'\n                                      value={durationOptions.find(c => { return c.id === field.value })}\n                                      onChange={val => { field.onChange(val.id); handleDuration(val.id) }}\n                                      getOptionLabel={(option) => option.name}\n                                      getOptionValue={(option) => option.id}\n                                      styles={customStyles}\n                                    />\n                                  )}\n\n                                />\n                                {errors?.recurringId && <FormFeedback className='text-danger'>{errors?.recurringId?.message}</FormFeedback>}\n                              </Col>\n\n                              {\n                                duration === 1 &&\n                                <Fragment>\n                                  <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-3'>\n                                    <Controller\n                                      control={control}\n                                      name={`startDate`}\n                                      id={`startDate`}\n                                      render={({ field, ref }) => (\n                                        <Select\n                                          {...field}\n                                          inputRef={ref}\n                                          className={classnames('react-select', { 'is-invalid': errors?.startDate })}\n                                          classNamePrefix='select'\n                                          options={dateList}\n                                          placeholder='Select Date'\n                                          value={dateList.find(c => { return c.id === field.value })}\n                                          onChange={val => { field.onChange(val.id); handleDateChange(val.id, 'startDate') }}\n                                          getOptionLabel={(option) => option.name}\n                                          getOptionValue={(option) => option.id}\n                                          styles={customStyles}\n                                        />\n                                      )}\n\n                                    />\n                                    {errors?.startDate && <FormFeedback className='text-danger'>{errors?.startDate?.message}</FormFeedback>}\n                                  </Col>\n\n                                  <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-3'>\n                                    <Controller\n                                      control={control}\n                                      name={`endDate`}\n                                      id={`endDate`}\n                                      render={({ field, ref }) => (\n                                        <Select\n                                          inputRef={ref}\n                                          className={classnames('react-select', { 'is-invalid': errors?.endDate })}\n                                          {...field}\n                                          classNamePrefix='select'\n                                          placeholder='Select Date'\n                                          options={dateList}\n                                          value={dateList.find(c => { return c.id === field.value })}\n                                          onChange={val => { field.onChange(val.id); handleDateChange(val.id, 'endDate') }}\n                                          getOptionLabel={(option) => option.name}\n                                          getOptionValue={(option) => option.id}\n                                        />\n                                      )}\n\n                                    />\n                                    {errors?.endDate && <FormFeedback className='text-danger'>{errors?.endDate?.message}</FormFeedback>}\n                                  </Col>\n                                </Fragment>\n                              }\n                              {\n                                duration === 5 &&\n                                <Fragment>\n                                  <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-3'>\n                                    <Controller\n                                      control={control}\n                                      name={`startDate`}\n                                      id={`startDate`}\n                                      render={({ field, ref }) => (\n                                        <Select\n                                          {...field}\n                                          inputRef={ref}\n                                          className={classnames('react-select', { 'is-invalid': errors?.startDate })}\n                                          classNamePrefix='select'\n                                          options={dayList}\n                                          placeholder='Select Date'\n                                          value={dayList.find(c => { return c.id === field.value })}\n                                          onChange={val => { field.onChange(val.id); handleDateChange(val.id, 'startDate') }}\n                                          getOptionLabel={(option) => option.name}\n                                          getOptionValue={(option) => option.id}\n                                        />\n                                      )}\n\n                                    />\n                                    {errors?.startDate && <FormFeedback className='text-danger'>{errors?.startDate?.message}</FormFeedback>}\n                                  </Col>\n                                  <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-3'>\n                                    <Controller\n                                      control={control}\n                                      name={`endDate`}\n                                      id={`endDate`}\n                                      render={({ field, ref }) => (\n                                        <Select\n                                          {...field}\n                                          inputRef={ref}\n                                          className={classnames('react-select', { 'is-invalid': errors?.endDate })}\n                                          classNamePrefix='select'\n                                          placeholder='Select Date'\n                                          options={dayList}\n                                          value={dayList.find(c => { return c.id === field.value })}\n                                          onChange={val => { field.onChange(val.id); handleDateChange(val.id, 'endDate') }}\n                                          getOptionLabel={(option) => option.name}\n                                          getOptionValue={(option) => option.id}\n                                        />\n                                      )}\n\n                                    />\n                                    {errors?.endDate && <FormFeedback className='text-danger'>{errors?.endDate?.message}</FormFeedback>}\n                                  </Col>\n                                </Fragment>\n                              }\n                              {\n                                duration === 2 &&\n                                <Fragment>\n                                  <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-3'>\n                                    <Controller\n                                      name={`startDate`}\n                                      id={`startDate`}\n                                      control={control}\n                                      rules={{ required: true }}\n                                      options={{ dateFormat: \"d-m-Y\" }}\n                                      render={({ field }) => (\n                                        <Flatpickr\n                                          min={moment().add(1, 'D').format('Y-m-d')}\n                                          value={field.value}\n                                          placeholder='Select Date'\n                                          onChange={(date, dateStr) => { field.onChange(dateStr); handleDateChange(date, 'startDate') }}\n                                          options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                                          className={classnames('due-date-picker', { 'flatpickr-input is-invalid': errors.startDate })} />\n                                      )}\n                                    />\n                                    {errors?.startDate && <FormFeedback className='text-danger'>{errors?.startDate?.message}</FormFeedback>}\n                                  </Col>\n\n                                  <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-2 col-sm-3'>\n                                    <Controller\n                                      onChange={date => setDate(date)}\n                                      name={`endDate`}\n                                      id={`endDate`}\n                                      control={control}\n                                      rules={{ required: true }}\n                                      options={{ dateFormat: \"d-m-Y\" }}\n                                      render={({ field }) => (\n                                        <Flatpickr\n                                          min={moment().add(1, 'D').format('Y-m-d')}\n                                          value={field.value}\n                                          placeholder='Select Date'\n                                          onChange={(date, dateStr) => { field.onChange(dateStr); handleDateChange(date, 'endDate') }}\n                                          options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                                          className={classnames('due-date-picker', { 'flatpickr-input is-invalid': errors.endDate })} />\n                                      )}\n                                    />\n\n                                    {errors?.endDate && <FormFeedback className='text-danger'>{errors?.endDate?.message}</FormFeedback>}\n                                  </Col>\n\n                                </Fragment>\n                              }{\n                                duration === 3 &&\n                                <Col md={6} >\n                                  {\n                                    quarterlyDatesList.map((item, k) => {\n                                      return (\n                                        <Col className='d-flex mb-1' key={k}>\n                                          <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-4 col-sm-3'>\n                                            <Controller\n                                              name={`quarterlyDates[${k}].startDate`}\n                                              id={`quarterlyDates[${k}].startDate`}\n                                              control={control}\n                                              rules={{ required: true }}\n                                              options={{ dateFormat: \"d-m-Y\" }}\n                                              render={({ field }) => (\n                                                <Flatpickr\n                                                  value={field.value}\n                                                  placeholder='Select Date'\n                                                  onChange={(date, dateStr) => { field.onChange(dateStr); handleQuarDateChange(date, 'startDate', k) }}\n                                                  options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                                                  className={classnames('due-date-picker', { 'flatpickr-input is-invalid': errors.startDate })} />\n                                              )}\n                                            />\n                                            {errors?.startDate && <FormFeedback className='text-danger'>{errors?.startDate?.message}</FormFeedback>}\n                                          </Col>\n\n                                          <Col className='me-50 mb-lg-0 mb-2 mt-lg-0 mt-2 col-lg-4 col-sm-3'>\n                                            <Controller\n                                              onChange={date => setDate(date)}\n                                              name={`quarterlyDates[${k}].endDate`}\n                                              id={`quarterlyDates[${k}].endDate`}\n                                              control={control}\n                                              rules={{ required: true }}\n                                              options={{ dateFormat: \"d-m-Y\" }}\n                                              render={({ field }) => (\n                                                <Flatpickr\n                                                  value={field.value}\n                                                  placeholder='Select Date'\n                                                  onChange={(date, dateStr) => { field.onChange(dateStr); handleQuarDateChange(date, 'endDate', k) }}\n                                                  options={{ altInput: true, altFormat: \"F j, Y\", dateFormat: \"U\" }}\n                                                  className={classnames('due-date-picker', { 'flatpickr-input is-invalid': errors.endDate })} />\n                                              )}\n                                            />\n\n                                            {errors?.endDate && <FormFeedback className='text-danger'>{errors?.endDate?.message}</FormFeedback>}\n                                          </Col>\n                                          <Col>{item.label}</Col>\n                                        </Col>\n                                      )\n                                    })\n                                  }\n                                </Col>\n                              }\n\n                            </Col>\n                          </Fragment>\n                        </Col>\n                      </Row>\n                    </div>\n                  </CardBody>\n                </UILoader>\n              </div>\n            </div>\n            <ModalFooter>\n              <Col className='d-flex justify-content-between'>\n                <Col></Col>\n                <Col className='d-flex justify-content-between'>\n                  <Col>\n                  </Col>\n                  <Col>\n                    <Button color='warning' onClick={() => { setFormModal(false); setEditClose(false); refreshTaskList(false) }}>Cancel</Button>\n                    <Button color='primary' className='ms-50' type='submit'>Submit</Button>\n                  </Col>\n                </Col>\n              </Col>\n            </ModalFooter>\n          </form >\n        </ModalBody>\n      </Modal>\n    </Fragment>\n\n  )\n}\n\nexport default RecurringTasks\n"],"sourceRoot":""}