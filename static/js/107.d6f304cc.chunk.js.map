{"version":3,"sources":["views/pages/account-settings/Attendance/businesshoursArray.js","views/pages/account-settings/Attendance/BusinessHours.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","views/pages/account-settings/Attendance/store/index.js"],"names":["businesshours","day","status","start","end","activeOrgId","activeOrganizationid","userId","orgUserId","InvoiceAccounts","useState","weeklyHours","setWeeklyHours","monthlyHours","setMonthlylyHours","block","setBlock","Loader","dispatch","useDispatch","schema","yup","shape","organizationId","default","businessHours","of","name","when","is","then","required","updatedBy","createdBy","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","control","errors","formState","setValue","useFieldArray","keyName","fields","update","weeklyHoursfn","minutes","_formValues","forEach","obj","i","data","startTime","moment","minDiff","diff","isNaN","hours_temp","Math","floor","minutes_temp","String","monthlyHoursfn","hur","parseInt","bal_minutes","onSubmit","addOrgPreference","toast","success","position","getBusinessHours","axios","post","res","organizationprefernces","officetime","ind","item","JSON","parse","catch","err","console","log","useEffect","blocking","loader","className","lg","Object","keys","map","key","message","tag","Form","render","field","type","defaultChecked","value","onChange","val","defaultValue","invalid","rows","index","sacCode","rowid","xs","color","UILoader","props","children","overlayColor","Tag","classnames","style","backgroundColor","defaultProps","ComponentSpinner","getData","createAsyncThunk","response","createSlice","initialState","accounts","total","params","allData","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload"],"mappings":"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","file":"static/js/107.d6f304cc.chunk.js","sourcesContent":["export  const businesshours = [\n  {\n    day: 'Monday',\n    status: true,\n    start: '09:30',\n    end: '06:30'\n  },\n  {\n    day: 'Tuesday',\n    status: true,\n    start: '09:30',\n    end: '06:30'\n  },\n  {\n    day: 'Wednesday',\n    status: true,\n    start: '09:30',\n    end: '06:30'\n  },\n  {\n    day: 'Thursday',\n    status: true,\n    start: '09:30',\n    end: '06:30'\n  },\n  {\n    day: 'Friday',\n    status: true,\n    start: '09:30',\n    end: '06:30'\n  },\n  {\n    day: 'Saturday',\n    status: true,\n    start: '09:30',\n    end: '06:30'\n  },\n  {\n    day: 'Sunday',\n    status: false,\n    start: '',\n    end: ''\n  }\n]","// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\n\n// ** Reactstrap Imports\nimport {\n  Row,\n  Col,\n  Card,\n  Form,\n  Input,\n  Button,\n  CardBody,\n  FormFeedback\n} from 'reactstrap'\n\nimport { Controller, useFieldArray, useForm } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\nimport axios from '@src/configs/axios/axiosConfig'\nimport { addOrgPreference } from './store/index'\nimport { businesshours } from './businesshoursArray.js'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\n// ** Third Party Components\nimport moment from 'moment'\nimport { useDispatch } from 'react-redux'\nimport toast from 'react-hot-toast'\n\nconst InvoiceAccounts = () => {\n\n  const [weeklyHours, setWeeklyHours] = useState(0)\n  const [monthlyHours, setMonthlylyHours] = useState(0)\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const dispatch = useDispatch()\n\n  const schema = yup.object().shape({\n    organizationId: yup.string().default(activeOrgId),\n    businessHours: yup.array().default(businesshours).of(\n      yup.object().shape({\n        name: yup.string(),\n        status: yup.boolean().default(true),\n        start: yup.string().when(\"status\", { is: (status) => status, then: yup.string().required(\"Please Enter Start Time\") }),\n        end: yup.string().when(\"status\", { is: (status) => status, then: yup.string().required(\"Please Enter End Time.\") })\n      })\n    ),\n    updatedBy: yup.string().default(userId),\n    createdBy: yup.string().default(userId)\n  })\n\n  const { handleSubmit, control, formState: { errors }, setValue } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  const { fields, update } = useFieldArray({ name: 'businessHours', control, keyName: 'rowid' })\n\n  const weeklyHoursfn = () => {\n    let minutes = 0\n\n    control._formValues.businessHours.forEach((obj, i) => {\n      if (!obj.status) {\n        const data = {\n          day: obj.day,\n          status: obj.status,\n          start: '',\n          end: ''\n        }\n        update(i, data)\n      }\n    })\n\n    control._formValues.businessHours.forEach((obj) => {\n      if (obj.status && (obj.start !== '' || obj.start !== '')) {\n        const startTime = moment(`${obj.start} am`, 'HH:mm a')\n        const endTime = moment(`${obj.end} pm`, 'HH:mm a')\n\n        const minDiff = endTime.diff(startTime, 'minutes')\n        minutes = minutes + (isNaN(minDiff) ? 0 : minDiff)\n      }\n    })\n    const hours_temp = Math.floor(minutes / 60)\n    const minutes_temp = minutes % 60\n    setWeeklyHours(`${String(hours_temp)} : ${String(minutes_temp)}`)\n  }\n  const monthlyHoursfn = async () => {\n    let minutes = 0\n    await control._formValues.businessHours.forEach((obj) => {\n      if (obj.status) {\n        const startTime = moment(`${obj.start} am`, 'HH:mm a')\n        const endTime = moment(`${obj.end} pm`, 'HH:mm a')\n\n        const minDiff = endTime.diff(startTime, 'minutes')\n        minutes = minutes + (isNaN(minDiff) ? 0 : minDiff)\n      }\n    })\n    const hours_temp = await Math.floor(minutes / 60)\n    const minutes_temp = minutes % 60\n\n    const hur = parseInt(minutes_temp * 4 / 60)\n    const bal_minutes = (minutes_temp % 60)\n    setMonthlylyHours(`${(4 * hours_temp) + hur} : ${bal_minutes}`)\n  }\n\n  const onSubmit = async data => {\n    setBlock(true)\n    await dispatch(addOrgPreference(data))\n    setBlock(false)\n    toast.success('Business Hours Updated Successfully', { position: 'bottom-right' })\n  }\n\n  const getBusinessHours = async () => {\n    setBlock(true)\n    axios.post('/organizationprefernces/getbusinesshours')\n      .then(async (res) => {\n        if (res.data.organizationprefernces?.officetime) {\n          await res.data.organizationprefernces.officetime.forEach((obj, ind) => {\n            const item = JSON.parse(obj)\n            setValue(`businessHours[${ind}].status`, item.status)\n            setValue(`businessHours[${ind}].start`, item.start)\n            setValue(`businessHours[${ind}].end`, item.end)\n          })\n          await monthlyHoursfn()\n          await weeklyHoursfn()\n        }\n        setBlock(false)\n      }).catch((err) => {\n        console.log(err)\n      })\n  }\n\n  useEffect(async () => {\n    getBusinessHours()\n    await monthlyHoursfn()\n    await weeklyHoursfn()\n  }, [])\n\n  return (\n    <Fragment>\n      <UILoader blocking={block} loader={<Loader />}>\n        <Card>\n          <CardBody className='py-25'>\n            <Row className='gx-4'>\n              <Col lg='10'>\n                {\n                  Object.keys(errors).map((key) => {\n\n                    return <FormFeedback key={key}>${errors[key]?.message}</FormFeedback>\n\n                  })\n                }\n                <Row tag={Form} className='gx-2 gy-1' onSubmit={handleSubmit(onSubmit)}>\n                  {\n                    fields.map((obj, i) => {\n                      return (\n                        <Row key={obj.rowid} className='mt-1'>\n                          <Col>{obj.day}</Col>\n                          <Col>\n                            <Controller\n                              name={`businessHours[${i}].status`}\n                              control={control}\n                              render={({ field }) => (\n                                <div className='form-check form-switch'>\n                                  <Input {...field} type='switch' defaultChecked={field.value} className='customSwitch' onChange={(val) => { console.log(val); field.onChange(val); monthlyHoursfn(); weeklyHoursfn() }} />\n                                </div>\n                              )}\n                            />\n                          </Col>\n                          <Col>\n                            <Controller\n                              name={`businessHours[${i}].start`}\n                              control={control}\n                              render={({ field }) => (\n                                <Input type='time' onChange={async () => { await weeklyHoursfn(); await monthlyHoursfn() }} defaultValue={obj.start} {...field} />\n                              )}\n                            />\n                            {errors.businessHours?.[i]?.start && <FormFeedback>{errors.businessHours?.[i]?.start.message}</FormFeedback>}\n                          </Col>\n                          <Col>\n                            <Controller\n                              name={`businessHours[${i}].end`}\n                              control={control}\n                              render={({ field }) => (\n                                <Input type='time' invalid={errors.rows?.[index]?.sacCode && true} onChange={async () => { await weeklyHoursfn(); await monthlyHoursfn() }} defaultValue={obj.end} {...field} />\n                              )}\n                            />\n                            {errors.businessHours?.[i]?.end && <FormFeedback>{errors.businessHours?.[i]?.end.message}</FormFeedback>}\n                          </Col>\n                        </Row>\n                      )\n                    })\n                  }\n\n                  <Row className='mt-1'>\n                    <Col> Weekly Hours</Col>\n                    <Col>{weeklyHours} </Col>\n                  </Row>\n                  <Row className='mt-1'>\n                    <Col> Monthly Hours</Col>\n                    <Col>{monthlyHours}</Col>\n                  </Row>\n                  <Col className='mt-2 pt-1' xs={12}>\n                    <Button type='submit' className='me-1' color='primary'>\n                      Submit\n                    </Button>\n                  </Col>\n\n                </Row>\n              </Col>\n            </Row>\n          </CardBody>\n        </Card>\n      </UILoader>\n    </Fragment>\n  )\n}\n\nexport default InvoiceAccounts\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","// ** Redux Imports\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\n// ** Axios Imports\nimport axios from '@src/configs/axios/axiosConfig'\n\nexport const getData = createAsyncThunk('appInvoiceSetting/getData', async organizationId => {\n  const response = await axios.post(`/organizationprefernces/get`, { organizationId })\n  return {\n    data: response.data.organizationprefernces\n  }\n})\n\nexport const addOrgPreference = createAsyncThunk('appInvoiceSetting/addOrgPreference', async (data, { }) => {\n\n  await axios.post(`/organizationprefernces/createandupdate`, data)\n  return ''\n\n})\n\nexport const appInvoiceAccountSlice = createSlice({\n  name: 'appInvoiceSetting',\n  initialState: {\n    accounts: [],\n    total: 1,\n    params: {},\n    allData: []\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(getData.fulfilled, (state, action) => {\n        state.accounts = action.payload.data\n        state.params = action.payload.params\n      })\n\n  }\n})\n\nexport default appInvoiceAccountSlice.reducer\n"],"sourceRoot":""}