{"version":3,"sources":["views/apps/client/view/contactinfocolumn.js","views/apps/client/view/ConatctInfo.js","views/apps/client/view/Tabs.js","views/apps/client/view/UserInfoCard.js","views/apps/client/view/index.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js"],"names":["contactinfocolumn","name","sortable","minWidth","selector","row","cell","className","primarystatus","color","email","contactnumber","designation","adharnumber","dinnumber","pannumber","ConatctInfo","data","dispatch","useDispatch","store","useSelector","state","client","clientInformations","id","useParams","useEffect","tabId","getConatctInfo","noHeader","sortServer","columns","responsive","sortIcon","defaultSortField","UserTabs","active","toggleTab","pills","onClick","activeTab","statusColors","statusArr","UserInfoCard","selectedClient","Can","I","a","tag","Link","to","size","outline","md","sm","lg","contactpersonname","registrationno","referredby","businessentitiesname","status","users","map","user","currenciesname","currenciescode","billingaddresscountriesshorcode","placeofsupplyname","placeofsupplyothers","gstregistrationtypesname","gstin","billingaddressline1","billingaddressline2","billingaddresscity","billingaddresszip","billingaddressstatesname","billingaddressstateothers","billingaddresscountriesname","ClientView","useState","block","setBlock","Loader","getClient","setActive","undefined","blocking","loader","xl","xs","order","tab","UILoader","props","children","overlayColor","Tag","classnames","style","backgroundColor","defaultProps","ComponentSpinner"],"mappings":"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","file":"static/js/35.4ec51d55.chunk.js","sourcesContent":["import { Link } from 'react-router-dom'\nimport { Badge, Col, Input } from \"reactstrap\"\n\nexport const contactinfocolumn = [\n  {\n    name: 'Name',\n    sortable: false,\n    minWidth: '80px',\n    selector: row => row.name,\n    cell: row => (\n      <Col className=\"\">{row.name || ''}\n        {row.primarystatus &&\n          <Badge className='ms-75' color='primary'>Primary</Badge>\n        }\n      </Col>\n    )\n  },\n  {\n    name: 'Email',\n    minWidth: '230px',\n    sortable: false,\n    selector: row => row.email,\n    cell: row => <span>{row.email || ''}</span>\n  },\n  {\n    name: 'Contact',\n    sortable: false,\n    minWidth: '180px',\n    cell: row => <span>{row.contactnumber}</span>\n  },\n  {\n    name: 'Designation',\n    minWidth: '138px',\n    sortable: true,\n    cell: row => <span>{row.designation}</span>\n  },\n  {\n    name: 'Adhar',\n    minWidth: '138px',\n    sortable: true,\n    cell: row => <span>{row.adharnumber}</span>\n  },\n  {\n    name: 'DIN',\n    minWidth: '138px',\n    sortable: true,\n    cell: row => <span>{row.dinnumber}</span>\n  },\n  {\n    name: 'PAN',\n    minWidth: '138px',\n    sortable: true,\n    cell: row => <span>{row.pannumber}</span>\n  }\n]\n","// ** React Imports\nimport { useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\n// ** Table Columns\nimport { contactinfocolumn } from './contactinfocolumn'\n\n// ** Third Party Components\nimport DataTable from 'react-data-table-component'\nimport { ChevronDown } from 'react-feather'\n\n// ** Reactstrap Imports\nimport {\n  Card\n} from 'reactstrap'\n\n// ** Store & Actions\nimport { getConatctInfo } from '@src/views/apps/client/store'\nimport { useDispatch, useSelector } from 'react-redux'\n\n// ** Styles\nimport '@styles/react/apps/app-invoice.scss'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\n\nconst ConatctInfo = (data) => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.client.clientInformations)\n  const { id } = useParams()\n  useEffect(() => {\n\n    if (data.tabId === 'contactInformation') {\n      dispatch(getConatctInfo(id))\n    }\n  }, [data.tabId])\n\n  const dataToRender = () => {\n\n    return store\n  }\n\n  return (\n    <div className='invoice-list-wrapper'>\n      <Card>\n\n        <div className='invoice-list-dataTable react-dataTable'>\n          <DataTable\n            noHeader\n            sortServer\n            columns={contactinfocolumn}\n            responsive={true}\n            data={dataToRender()}\n            sortIcon={<ChevronDown />}\n            className='react-dataTable'\n            defaultSortField='invoiceId'\n          />\n        </div>\n      </Card>\n    </div>\n  )\n}\n\nexport default ConatctInfo\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Reactstrap Imports\nimport { Card, CardBody, Nav, NavItem, NavLink, TabContent, TabPane } from 'reactstrap'\n\n// ** Icons Imports\nimport { List } from 'react-feather'\n\n\nimport ConatctInfo from './ConatctInfo'\nconst UserTabs = ({ active, toggleTab }) => {\n  return (\n    <Fragment>\n      <Nav pills className=\"flex-lg-row flex-column mb-2 nav nav-left\">\n        <NavItem>\n          <NavLink active={active === 'contactInformation'} onClick={() => toggleTab('contactInformation')}>\n            <List className='font-medium-3 me-50' />\n            <span className='fw-bold'>Contacts</span>\n          </NavLink>\n        </NavItem>       \n      </Nav>\n      <Card>\n        <CardBody className='p-1'>\n          <TabContent activeTab={active}>\n            <TabPane tabId='contactInformation'>\n              <ConatctInfo tabId={active} />\n            </TabPane>         \n          </TabContent>\n        </CardBody>\n      </Card>\n    </Fragment>\n  )\n}\nexport default UserTabs\n","// ** React Imports\nimport { Fragment } from 'react'\nimport { Link, useParams } from 'react-router-dom'\n// ** Reactstrap Imports\nimport { Card, CardBody, Col, Badge, CardHeader, Row, Button } from 'reactstrap'\nimport { Can } from '@src/utility/context/Can.js'\n\nimport { X, Edit, CheckCircle, User } from 'react-feather'\n\n\n// ** Styles\nimport '@styles/react/libs/react-select/_react-select.scss'\n\nconst statusColors = [\n  '',\n  'light-primary',\n  'light-warning'\n]\n\nconst statusArr = [\n  '',\n  \"Active\",\n  \"Inactive\"\n\n]\n\nconst UserInfoCard = ({ selectedClient }) => {\n\n  const { id } = useParams()\n\n  return (\n    <Fragment>\n      <Card>\n        <CardHeader>\n          <Col className='d-flex justify-content-between align-items-center border-bottom'>\n            <h4 className='fw-bolder pb-50 text-primary'>{selectedClient.name}</h4>\n\n            <div className='d-flex justify-content-center'>\n              <Can I={'write'} a={'task'} >\n                <Button tag={Link} to={`/task/add?clientId=${id}`} size='sm' color='primary' className='me-1' outline><CheckCircle size={16} /> Add Task</Button>\n              </Can>\n              <Can I={'write'} a={'invoice'} >\n                <Button tag={Link} to={`/invoice/add?clientId=${id}`} size='sm' color='primary' className='me-1' outline><CheckCircle size={16} /> Add Invoice</Button>\n              </Can>\n              <Can I={'write'} a={'client'} >\n                <Col tag={Link} to={`/clients/edit/${selectedClient.id}`} >\n                  <Edit className='cursor-pointer' size={16} />\n                </Col>\n              </Can>\n              <Col tag={Link} to={`/clients/list`} >\n                <X className='cursor-pointer ms-1' size={16} />\n              </Col>\n            </div>\n          </Col>\n        </CardHeader>\n        <CardBody>\n          <Row>\n            <Col className='info-container border-end' md={6} sm={12} lg={6}>\n              {selectedClient !== null ? (\n                <ul className='list-unstyled'>\n                  <li className='mb-75 row'>\n                    <span className='fw-bolder col-6'>Contact Person Name:</span>\n                    <span className='col-6 text-end'>{selectedClient.contactpersonname}</span>\n                  </li>\n                  <li className='mb-75 row'>\n                    <span className='fw-bolder col-6'>Registration No:</span>\n                    <span className='col-6 text-end'>{selectedClient.registrationno}</span>\n                  </li>\n                  <li className='mb-75 row'>\n                    <span className='fw-bolder col-6'>Referred By:</span>\n                    <span className='col-6 text-end'>{selectedClient.referredby || ''}</span>\n                  </li>\n                  <li className='mb-75 row'>\n                    <span className='fw-bolder col-6'>Email:</span>\n                    <span className='col-6 text-end'>{selectedClient.email}</span>\n                  </li>\n                  <li className='mb-75 row'>\n                    <span className='fw-bolder col-6'>Contact:</span>\n                    <span className='col-6 text-end'>{selectedClient.contactnumber}</span>\n                  </li>\n                  <li className='mb-75 row'>\n                    <span className='fw-bolder col-6'>Business Entity:</span>\n                    <span className='col-6 text-end'>{selectedClient.businessentitiesname}</span>\n                  </li>\n                  <li className='mb-75 row'>\n                    <span className='fw-bolder col-6'>Status:</span>\n                    <span className='col-6 text-end'>\n                      <Badge className='text-capitalize' color={statusColors[selectedClient.status]}>\n                        {statusArr[selectedClient.status]}\n                      </Badge>\n                    </span>\n                  </li>\n                  <li className='mb-75 row'>\n                    <span className='fw-bolder col-6'>Users Assigned:</span>\n                  </li>\n                  <li className='mb-75 row'>\n                    <span className='col-6 text-start'>\n                      {selectedClient?.users?.map((user) => {\n                        return (<Badge className='text-capitalize ms-25' color={'primary'}>\n                          <User size={12} /> {user.name}\n                        </Badge>\n                        )\n                      })\n                      }\n                    </span>\n                  </li>\n\n                </ul>\n              ) : null}\n            </Col>\n            <Col className='info-container' md={6} sm={12} lg={6}>\n              <ul className='list-unstyled'>\n                <li className='mb-75 row'>\n                  <span className='fw-bolder col-6'>Currency:</span>\n                  <span className='col-6 text-end'>{selectedClient.currenciesname} {selectedClient.currenciescode}</span>\n                </li>\n                <li className='mb-75 row'>\n                  <span className='fw-bolder col-6'>Place of Supply:</span>\n                  <span className='col-6 text-end'>{selectedClient.billingaddresscountriesshorcode === 'IN' ? selectedClient.placeofsupplyname ?? '' : selectedClient.placeofsupplyothers}</span>\n                </li>\n                <li className='mb-75 row'>\n                  <span className='fw-bolder col-6'>GSTIN Register Type:</span>\n                  <span className='col-6 text-end'>{selectedClient.gstregistrationtypesname}</span>\n                </li>\n                <li className='mb-75 row'>\n                  <span className='fw-bolder col-6'>GSTIN:</span>\n                  <span className='col-6 text-end'>{selectedClient.gstin}</span>\n                </li>\n\n                <li className='mb-75 row'>\n                  <span className='fw-bolder col-6'>Address Line 1:</span>\n                  <span className='col-6 text-end'>{selectedClient.billingaddressline1}</span>\n                </li>\n                <li className='mb-75 row'>\n                  <span className='fw-bolder col-6'>Address Line 2:</span>\n                  <span className='col-6 text-end'>{selectedClient.billingaddressline2}</span>\n                </li>\n                <li className='mb-75 row'>\n                  <Row className='d-flex justify-content-between'>\n                    <Col>\n                      <span className='fw-bolder col-6'>City:</span>\n                      <span className='col-6 text-end'>{selectedClient.billingaddresscity}</span>\n                    </Col>\n                    <Col>\n                      <span className='fw-bolder col-6'>Zip Code:</span>\n                      <span className='col-6 text-end'>{selectedClient.billingaddresszip}</span>\n                    </Col>\n                  </Row>\n                </li>\n                <li className='mb-75 row'>\n                  <Row className='d-flex justify-content-between'>\n                    <Col>\n                      <span className='fw-bolder col-6'>State:</span>\n                      <span className='col-6 text-end'>{selectedClient.billingaddresscountriesshorcode === 'IN' ? selectedClient.billingaddressstatesname ?? '' : selectedClient.billingaddressstateothers}</span>\n                    </Col>\n                    <Col>\n                      <span className='fw-bolder col-6'>Country:</span>\n                      <span className='col-6 text-end'>{selectedClient.billingaddresscountriesname}</span>\n                    </Col>\n                  </Row>\n                </li>\n              </ul>\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n    </Fragment>\n  )\n}\n\nexport default UserInfoCard\n","// ** React Imports\nimport { useEffect, useState, Fragment } from 'react'\nimport { useParams, Link } from 'react-router-dom'\n\n// ** Store & Actions\nimport { getClient } from '../store'\nimport { useSelector, useDispatch } from 'react-redux'\n\n// ** Reactstrap Imports\nimport { Row, Col, Alert } from 'reactstrap'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\n// ** User View Components\nimport UserTabs from './Tabs'\nimport UserInfoCard from './UserInfoCard'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst ClientView = () => {\n  // ** Store Vars\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const store = useSelector(state => state.client)\n  const dispatch = useDispatch()\n\n  // ** Hooks\n  const { id } = useParams()\n\n  // ** Get suer on mount\n  useEffect(async () => {\n    if (id !== null) {\n      setBlock(true)\n      await dispatch(getClient(id))\n      setBlock(false)\n    }\n  }, [dispatch])\n\n  const [active, setActive] = useState('contactInformation')\n\n  const toggleTab = tab => {\n    if (active !== tab) {\n      setActive(tab)\n    }\n  }\n\n  return store.selectedClient !== null && store.selectedClient !== undefined ? (\n    <UILoader blocking={block} loader={<Loader />}>\n      <div className='app-user-view'>\n        <Row>\n          <Col xl='12' lg='12' xs={{ order: 0 }} md={{ order: 0, size: 5 }} sm={{ order: 0 }}>\n            <UserInfoCard selectedClient={store.selectedClient} />\n          </Col>\n          <Col xl='12' lg='12' xs={{ order: 1 }} md={{ order: 1, size: 7 }} sm={{ order: 1 }}>\n            <UserTabs active={active} toggleTab={toggleTab} selectedClient={store.selectedClient}/>\n          </Col>\n        </Row>\n      </div>\n    </UILoader>\n  ) : (\n    <UILoader blocking={block} loader={<Loader />}>\n      <Alert color='danger'>\n        <h4 className='alert-heading'>Client not found</h4>\n        <div className='alert-body'>\n          Client with id: {id} doesn't exist. Check list of all Clients: <Link to='/clients/list'>Clients List</Link>\n        </div>\n      </Alert>\n    </UILoader>\n  )\n}\nexport default ClientView\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n"],"sourceRoot":""}