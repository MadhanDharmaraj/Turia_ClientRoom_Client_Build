{"version":3,"sources":["views/pages/account-settings/Attendance/LeaveSetting.js","@core/components/ui-loader/index.js","@core/components/spinner/Loading-spinner.js","views/pages/account-settings/Attendance/store/index.js"],"names":["activeOrgId","activeOrganizationid","userId","orgUserId","leaveTypeOptions","id","name","leaveTypeArr","LeaveTypes","MySwal","withReactContent","Swal","useState","data","setData","selected","setSelected","designationOptions","setDesignationOptions","designations","setDesignations","formModal","setFormModal","store","useSelector","state","leavesettings","block","setBlock","Loader","excludeWeekend","setExcludeWeekend","excludeHolidays","setExcludeHolidays","dispatch","useDispatch","schema","yup","shape","organizationId","default","required","daysCount","leaveType","status","designation","min","updatedBy","createdBy","useForm","resolver","yupResolver","defaultValues","cast","handleSubmit","errors","formState","control","setValue","setError","useEffect","handleDesignationChange","e","tempArr","Array","isArray","map","x","test","filter","k","indexOf","resetForm","closeModal","onSubmit","length","pop","updateLeaveTypes","addLeaveTypes","leaveTypeSucess","toast","success","position","leaveTypeError","Object","keys","obj","type","message","updateDLeaveSetting","sts1","sts2","addOrgPreference","axios","post","then","res","arr","catch","getLeaveTypes","getData","response","undefined","payload","excludeweekend","excludeholidays","getRow","fieldLabel","fieldName","reqflag","md","sm","className","classnames","for","render","field","invalid","colourStyles","multiValue","styles","backgroundColor","color","outline","onClick","card","index","leavetype","dayscount","size","des","includes","openEditModal","isPrimary","fire","title","text","icon","showCancelButton","confirmButtonText","customClass","confirmButton","cancelButton","buttonsStyling","result","value","deleteLeaveTypes","dismiss","DismissReason","cancel","lg","defaultChecked","onChange","isOpen","toggle","blocking","loader","key","tag","Form","options","ref","inputRef","classNamePrefix","find","c","val","getOptionLabel","option","getOptionValue","getSelectRow","isMulti","xs","UILoader","props","children","overlayColor","Tag","style","defaultProps","ComponentSpinner","createAsyncThunk","organizationprefernces","createSlice","initialState","accounts","total","params","allData","reducers","extraReducers","builder","addCase","fulfilled","action"],"mappings":"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","file":"static/js/109.3c95eeab.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useEffect, useState } from 'react'\nimport Select from 'react-select'\n// ** Reactstrap Imports\nimport axios from '@src/configs/axios/axiosConfig'\nimport {\n  Row,\n  Col,\n  Card,\n  Form,\n  Label,\n  Input,\n  Button,\n  CardBody,\n  FormFeedback,\n  Table,\n  Modal,\n  ModalHeader,\n  ModalBody\n} from 'reactstrap'\nimport { useForm, Controller } from \"react-hook-form\"\nimport * as yup from \"yup\"\nimport { yupResolver } from \"@hookform/resolvers/yup\"\nimport { getData, addOrgPreference } from './store/index'\nimport { getLeaveTypes, addLeaveTypes, updateLeaveTypes, deleteLeaveTypes } from './store/leavesettings'\nimport { activeOrganizationid, orgUserId } from '@src/helper/sassHelper'\n\nimport Swal from 'sweetalert2'\nimport withReactContent from 'sweetalert2-react-content'\nimport UILoader from '@components/ui-loader'\nimport Spinner from '@components/spinner/Loading-spinner'\nconst activeOrgId = activeOrganizationid()\nconst userId = orgUserId()\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { useDispatch, useSelector } from 'react-redux'\nimport toast from 'react-hot-toast'\n\nconst leaveTypeOptions = [{ id: '1', name: \"Paid\" }, { id: 2, name: 'Non Paid' }]\nconst leaveTypeArr = [\"\", \"Paid\", \"Non Paid\"]\n\nconst LeaveTypes = () => {\n  const MySwal = withReactContent(Swal)\n  const [data, setData] = useState([])\n  const [selected, setSelected] = useState(null)\n  const [designationOptions, setDesignationOptions] = useState([])\n  const [designations, setDesignations] = useState([])\n  const [formModal, setFormModal] = useState(false)\n  const store = useSelector(state => state.leavesettings)\n  const [block, setBlock] = useState(false)\n  const Loader = () => {\n    return (\n      <Fragment>\n        <Spinner />\n      </Fragment>\n    )\n  }\n  const [excludeWeekend, setExcludeWeekend] = useState(null)\n  const [excludeHolidays, setExcludeHolidays] = useState(null)\n\n  const dispatch = useDispatch()\n\n  const schema = yup.object().shape({\n    organizationId: yup.string().default(activeOrgId),\n    name: yup.string().required('Please Enter Name'),\n    daysCount: yup.string().required('Please Enter Days Count'),\n    leaveType: yup.string().required('Please Select Leave Type'),\n    status: yup.number().default(1),\n    designation: yup.array().min(1, 'Please Select Designation'),\n    updatedBy: yup.string().default(userId),\n    createdBy: yup.string().default(userId)\n  })\n\n  const { handleSubmit, formState: { errors }, control, setValue, setError } = useForm({\n    resolver: yupResolver(schema),\n    defaultValues: schema.cast()\n  })\n\n  useEffect(() => {\n    setFormModal(false)\n  }, [])\n\n\n  const getDesignation = () => {\n    axios.post('/designations/dropdown').\n      then((res) => {\n        const arr = res.data.designations\n        setDesignationOptions(arr)\n\n      }).catch(() => { })\n  }\n\n  const deletefn = (id) => {\n    return MySwal.fire({\n      title: 'Are you sure?',\n      text: \"You won't be able to revert this!\",\n      icon: 'warning',\n      showCancelButton: true,\n      confirmButtonText: 'Yes, delete it!',\n      customClass: {\n        confirmButton: 'btn btn-primary',\n        cancelButton: 'btn btn-outline-danger ms-1'\n      },\n      buttonsStyling: false\n    }).then(async (result) => {\n      if (result.value) {\n        await dispatch(deleteLeaveTypes(id))\n        MySwal.fire({\n          icon: 'success',\n          title: 'Deleted!',\n          text: 'LeaveTypes has been deleted.',\n          customClass: {\n            confirmButton: 'btn btn-success'\n          }\n        })\n        return true\n      } else if (result.dismiss === MySwal.DismissReason.cancel) {\n        return false\n      }\n    })\n  }\n\n  const handleDesignationChange = (e) => {\n    setDesignations(e ?? [])\n    const tempArr = Array.isArray(e) ? e.map(x => x.id) : []\n    const test = tempArr.filter((id, k) => id !== 0 && tempArr.indexOf(id) === k)\n    setValue(\"designation\", test)\n  }\n\n\n  const resetForm = () => {\n\n    setValue('organizationId', activeOrgId)\n    setValue('name', '')\n    setValue('daysCount', '')\n    handleDesignationChange()\n    setValue('id', '')\n    setValue('leaveType', '')\n    setValue('status', 1)\n\n  }\n\n  const closeModal = () => {\n    setFormModal(false)\n    resetForm()\n  }\n\n  const onSubmit = async data => {\n    setBlock(true)\n    if (data.designation.length === designationOptions.length - 1) {\n      data.designation.pop(0)\n    }\n    if (selected !== null) {\n      await dispatch(updateLeaveTypes(data))\n    } else {\n      await dispatch(addLeaveTypes(data))\n    }\n    resetForm()\n    closeModal()\n  }\n\n  useEffect(() => {\n    if (store.leaveTypeSucess) {\n      toast.success(`Leave Types Successfully, ${selected === null ? 'Added' : 'Updated'}`, { position: 'bottom-right' })\n      setBlock(false)\n      setSelected(null)\n      resetForm()\n      closeModal()\n    }\n  }, [store.leaveTypeSucess])\n\n  useEffect(() => {\n    if (store.leaveTypeError !== null) {\n      setBlock(false)\n      Object.keys(store.leaveTypeError).map((obj) => {\n        setError(obj, { type: 'custom', message: store.leaveTypeError[obj][0] })\n      })\n    }\n  }, [store.leaveTypeError])\n\n\n  const updateDLeaveSetting = async (sts1, sts2) => {\n    await addOrgPreference({ excludeWeekend: sts1, excludeHolidays: sts2, createdBy: userId, updatedBy: userId, organizationId: activeOrgId })\n  }\n\n  useEffect(() => {\n    getDesignation()\n  }, [])\n\n  useEffect(async () => {\n\n    await dispatch(getLeaveTypes())\n    const response = await dispatch(getData(activeOrgId))\n    const res = response.payload.data\n    if (res !== undefined) {\n      setExcludeWeekend(res.excludeweekend || false)\n      setExcludeHolidays(res.excludeholidays || false)\n    }\n  }, [])\n\n  useEffect(() => {\n    setData(store.data)\n  }, [store.data])\n\n  const getRow = (fieldLabel, fieldName, reqflag = true) => {\n    return (\n      <Col md={12}>\n        <Label sm='12' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName}>\n          {fieldLabel}\n        </Label>\n        <Col>\n          <Controller\n            id={fieldName}\n            name={fieldName}\n            control={control}\n            render={({ field }) => <Input invalid={errors[fieldName] && true} {...field} />}\n          />\n          {errors[fieldName] && <FormFeedback>{errors[fieldName].message}</FormFeedback>}\n        </Col>\n      </Col>\n    )\n  }\n\n  const getSelectRow = (fieldLabel, fieldName, options, reqflag = false) => {\n    return (\n\n      <Col md={12}>\n        <Label sm='12' className={classnames(`form-label ${reqflag ? 'required' : ''}`)} for={fieldName} >\n          {fieldLabel}\n        </Label>\n        <Col>\n          <Controller\n            control={control}\n            name={fieldName}\n            id={fieldName}\n            render={({ field, ref }) => (\n              <Select\n                inputRef={ref}\n                className={classnames('react-select', { 'is-invalid': errors[fieldName] })}\n                {...field}\n                classNamePrefix='select'\n                options={options}\n                value={options.find(c => { return c.id === field.value })}\n                onChange={val => { return field.onChange(val.id) }}\n                getOptionLabel={(option) => option.name}\n                getOptionValue={(option) => option.id}\n              />\n            )}\n\n          />\n          {errors[fieldName] && <FormFeedback className='text-danger'>{errors[fieldName]?.message}</FormFeedback>}\n        </Col>\n      </Col>\n\n    )\n  }\n\n  const openEditModal = card => {\n    setSelected(card)\n    setFormModal(true)\n\n    setValue('organizationId', activeOrgId)\n    setValue('name', card.name)\n    setValue('daysCount', card.dayscount)\n\n    const des = designationOptions.filter((obj) => card.designation.includes(obj.id))\n    handleDesignationChange(des)\n    setValue('id', card.id)\n    setValue('leaveType', card.leavetype)\n    setValue('status', card.status)\n\n  }\n\n  const colourStyles = {\n    multiValue: (styles, { }) => {\n\n      return {\n        ...styles,\n        backgroundColor: '#7367f0'\n      }\n    }\n  }\n\n  return (\n    <Fragment>\n      <Card>\n        <CardBody className='py-25'>\n          <Row className='gx-4'>\n            <Col className='d-flex align-items-center'>\n              <h6 className='fw-bolder mb-2'>Leave Types</h6>\n            </Col>\n            <Col className='d-flex align-items-sm-center justify-content-xl-end justify-content-start flex-xl-nowrap flex-wrap flex-sm-row flex-column pe-xl-1 p-0 mt-xl-0 mt-1'>\n              <Button color='primary' outline className='ms-1' onClick={() => { setFormModal(true) }}>\n                Add\n              </Button>\n            </Col>\n          </Row>\n          <Table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Leave Type</th>\n                <th>No of Day's</th>\n                <th>Action</th>\n              </tr>\n            </thead>\n            <tbody>\n              {data.map((card, index) => {\n                return (\n                  <tr key={index}>\n                    <td>{card.name}</td>\n                    <td>{leaveTypeArr[card.leavetype]}</td>\n                    <td>{card.dayscount}</td>\n                    <td>\n                      <Button size='sm' outline color='primary' className='me-75' onClick={() => openEditModal(card)}>\n                        Edit\n                      </Button>\n                      {!card.isPrimary &&\n                        <Button size='sm' outline onClick={() => { deletefn(card.id) }}>Delete</Button>\n                      }\n                    </td>\n                  </tr>\n                )\n              }\n              )}\n            </tbody>\n          </Table>\n\n          <Col lg='12' className='mt-2 mt-lg-0'>\n            <h6 className='fw-bolder'>Leave Settings</h6>\n            <div className='demo-inline-spacing'>\n              {excludeWeekend !== null &&\n                <div className='form-check form-switch'>\n                  <Input type='switch' name='excludeWeekend' id='exampleCustomSwitch' defaultChecked={excludeWeekend} onChange={() => { updateDLeaveSetting(!excludeWeekend, excludeHolidays) }} />\n                  <Label for='exampleCustomSwitch' className='form-check-label'>\n                    Exclude Weekend for Leave Calculation\n                  </Label>\n                </div>\n              }\n              {excludeHolidays !== null &&\n                <div className='form-check form-switch'>\n                  <Input type='switch' name='excludeHolidays' id='exampleCustomSwitchDisabled' defaultChecked={excludeHolidays} onChange={() => { updateDLeaveSetting(excludeWeekend, !excludeHolidays) }} />\n                  <Label for='exampleCustomSwitchDisabled' className='form-check-label'>\n                    Exclude Holidays for Leave Calculation\n                  </Label>\n                </div>\n              }\n            </div>\n          </Col>\n        </CardBody>\n      </Card>\n      <Modal isOpen={formModal} toggle={() => setFormModal(!formModal)} className='modal-dialog-centered'>\n        <UILoader blocking={block} loader={<Loader />}>\n          <ModalHeader toggle={() => closeModal()}>Holidays</ModalHeader>\n          <ModalBody>\n            {\n              Object.keys(errors).map((key) => {\n\n                return <FormFeedback key={key}>${errors[key]?.message}</FormFeedback>\n\n              })\n            }\n            <Col lg='12'>\n              {\n                Object.keys(errors).map((key) => {\n\n                  return <FormFeedback key={key}>${errors[key]?.message}</FormFeedback>\n\n                })\n              }\n              <Row tag={Form} className='gx-2 gy-1' onSubmit={handleSubmit(onSubmit)}>\n\n                {getRow('Name', 'name', true)}\n\n                {getSelectRow('Leave Type', 'leaveType', leaveTypeOptions, true)}\n\n                {getRow('No of Days', 'daysCount', true)}\n\n                <Col md={12}>\n                  <Label sm='12' className={classnames(`form-label required`)} for={`designation`} >\n                    Applicable Designation\n                  </Label>\n                  <Col>\n                    <Controller\n                      control={control}\n                      name=\"designation\"\n                      id=\"designation\"\n                      render={({ field, ref }) => (\n                        <Select\n                          inputRef={ref}\n                          className={classnames('react-select', { 'is-invalid': errors.designation })}\n                          {...field}\n                          classNamePrefix='select'\n                          options={designationOptions}\n                          isMulti={true}\n                          onChange={handleDesignationChange}\n                          value={designations} // set selected values\n                          getOptionLabel={(option) => option.name}\n                          getOptionValue={(option) => option.id}\n                          styles={colourStyles}\n                        />\n                      )}\n\n                    />\n                    {errors['designation'] && <FormFeedback className='text-danger'>{errors['designation']?.message}</FormFeedback>}\n                  </Col>\n                </Col>\n\n                <Col className='mt-2 pt-1' xs={12}>\n                  <Button type='submit' className='me-1' color='primary'>\n                    Submit\n                  </Button>\n                  <Button type='button' className='me-1' color='warning' onClick={() => closeModal()}>\n                    Cancel\n                  </Button>\n                </Col>\n              </Row>\n            </Col>\n          </ModalBody>\n        </UILoader>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default LeaveTypes\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n","const ComponentSpinner = () => {\n  return (\n    <div className='fallback-spinner'>\n      <div className='loading'>\n        <div className='effect-1 effects'></div>\n        <div className='effect-2 effects'></div>\n        <div className='effect-3 effects'></div>\n      </div>\n    </div>\n  )\n}\n\nexport default ComponentSpinner\n","// ** Redux Imports\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\n\n// ** Axios Imports\nimport axios from '@src/configs/axios/axiosConfig'\n\nexport const getData = createAsyncThunk('appInvoiceSetting/getData', async organizationId => {\n  const response = await axios.post(`/organizationprefernces/get`, { organizationId })\n  return {\n    data: response.data.organizationprefernces\n  }\n})\n\nexport const addOrgPreference = createAsyncThunk('appInvoiceSetting/addOrgPreference', async (data, { }) => {\n\n  await axios.post(`/organizationprefernces/createandupdate`, data)\n  return ''\n\n})\n\nexport const appInvoiceAccountSlice = createSlice({\n  name: 'appInvoiceSetting',\n  initialState: {\n    accounts: [],\n    total: 1,\n    params: {},\n    allData: []\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder\n      .addCase(getData.fulfilled, (state, action) => {\n        state.accounts = action.payload.data\n        state.params = action.payload.params\n      })\n\n  }\n})\n\nexport default appInvoiceAccountSlice.reducer\n"],"sourceRoot":""}